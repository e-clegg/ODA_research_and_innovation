corrected_3 <- country_table_cleaned %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
print(paste0("Original text: ", original_1$country, " / ", original_2$country, " / ", original_3$country))
expect_equal(corrected_1$country, corrected_2$country, corrected_3$country,
"democratic republic of the congo")
print("Checking: Tanzania")
original_4 <- country_table %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
corrected_4 <- country_table_cleaned %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
print(paste0("Original text: ", original_4$country))
expect_equal(corrected_4$country, "tanzania")
print("Checking: China")
original_5 <- country_table %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
corrected_5 <- country_table_cleaned %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
print(paste0("Original text: ", original_5$country))
expect_equal(corrected_5$country, "china")
print("Checking: Korea")
original_6 <- country_table %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_true(str_detect(countries, "democratic people’s republic of korea"))
print("Checking: United States")
original_7 <- country_table %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
corrected_7 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
original_8 <- country_table %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
corrected_8 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
original_9 <- country_table %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
corrected_9 <- country_table_cleaned %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
print(paste0("Original text: ", original_7$country, " / ", original_8$country))
expect_equal(corrected_7$country, corrected_8$country, "united states")
print(paste0("Original text: ", original_9$country))
countries <- paste0(corrected_9$country, collapse = "|")
expect_true(str_detect(countries, "united states"))
print("Checking: (the) removed")
original_6 <- country_table %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_false(str_detect(countries, "\\(the\\)"))
})
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = recipient_country,
location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, ""))) %>%
select(project_id = id, location_country, beneficiary_country) %>%
unique()
# Convert location vs. beneficiary country data to long format
country_table <- country_table %>%
gather(key = "country_type", value = "country", -project_id) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
country = str_to_lower(country))
# Clean country names
country_table_cleaned <- country_table %>%
mutate(country = str_replace_all(country, "\\(the\\)", ""),  # remove (the)
country = gsub("[()]", "", country),                  # remove all parentheses
country = str_replace_all(country, "tanzania, united republic of", "tanzania"),
country = str_replace_all(country, "congo the democratic republic of the|drc|democratic republic of congo",
"democratic republic of the congo"),
country = str_replace_all(country, "china people's republic of", "china"),
country = str_replace_all(country, "democratic people's republic of korea", "democratic people’s republic of korea")) %>%
# standardise separators
mutate(country = gsub("\\s*\\([^\\)]+\\)","", country))
# Convert dataset to long with one row per country entry
country_table_cleaned <- country_table_cleaned %>%
separate_rows(country, sep = ",|;", convert = FALSE) %>%
mutate(country = str_trim(country)) %>%
unique() %>%
filter(country != "")
# Further country cleaning
country_table_cleaned <- country_table_cleaned %>%
mutate(country = str_trim(country)) %>%
mutate(country = case_when(
str_detect(country, "uk|scotland|wales|united kingdom|england|ireland") ~ "united kingdom",
str_detect(country, "usa|united states") ~ "united states",
country == "us" ~ "united states",
str_detect(country, "ivoire") ~ "ivory coast",
str_detect(country, "viet") ~ "vietnam",
str_detect(country, "lao") ~ "laos",
TRUE ~ country)) %>%
unique()
# Replace country with "unknown" if not recognised against Tableau's accepted list
country_table_final <- country_table_cleaned %>%
mutate(country = if_else(country %in% dac_lookup$country_name, country, "unknown")) %>%
mutate(country = tools::toTitleCase(country)) %>%
unique()
# Save datasets for testing
saveRDS(country_table, file = "country_table.rds")
saveRDS(country_table_cleaned, file = "country_table_cleaned.rds")
# Check country cleaning
country_table <- readRDS(file = "country_table.rds")
saveRDS(country_table_final, file = "country_table_final.rds")
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
# Save datasets for testing
saveRDS(country_table, file = "Outputs/country_table.rds")
saveRDS(country_table_cleaned, file = "Outputs/country_table_cleaned.rds")
saveRDS(country_table_final, file = "Outputs/country_table_final.rds")
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
View(tableau_projects)
View(tableau_projects)
# Add row ID field to dataset
tableau_projects$row_id <- seq.int(nrow(tableau_projects))
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
Country %in% c("Unknown") | is.na(Country)) %>%
select(row_id, id) %>%
unique() %>%
mutate(exclude = 1)
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
country %in% c("Unknown") | is.na(country)) %>%
select(row_id, id) %>%
unique() %>%
mutate(exclude = 1)
View(unknown_country_projects)
# Identify projects that have both a populated and missing country field
# Restrict to just the populated fields (to keep)
duplicate_country_projects <- filter(tableau_projects,
!(country %in% c("Unknown") | is.na(country))) %>%
select(row_id, id) %>%
unique() %>%
filter(id %in% unknown_country_projects$id) %>%
mutate(keep = 1)
View(duplicate_country_projects)
# Exclude project records for "Unknown" country when the project has other country info
tableau_projects_tidied <- tableau_projects %>%
left_join(unknown_country_projects, by = c("row_id", "id")) %>%
left_join(duplicate_country_projects, by = c("row_id", "id")) %>%
filter(keep == 1 |
exclude == 1 & !(id %in% duplicate_country_projects$id) |
is.na(keep) & is.na(exclude)) %>%
select(-keep, -exclude) %>%
mutate(country = coalesce(country, "Unknown"))
rm(tableau_projects)
rm(unknown_country_projects)
rm(duplicate_country_projects)
unique(tableau_projects_tidied$Fund)
unique(tableau_projects_tidied$Funder)
& str_detect(iati_id, "-1-"),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
& str_detect(iati_id, "-1-")),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
tableau_projects_tidied <- tableau_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else((Funder == "Foreign, Commonwealth and Development Office"
& str_detect(iati_id, "-1-")),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
View(tableau_projects_tidied)
funds_actual <- tableau_projects_tidied$Fund %>% unique()
funds_actual <- tableau_projects_tidied$Fund %>%
unique() %>% sort()
funds_actual
funds_actual <- tableau_projects_tidied$Fund %>%
unique() %>% sort()
funds_expected <- c("FCDO Research - Partnerships", "FCDO Research - Programmes",
"Global Challenges Research Fund (GCRF)", "Global Health Research - Partnerships",
"Global Health Research - Programmes", "Global Health Security - GAMRIF",
"Global Health Security - UK Vaccine Network", "International Climate Finance (ICF)",
"Newton Fund")
expect_equal(funds_actual, funds_expected)
gov_funders_expected <- c(
"Department for Business, Energy and Industrial Strategy",
"Department for Environment, Food, and Rural Affairs",
"Department of Health and Social Care",
"Foreign, Commonwealth and Development Office"
)
funds_expected <- c("FCDO Research - Partnerships", "FCDO Research - Programmes",
"Global Challenges Research Fund (GCRF)", "Global Health Research - Partnerships",
"Global Health Research - Programmes", "Global Health Security - GAMRIF",
"Global Health Security - UK Vaccine Network", "International Climate Finance (ICF)",
"Newton Fund")
funders_actual <- tableau_projects_tidied$Funder %>%
unique() %>% sort()
expect_equal(funders_actual, gov_funders_expected)
# check list of ODA R&I funders
table(tableau_projects_tidied$currency)
View(tableau_projects_tidied)
currencies_actual <- tableau_projects_tidied$currency %>%
unique()
expect_false(str_detect(currencies_actual, "GBP"))
expect_false(str_detect(currencies_actual, "GDP"))
currencies_actual <- tableau_projects_tidied$currency %>%
filter(!is.na(currency)) %>%
unique()
unique()
currencies_actual <- tableau_projects_tidied %>%
select(currency) %>%
filter(!is.na(currency)) %>%
unique()
View(currencies_actual)
expect_false("GDB" %in% currencies_actual$currency)
expect_false("GBP" %in% currencies_actual$currency)
expect_false("GDP" %in% currencies_actual$currency)
# Test country unknown exclusion logic
test1 <- filter(tableau_projects, id == "GB-CHC-209131-A05500")
test2 <- filter(tableau_projects_tidied, id == "GB-CHC-209131-A05500")
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
# Test country unknown exclusion logic
test1 <- filter(tableau_projects, id == "GB-CHC-209131-A05500")
test2 <- filter(tableau_projects_tidied, id == "GB-CHC-209131-A05500")
View(test1)
View(test2)
test1 <- filter(tableau_projects, id == "GB-GOV-3-Chevening-Scholarships-SI")
test2 <- filter(tableau_projects_tidied, id == "GB-GOV-3-Chevening-Scholarships-SI")
test3 <- filter(tableau_projects, str_detect(Funder, "Rural"))
test4 <- filter(tableau_projects_tidied, str_detect(Funder, "Rural"))
View(test3)
View(test4)
test1 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-7-ICF-P0011-RD"))
test_that("only projects with no country information whatsoever are labelled unknown", {
print("genuine unknown - Defra")
test1 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(test1$country, "Unknown")
expect_equal(nrow(test1), 1)
})
test <- filter(tableau_projects_tidied, id == "GCRFNGR6\1548")
View(test)
test <- filter(tableau_projects_tidied, str_detect(title, "UMURINZI"))
View(test)
test <- filter(tableau_projects, str_detect(title, "UMURINZI"))
View(test)
test2 <- filter(duplicate_country_projects, str_detect(id, "GB-GOV-7-MOHC-001"))
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
# Add row ID field to dataset
tableau_projects$row_id <- seq.int(nrow(tableau_projects))
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
country %in% c("Unknown") | is.na(country)) %>%
select(row_id, id) %>%
unique() %>%
mutate(exclude = 1)
# Identify projects that have both a populated and missing country field
# Restrict to just the populated fields (to keep)
duplicate_country_projects <- filter(tableau_projects,
!(country %in% c("Unknown") | is.na(country))) %>%
select(row_id, id) %>%
unique() %>%
filter(id %in% unknown_country_projects$id) %>%
mutate(keep = 1)
test2 <- filter(duplicate_country_projects, str_detect(id, "GB-GOV-7-MOHC-001"))
test1 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-7-MOHC-001"))
View(test1)
View(tableau_projects_tidied)
test3 <- filter(tableau_projects_tidied, id == "101918")
View(test3)
test2 <- filter(tableau_projects_tidied, str_detect(id, "GCRF-RAECHEPSSA-1819-3-HEPSSA2\47"))
test2 <- filter(tableau_projects_tidied, str_detect(id, "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\\47"))
test2 <- filter(tableau_projects_tidied, str_detect(id, "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\47"))
test2 <- filter(tableau_projects_tidied, str_detect(id, "GCRF-RAECHEPSSA-1819-3-HEPSSA2"))
View(test2)
test2 <- filter(tableau_projects_tidied, id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\71")
test2 <- filter(tableau_projects_tidied, id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71")
View(test2)
expect_equal(test2$country_type, 1)
expect_equal(nrow(test2), 1)
test4 <- filter(tableau_projects_tidied, id == "ES/P010245/1")
unique(test4$country_type)
length(unique(test4$country_type))
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
View(test4)
test5 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-3-Chevening-Scholarships"))
test5 <- filter(tableau_projects_tidied, str_detect(id, "Chevening"))
test5 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-3-CHEVENING-SCHOLARSHIPS-AL"))
test5 <- filter(tableau_projects_tidied, str_detect(id, "CHEVENING"))
test5 <- filter(tableau_projects_tidied, str_detect(title, "Chevening"))
View(all_projects_tidied)
### ACTIVE PROJECT EXTRACT FOR TABLEAU ----
tableau_projects_tidied <- readRDS("Outputs/tableau_projects_tidied.rds")
org_name <- "International Development Research Centre"
test <- org_country_lookup(org_name)
expect_equals(org_country_lookup("International Development Research Centre"), "Canada")
expect_equal(org_country_lookup("International Development Research Centre"), "Canada")
### GOV FUNDER IATI RESEARCH ACTIVITIES
gov_list_final <- readRDS("Outputs/gov_list_final.rds")
gov_funders_actual <- sort(unique(gov_list_final$reporting_org))
expect_equal(gov_funders_actual, gov_funders_expected)
# check list of ODA R&I funds
unique(gov_list_final$fund)
funds_actual <- gov_list_final$fund %>%
unique() %>% sort()
funds_actual <- gov_list_final %>%
filter(fund %in% funds_expected)
test_that("fund names are as expected", {
gov_funds_actual <- gov_list_final %>%
filter(fund %in% funds_expected)
expect_equal(nrow(gov_list_final, gov_funds_actual))
})
expect_equal(nrow(gov_list_final), nrow(gov_funds_actual))
gov_funds_actual <- gov_list_final %>%
filter(fund %in% funds_expected)
expect_equal(nrow(gov_list_final), nrow(gov_funds_actual))
gov_funders_expected <- c(
"Department for Business, Energy and Industrial Strategy",
"Department for Environment, Food, and Rural Affairs",
"Department of Health and Social Care",
"Foreign, Commonwealth and Development Office")
funds_expected <- c("FCDO Research - Partnerships", "FCDO Research - Programmes",
"Global Challenges Research Fund (GCRF)", "Global Health Research - Partnerships",
"Global Health Research - Programmes", "Global Health Security - GAMRIF",
"Global Health Security - UK Vaccine Network", "International Climate Finance (ICF)",
"Newton Fund")
## LOOKUPS ##
expect_equal(org_country_lookup("International Development Research Centre"), "Canada")
### GOV FUNDER IATI RESEARCH ACTIVITIES
gov_list_final <- readRDS("Outputs/gov_list_final.rds")
test_that("check all UK government funders are present in dataset", {
gov_funders_actual <- sort(unique(gov_list_final$reporting_org))
expect_equal(gov_funders_actual, gov_funders_expected)
})
test_that("UK government funder names are as expected", {
gov_funders_actual <- gov_list_final %>%
filter(reporting_org %in% gov_funders_expected)
expect_equal(nrow(gov_list_final), nrow(gov_funders_actual))
})
test_that("fund names are as expected", {
gov_funds_actual <- gov_list_final %>%
filter(fund %in% funds_expected)
expect_equal(nrow(gov_list_final), nrow(gov_funds_actual))
})
### MASTER DATASET ----
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
test_that("check all UK government funders are present in dataset", {
gov_funders_actual <- sort(unique(all_projects_tidied$Funder))
expect_equal(gov_funders_actual, gov_funders_expected)
})
test_that("co-funded MRC project processed correctly", {
mrc_cofunded_example <- filter(all_projects_tidied,
id == "MR/M009211/1")
mrc_common_info <- mrc_example_actual %>%
select(-Funder, -Fund, -iati_id) %>%
unique()
expect_equal(nrow(mrc_cofunded_example), 3)
expect_equal(nrow(mrc_common_info), 1)
})
test_that("check each project has a unique ID", {
unique_projects <- all_projects_tidied %>%
select(-Funder, -Fund, -iati_id) %>%
unique()
unique_project_ids <- select(unique_projects, id) %>% unique()
### Investigate duplicates (partner org order)
duplicates_ids <- unique_projects %>%
group_by(id) %>%
summarise(n = n()) %>%
filter(n > 1)
duplicates <- unique_projects %>%
filter(id %in% duplicates_ids$id)
###
expect_equal(nrow(unique_projects), nrow(unique_project_ids))
})
test_that("check Wellcome grants with no ODA spend are excluded", {
wellcome_zero_grants <- all_projects_tidied %>%
filter(extending_org == "Wellcome Trust",
(amount == 0 | is.na(amount)))
expect_equal(nrow(wellcome_zero_grants), 0)
})
test_that("non-research partners have been excluded", {
non_research_org <- all_projects_tidied %>%
filter(extending_org == "Sightsavers")
expect_equal(nrow(non_research_org), 0)
})
# Read in files for testing
country_table <- readRDS(file = "country_table.rds")
# Read in files for testing
country_table <- readRDS(file = "Outputs/country_table.rds")
country_table_cleaned <- readRDS(file = "Outputs/country_table_cleaned.rds")
test_that("check common country formatting issues", {
print("Checking: DRC")
original_1 <- country_table %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
corrected_1 <- country_table_cleaned %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
original_2 <- country_table %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
corrected_2 <- country_table_cleaned %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
original_3 <- country_table %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
corrected_3 <- country_table_cleaned %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
print(paste0("Original text: ", original_1$country, " / ", original_2$country, " / ", original_3$country))
expect_equal(corrected_1$country, corrected_2$country, corrected_3$country,
"democratic republic of the congo")
print("Checking: Tanzania")
original_4 <- country_table %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
corrected_4 <- country_table_cleaned %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
print(paste0("Original text: ", original_4$country))
expect_equal(corrected_4$country, "tanzania")
print("Checking: China")
original_5 <- country_table %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
corrected_5 <- country_table_cleaned %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
print(paste0("Original text: ", original_5$country))
expect_equal(corrected_5$country, "china")
print("Checking: Korea")
original_6 <- country_table %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_true(str_detect(countries, "democratic people’s republic of korea"))
print("Checking: United States")
original_7 <- country_table %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
corrected_7 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
original_8 <- country_table %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
corrected_8 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
original_9 <- country_table %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
corrected_9 <- country_table_cleaned %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
print(paste0("Original text: ", original_7$country, " / ", original_8$country))
expect_equal(corrected_7$country, corrected_8$country, "united states")
print(paste0("Original text: ", original_9$country))
countries <- paste0(corrected_9$country, collapse = "|")
expect_true(str_detect(countries, "united states"))
print("Checking: (the) removed")
original_6 <- country_table %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_false(str_detect(countries, "\\(the\\)"))
})
unmatched_countries <- country_table_cleaned %>%
filter(!country %in% dac_lookup$country_name) %>%
select(country) %>%
unique()
print(paste0("No. of unrecognised countries: ", nrow(unmatched_countries)))
View(unmatched_countries)
### ACTIVE PROJECT EXTRACT FOR TABLEAU ----
tableau_projects_tidied <- readRDS("Outputs/tableau_projects_tidied.rds")
test_that("fund names are as expected", {
funds_actual <- tableau_projects_tidied$Fund %>%
unique() %>% sort()
expect_equal(funds_actual, funds_expected)
})
test_that("funder names are as expected", {
funders_actual <- tableau_projects_tidied$Funder %>%
unique() %>% sort()
expect_equal(funders_actual, gov_funders_expected)
})
test_that("no GBP currency typo", {
currencies_actual <- tableau_projects_tidied %>%
select(currency) %>%
filter(!is.na(currency)) %>%
unique()
expect_false("GDP" %in% currencies_actual$currency)
})
test_that("check active projects are included only", {
status_actual <- unique(all_projects_tidied$status)
status_expected <- c("Active", "Unknown")
expect_equal(status_actual, status_expected)
})
status_actual <- unique(all_projects_tidied$status)
test_that("only projects with no country information whatsoever are labelled unknown", {
print("example 1: genuine unknown - Defra")
test1 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(test1$country, "Unknown")
expect_equal(nrow(test1), 1)
print("example 2: known beneficiary, no known location")
test2 <- filter(tableau_projects_tidied, id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71")
expect_equal(test2$country_type, 1)
expect_equal(nrow(test2), 1)
print("example 3: known location, no known beneficiary")
test3 <- filter(tableau_projects_tidied, id == "101918")
expect_equal(test3$country_type, 2)
expect_equal(nrow(test3), 1)
print("example 4: known beneficiary and known location")
test4 <- filter(tableau_projects_tidied, id == "ES/P010245/1")
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
# print("example 5: check Chevening")
# test5 <- filter(tableau_projects_tidied, str_detect(title, "Chevening"))
# expect_equal(length(unique(test5$country_type)), 2)
# expect_equal(nrow(test5), 2)
})
