filter(str_detect(project_id, "300211-4"), country_type == 1)
corrected_3 <- country_table_cleaned %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
print(paste0("Original text: ", original_1$country, " / ", original_2$country, " / ", original_3$country))
expect_equal(corrected_1$country, corrected_2$country, corrected_3$country,
"democratic republic of the congo")
print("Checking: Tanzania")
original_4 <- country_table %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
corrected_4 <- country_table_cleaned %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
print(paste0("Original text: ", original_4$country))
expect_equal(corrected_4$country, "tanzania")
print("Checking: China")
original_5 <- country_table %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
corrected_5 <- country_table_cleaned %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
print(paste0("Original text: ", original_5$country))
expect_equal(corrected_5$country, "china")
print("Checking: Korea")
original_6 <- country_table %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_true(str_detect(countries, "democratic people’s republic of korea"))
print("Checking: United States")
original_7 <- country_table %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
corrected_7 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
original_8 <- country_table %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
corrected_8 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
original_9 <- country_table %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
corrected_9 <- country_table_cleaned %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
print(paste0("Original text: ", original_7$country, " / ", original_8$country))
expect_equal(corrected_7$country, corrected_8$country, "united states")
print(paste0("Original text: ", original_9$country))
countries <- paste0(corrected_9$country, collapse = "|")
expect_true(str_detect(countries, "united states"))
print("Checking: (the) removed")
original_6 <- country_table %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_false(str_detect(countries, "\\(the\\)"))
# print("check project that should identify as UK")
# id == "103710"
})
country_table <- readRDS(file = "Outputs/country_table.rds")
country_table_cleaned <- readRDS(file = "Outputs/country_table_cleaned.rds")
test_that("check common country formatting issues", {
print("Checking: DRC")
original_1 <- country_table %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
corrected_1 <- country_table_cleaned %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
original_2 <- country_table %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
corrected_2 <- country_table_cleaned %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
original_3 <- country_table %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
corrected_3 <- country_table_cleaned %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
print(paste0("Original text: ", original_1$country, " / ", original_2$country, " / ", original_3$country))
expect_equal(corrected_1$country, corrected_2$country, corrected_3$country,
"democratic republic of the congo")
print("Checking: Tanzania")
original_4 <- country_table %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
corrected_4 <- country_table_cleaned %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
print(paste0("Original text: ", original_4$country))
expect_equal(corrected_4$country, "tanzania")
print("Checking: China")
original_5 <- country_table %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
corrected_5 <- country_table_cleaned %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
print(paste0("Original text: ", original_5$country))
expect_equal(corrected_5$country, "china")
print("Checking: Korea")
original_6 <- country_table %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_true(str_detect(countries, "democratic people’s republic of korea"))
print("Checking: United States")
original_7 <- country_table %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
corrected_7 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
original_8 <- country_table %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
corrected_8 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
original_9 <- country_table %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
corrected_9 <- country_table_cleaned %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
print(paste0("Original text: ", original_7$country, " / ", original_8$country))
expect_equal(corrected_7$country, corrected_8$country, "united states")
print(paste0("Original text: ", original_9$country))
countries <- paste0(corrected_9$country, collapse = "|")
expect_true(str_detect(countries, "united states"))
print("Checking: (the) removed")
original_6 <- country_table %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
print(paste0("Original text: ", original_6$country))
countries <- paste0(corrected_6$country, collapse = "|")
expect_false(str_detect(countries, "\\(the\\)"))
# print("check project that should identify as UK")
# id == "103710"
})
# Replace country with "unknown" if not recognised against Tableau's accepted list
country_table_final <- country_table_cleaned %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "unknown")) %>%
mutate(Country = tools::toTitleCase(Country)) %>%
unique()
# Remove unecessary unknowns
country_table_final$row_id <- seq.int(nrow(country_table_final))
# identify records with more than one country for a country_type
identify_multiples <- country_table_final %>%
group_by(project_id, country_type) %>%
summarise(n = n()) %>%
filter(n > 1)
# identify "unknown" records for projects in the dataset above
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown") %>%
left_join(identify_multiples, by = c("project_id", "country_type")) %>%
filter(!is.na(n))
# remove these "unknowns" from the country table
country_table_final <- country_table_final %>%
filter(!(row_id %in% identify_unknowns_to_delete$row_id)) %>%
select(-row_id)
# Save datasets for testing
saveRDS(country_table, file = "Outputs/country_table.rds")
saveRDS(country_table_cleaned, file = "Outputs/country_table_cleaned.rds")
saveRDS(country_table_final, file = "Outputs/country_table_final.rds")
# Read in files for testing
project_table <- readRDS("Outputs/project_table.rds")
funder_table <- readRDS("Outputs/funder_table.rds")
org_names_and_locations <- readRDS("Outputs/org_names_and_locations.rds")
country_table <- readRDS(file = "Outputs/country_table.rds")
country_table_cleaned <- readRDS(file = "Outputs/country_table_cleaned.rds")
test_that("check common country formatting issues", {
print("Checking: DRC")
original_1 <- country_table %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
corrected_1 <- country_table_cleaned %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
original_2 <- country_table %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
corrected_2 <- country_table_cleaned %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
original_3 <- country_table %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
corrected_3 <- country_table_cleaned %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
print(paste0("Original text: ", original_1$Country, " / ", original_2$Country, " / ", original_3$Country))
expect_equal(corrected_1$Country, corrected_2$Country, corrected_3$Country,
"democratic republic of the congo")
print("Checking: Tanzania")
original_4 <- country_table %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
corrected_4 <- country_table_cleaned %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
print(paste0("Original text: ", original_4$Country))
expect_equal(corrected_4$Country, "tanzania")
print("Checking: China")
original_5 <- country_table %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
corrected_5 <- country_table_cleaned %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
print(paste0("Original text: ", original_5$Country))
expect_equal(corrected_5$Country, "china")
print("Checking: Korea")
original_6 <- country_table %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
print(paste0("Original text: ", original_6$Country))
countries <- paste0(corrected_6$Country, collapse = "|")
expect_true(str_detect(countries, "democratic people’s republic of korea"))
print("Checking: United States")
original_7 <- country_table %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
corrected_7 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
original_8 <- country_table %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
corrected_8 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
original_9 <- country_table %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
corrected_9 <- country_table_cleaned %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
print(paste0("Original text: ", original_7$Country, " / ", original_8$Country))
expect_equal(corrected_7$Country, corrected_8$Country, "united states")
print(paste0("Original text: ", original_9$Country))
countries <- paste0(corrected_9$Country, collapse = "|")
expect_true(str_detect(countries, "united states"))
print("Checking: (the) removed")
original_6 <- country_table %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
print(paste0("Original text: ", original_6$Country))
countries <- paste0(corrected_6$Country, collapse = "|")
expect_false(str_detect(countries, "\\(the\\)"))
# print("check project that should identify as UK")
# id == "103710"
})
unmatched_countries <- country_table_cleaned %>%
filter(!country %in% dac_lookup$country_name) %>%
select(country) %>%
unique()
print(paste0("No. of unrecognised countries: ", nrow(unmatched_countries)))
unmatched_countries <- country_table_cleaned %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
print(paste0("No. of unrecognised countries: ", nrow(unmatched_countries)))
View(unmatched_countries)
test_that("only projects with no country information whatsoever are labelled unknown", {
print("example 1: genuine unknown - Defra")
test1 <- filter(country_table_final, str_detect(project_id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$Country), "Unknown")
expect_equal(nrow(test1), 2)
print("example 2: known beneficiary, no known location")
test2 <- filter(country_table_final, project_id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$Country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
print("example 3: known location, no known beneficiary")
test3 <- filter(country_table_final, project_id == "BB/R019819/1") %>% arrange(country_type)
expect_equal(test3$Country, c("Unknown", "United Kingdom"))
expect_equal(nrow(test3), 2)
print("example 4: known beneficiary and known location")
test4 <- filter(country_table_final, project_id == "ES/P010245/1")
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
# print("example 5: check Chevening")
# test5 <- filter(country_table_final, str_detect(title, "Chevening"))
# expect_equal(length(unique(test5$country_type)), 2)
# expect_equal(nrow(test5), 2)
})
test_that("only projects with no country information whatsoever are labelled unknown", {
print("example 1: genuine unknown - Defra")
test1 <- filter(country_table_final, str_detect(project_id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$Country), "Unknown")
expect_equal(nrow(test1), 2)
print("example 2: known beneficiary, no known location")
test2 <- filter(country_table_final, project_id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$Country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
print("example 3: known location, no known beneficiary")
test3 <- filter(country_table_final, project_id == "BB/R019819/1") %>% arrange(country_type)
expect_equal(test3$Country, c("Unknown", "United Kingdom"))
expect_equal(nrow(test3), 2)
print("example 4: known beneficiary and known location")
test4 <- filter(country_table_final, project_id == "ES/P010245/1")
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
print("example 5: check Chevening")
test5 <- filter(country_table_final, str_detect(title, "Chevening"))
expect_equal(length(unique(test5$country_type)), 2)
expect_equal(nrow(test5), 2)
})
expect_equal(nrow(test5), 2)
print("example 5: check Chevening")
test5 <- filter(country_table_final, str_detect(title, "Chev"))
test5 <- filter(country_table_final, str_detect(project_id, "Chev"))
expect_equal(length(unique(test5$country_type)), 2)
expect_equal(nrow(test5), 2)
expect_equal(length(unique(test5$country_type)), 2)
unique(test5$country_type)
unique(test5$Country)
View(test5)
test13 <- country_table %>%
filter(str_detect(project_id, "RWA-20054"))
test14 <- country_table_cleaned %>%
filter(str_detect(project_id, "RWA-20054"))
View(test13)
View(test14)
# ; separator
test1 <- country_table %>%
filter(str_detect(project_id, "RWA-20054"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "RWA-20054"))
expect_false(str_detect(test2$Country, ";"))
test13 <- country_table %>%
filter(str_detect(project_id, "MR/S004769/1"))
test14 <- country_table_cleaned %>%
filter(str_detect(project_id, "MR/S004769/1"))
View(test13)
View(test14)
# ; separator
test1 <- country_table %>%
filter(str_detect(project_id, "RWA-20054"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "RWA-20054"))
View(test1)
View(test2)
View(test2)
View(test1)
# , separator
test1 <- country_table %>%
filter(str_detect(project_id, "MR/S004769/1"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "MR/S004769/1"))
View(test2)
View(test1)
# , at start
test1 <- country_table %>%
filter(str_detect(project_id, "102204"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "102204"))
View(test2)
View(test1)
# ; separator
test1 <- country_table %>%
filter(str_detect(project_id, "RWA-20054"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "RWA-20054"))
View(test2)
View(test1)
test1 <- country_table %>%
filter(str_detect(project_id, "103710"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "103710"))
View(test2)
View(test1)
original_6 <- country_table %>%
filter(str_detect(project_id, "103710"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "103710"), country_type == 1)
View(original_6)
View(corrected_6)
original_6 <- project_table %>%
filter(str_detect(project_id, "103710"), country_type == 1)
original_6 <- project_table %>%
filter(str_detect(project_id, "103710"))
original_6 <- oranisation_table %>%
filter(str_detect(project_id, "103710"))
organisation_table <- org_names_and_locations
original_6 <- oranisation_table %>%
filter(str_detect(project_id, "103710"))
original_6 <- organisation_table %>%
filter(str_detect(project_id, "103710"))
expect_equal(test5$Country, "United Kingdom")
test5 <- filter(country_table_final, str_detect(project_id, "Chev"), country_type == 2)
expect_equal(unique(test5$Country), "United Kingdom")
# Read in org names and countries from previous script
org_names_and_locations_1 <- readRDS(file = "Outputs/org_names_and_locations_1.rds")
# Read in list of IATI activities (from UK gov funders and select delivery partners)
iati_activity_list <- readRDS(file = "Outputs/gov_list_final.rds") %>%
rename(recipient_country = all_countries)
partner_iati_list <- readRDS(file = "Outputs/partner_activity_list.rds")
# Filter gov department records for project-level activities
iati_projects <- iati_activity_list %>%
filter(str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
str_detect(iati_identifier, "1-205053") |   # South Asia Country Research Fund (FCDO)
str_detect(iati_identifier, "1-300708") |   # Evidence Fund (FCDO)
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
filter(flow_type == "ODA") %>%
mutate(fund = if_else(is.na(fund), "Unknown", fund)) %>%
plyr::rbind.fill(partner_iati_list) # Add partner activities
# Identify UKRI projects (by "RI" IATI tag)
ukri_iati_projects <- iati_activity_list %>%
filter(extending_org == "UK Research & Innovation") %>%
mutate(gtr_id = str_replace(iati_identifier, "GB-GOV-13-FUND--GCRF-", "")) %>%
mutate(gtr_id = str_replace(gtr_id, "GB-GOV-13-FUND--Newton-", "")) %>%
mutate(gtr_id = str_replace_all(gtr_id, "_", "/")) %>%
select(gtr_id, iati_identifier, recipient_country) %>%
unique()
# Keep required fields
iati_projects_final <- iati_projects %>%
mutate(Funder = coalesce(gov_funder, reporting_org),
partner_org_name = partner,
partner_org_country = partner_country,
lead_org_name = coalesce(extending_org, reporting_org),
lead_org_country = reporting_org_country,
extending_org = coalesce(extending_org, reporting_org),
status = if_else(!is.na(end_date),
if_else(Sys.Date() <= end_date, "Active", "Closed"), "Unknown"),
last_updated = quarter_end_date) %>%
select(id = iati_identifier,
title = activity_title,
abstract = activity_description,
start_date,
end_date,
amount,
period_start,
period_end,
currency,
extending_org,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country,
iati_id = programme_id,
Fund = fund,
Funder,
recipient_country,
subject = sector_name,
status,
last_updated
)
# Add IATI link to awards
iati_projects_final <- iati_projects_final %>%
mutate(link = paste0("https://d-portal.org/ctrack.html#view=act&aid=", id))
# Clean up
rm(iati_activity_list)
rm(partner_iati_list)
rm(iati_projects)
# Label GCRF and Newton projects from IATI UKRI data
ukri_projects_by_fund <- ukri_iati_projects %>%
mutate(Fund = case_when(
str_detect(iati_identifier, "GCRF") ~ "Global Challenges Research Fund (GCRF)",
str_detect(iati_identifier, "Newton") ~ "Newton Fund",
TRUE ~ "Other"
),
Funder = "Department for Business, Energy and Industrial Strategy")
# Join GCRF/Newton project IDs to other ODA IDs (from spreadsheet)
ukri_projects_ids_full <- ukri_projects_by_fund %>%
rbind(ukri_ooda_projects_ids)
ukri_projects_by_id <- readRDS("Outputs/ukri_projects_by_id.rds")
# Join to fund and funder info from original list
ukri_projects_by_id_with_id <- ukri_projects_by_id %>%
left_join(select(ukri_projects_ids_full,
iati_id = iati_identifier, Fund, Funder, gtr_id), by = "gtr_id")
# See which awards from input list have not been found
missing_awards <- select(ukri_projects_ids_full, gtr_id) %>%
left_join(select(ukri_projects_by_id_with_id, gtr_id, title), by = "gtr_id") %>%
filter(is.na(title)) %>%
unique()
# Convert all factor fields to character
ukri_projects_final <- data.frame(lapply(ukri_projects_by_id_with_id, as.character), stringsAsFactors=FALSE)
# Output final dataset
ukri_projects_final <- ukri_projects_final %>%
rename(start_date = fund.start,
end_date = fund.end,
id = gtr_id,
) %>%
mutate(subject = NA_character_,
amount = as.numeric(amount),
period_start = NA_character_,
period_end = NA_character_,
currency = "GBP",
Fund = if_else(Fund == "GCRF", "Global Challenges Research Fund (GCRF)",
if_else(Fund == "Newton", "Newton Fund", Fund)),
extending_org = case_when(
extending_org == "AHRC" ~ "Arts and Humanities Research Council (AHRC)",
extending_org == "BBSRC" ~ "Biotechnology and Biological Sciences Research Council",
extending_org == "EPSRC" ~ "Engineering and Physical Sciences Research Council",
extending_org == "ESRC" ~ "Economic and Social Research Council",
extending_org == "MRC" ~ "Medical Research Council",
extending_org == "NERC" ~ "Natural Environment Research Council",
extending_org == "STFC" ~ "Science and Technology Facilities Council",
TRUE ~ extending_org
),
last_updated = as.Date(last_updated)) %>%
select(id,
title,
abstract,
start_date,
end_date,
amount,
period_start,
period_end,
currency,
extending_org,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country,
iati_id,
Fund,
Funder,
subject,
status,
last_updated) %>%
unique()
# Add GtR link to projects
ukri_projects_final <- ukri_projects_final %>%
mutate(link = paste0("https://gtr.ukri.org/projects?ref=", id))
ukri_projects_final <- ukri_projects_final %>%
group_by(across(c(-partner_org_name))) %>%
slice(1) %>%
ungroup()
# Add on beneficiary countries from IATI
ukri_projects_with_countries <- ukri_projects_final %>%
left_join(ukri_iati_projects, by = c("id" = "gtr_id")) %>%
select(-iati_identifier)
table <- unique(ukri_projects_with_countries$extending_org)
View(table)
# Save as R file (to read back in if needed)
saveRDS(ukri_projects_with_countries, file = "Outputs/ukri_projects_with_countries.rds")
