# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
currency = coalesce(Currency, "GDP"),
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed"),
link = ""
) %>%
select(-`No.`, -`FCDO programme - name`, -Notes, -file_number)
View(partner_spreadsheet_data)
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed"),
link = ""
) %>%
select(-`No.`, -`FCDO programme - name`, -Notes, -file_number)
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed"),
link = ""
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency)
View(collated_spreadsheet_data)
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data Source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed")
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`)
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed")
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`)
all_projects <- rbind(ukri_projects_final, nihr_projects_final,
iati_projects_final, wellcome_grants_final,
collated_spreadsheet_data)
# Change terminology around award status
all_projects <- all_projects %>%
mutate(status = if_else(status %in% c("Contracted", "Implementation"), "Active", status))
# Add ID field to dataset
all_projects$ID <- seq.int(nrow(all_projects))
# Save as R file (to read back in if needed)
saveRDS(all_projects, file = "Outputs/all_projects.rds")
if (!("googlesheets4" %in% installed.packages())) {
install.packages("googlesheets4")
}
if (!("gargle" %in% installed.packages())) {
install.packages("gargle")
}
if (!("geonames" %in% installed.packages())) {
install.packages("geonames")
}
if (!("RgoogleMaps" %in% installed.packages())) {
install.packages("RgoogleMaps")
}
if (!("rworldmap" %in% installed.packages())) {
install.packages("rworldmap")
}
if (!("ggmap" %in% installed.packages())) {
install.packages("ggmap")
}
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("rvest" %in% installed.packages())) {
install.packages("rvest")
}
if (!("stringi" %in% installed.packages())) {
install.packages("stringi")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("readxl" %in% installed.packages())) {
install.packages("readxl")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
# Load packages -----
library(geonames)
library(RgoogleMaps)
library(rworldmap)
library(ggmap)
library(jsonlite)
library(rvest)
library(stringi)
library(googlesheets4)
library(gargle)
library(httr)
library(tidyverse)
library(writexl)
library(readxl)
# Save as R file (from previous script)
all_projects <- readRDS("Outputs/all_projects.rds")
# 1) Extract countries -----------------------------------
# Extract countries mentioned in abstract or title
countries <- countrycode::codelist$country.name.en
countries_string <- paste0(countries, collapse = "|")
countries_in_description <- all_projects %>%
mutate(text = paste0(title, " ", abstract)) %>%
select(title, text) %>%
mutate(countries_abstract = str_extract_all(text, countries_string)) %>%
unnest(cols = countries_abstract) %>%
unique()
# Correct Niger / Nigeria problem
countries_in_description <- countries_in_description %>%
mutate(countries_abstract = if_else(str_detect(text, "Nigeria") & !str_detect(text, "Niger ") & countries_abstract == "Niger",
"Nigeria", countries_abstract))
# Aggregate list of countries up
countries_in_description <- countries_in_description %>%
group_by(title) %>%
summarise(countries_abstract = paste(countries_abstract[!is.na(countries_abstract)], collapse = ", "))
# Add the country mentioned field onto main dataset
all_projects_final <- all_projects %>%
left_join(countries_in_description, by = "title") %>%
mutate(partner_countries = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
countries_abstract = paste0(coalesce(recipient_country, ""), ", ", coalesce(countries_abstract, "")))
# Distinguish between abstract and partner countries
countries_data <- all_projects_final %>%
select(ID, countries_abstract, partner_countries) %>%
gather(key = "country_type", value = "Country", -ID) %>%
right_join(select(all_projects_final, -countries_abstract, -partner_countries), by = "ID") %>%
mutate(Country = str_replace_all(Country, "NA", "Unknown"),
Country = str_replace_all(Country, ",,", ","))
# Separate out lead, partner countries
all_projects_split_country <- countries_data %>%
select(ID, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of,|Tanzania, United Republic of,", "Tanzania,")) %>%
separate_rows(Country, sep = ",", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|UNITED STATES|United states"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = str_replace(Country, "DRC", "Democratic Republic of the Congo"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country),
Country = str_replace_all(Country, "é", "e")) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(ID)
# Read in DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx")
# Check countries that are unmatched (this information will be lost)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's
# accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
rename(all_countries = Country) %>%
# select(-country_type) %>%
left_join(all_projects_split_country, by = c("ID", "country_type")) %>%
mutate(date_refreshed = Sys.Date())
# 2) Tidy country info (i.e. remove unnecessary duplicate records) ---------------
# Extract project records with unknown or missing country field
missing_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(ID, id, country_type) %>%
unique() %>%
mutate(exclude_flag = 1)
# Identify projects that have both a populated and missing country field
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(ID, id, country_type) %>%
unique() %>%
filter(id %in% missing_country_projects$id)
# Exclude project records with unknown/missing abstract or beneficiary country AND
# a populated other country record
all_projects_tidied <- all_projects_final %>%
left_join(missing_country_projects, by = c("ID", "id", "country_type")) %>%
filter(!(exclude_flag == 1 & country_type == "countries_abstract" & (Country %in% c("Unknown") | is.na(Country))))
# Label unknown/missing countries as "Unknown" to remove NULLs from Tableau map
all_projects_tidied <- all_projects_tidied %>%
mutate(Country = if_else(is.na(Country), "Unknown", Country))
# 3) Check data -----------------------------------
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research"), "FCDO fully funded", Fund),
Funder = if_else(Funder == "Foreign, Commonwealth & Development Office", "Foreign, Commonwealth and Development Office", Funder))
# check list of ODA R&I funds
unique(all_projects_tidied$Fund)
test <- filter(all_projects_tidied, is.na(Fund))
nrow(test)
# check list of ODA R&I funders
unique(all_projects_tidied$Funder)
# Look at data from a particular delivery partner
test <- filter(all_projects_tidied, extending_org == "Bill & Melinda Gates Foundation")
# Look for a particular award (from keyword in title)
test <- filter(all_projects_tidied, str_detect(title, "under-five"))
# Check countries
unique(all_projects_tidied$Country)
test <- filter(all_projects_tidied,
is.na(Country) | str_detect(Country, ","))
test2 <- filter(all_projects_tidied,
Country == "Unknown")
test3 <- filter(all_projects_tidied,
Country == "Niger")
# Unknown country should be for the activity location only
unique(test2$country_type)
# 4) Write data --------------------------------
# Write to RDS
saveRDS(all_projects_tidied, "Outputs/all_projects_tidied.rds")
# all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
# Write data to EC google drive
# Authorise googlesheets4 to view and manage sheets on EC Drive
# (using saved authentication token in folder)
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
# TEMPORARY ***
# Remove IDRC DHSC IATI data
all_projects_tidied <- all_projects_tidied %>%
filter(!(funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# TEMPORARY ***
# Remove IDRC DHSC IATI data
all_projects_tidied <- all_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# Write to RDS
saveRDS(all_projects_tidied, "Outputs/all_projects_tidied.rds")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("httr" %in% installed.packages())) {
install.packages("httr")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(readxl)
library(writexl)
###
# A) Create list of RED programmes and components -----
# Read in list of RED programmes
red_programmes <- read_excel("Inputs/RED programme IDs.xlsx") %>%
mutate(red_iati_id = if_else(ProjectID < 300000,
paste0("GB-1-", ProjectID), paste0("GB-GOV-1-", ProjectID)))
# Extract components to RED programmes
component_list <- data.frame()
component_extract <- function(activity_id) {
path <- paste0("https://iatidatastore.iatistandard.org/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
programme_list <- data.frame(component_id = red_programmes$red_iati_id)
all_red_activities <- rbind(programme_list, component_list)
# Remove intermediary datasets
rm(red_programmes)
rm(programme_list)
rm(component_list)
rm(components)
rm(id)
component_extract <- function(activity_id) {
path <- paste0("https://test-datastore.iatistandard.org/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
# Read in list of RED programmes
red_programmes <- read_excel("Inputs/RED programme IDs.xlsx") %>%
mutate(red_iati_id = if_else(ProjectID < 300000,
paste0("GB-1-", ProjectID), paste0("GB-GOV-1-", ProjectID)))
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("httr" %in% installed.packages())) {
install.packages("httr")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(readxl)
library(writexl)
# Read in list of RED programmes
red_programmes <- read_excel("Inputs/RED programme IDs.xlsx") %>%
mutate(red_iati_id = if_else(ProjectID < 300000,
paste0("GB-1-", ProjectID), paste0("GB-GOV-1-", ProjectID)))
# Extract components to RED programmes
component_list <- data.frame()
component_extract <- function(activity_id) {
path <- paste0("https://test-datastore.iatistandard.org/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
component_extract <- function(activity_id) {
path <- paste0("https://iati.cloud/search/activity/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
component_extract <- function(activity_id) {
path <- paste0("https://iati.cloud/search/activity/?q=iati_identifier:(", activity_id, ")&wt=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&rows=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
