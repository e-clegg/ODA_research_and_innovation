unnest(col = title.narrative) %>%
select(funder_iati_id = iati_identifier, funder_programme = text)
} else {
new_data <- data.frame()
}
return(new_data)
}
### UKRI ###
# 1 - Function to extract project IDs by fund name (GCRF/Newton)
extract_ukri_projects_by_fund <- function(page, fund) {
path <- paste0("https://gtr.ukri.org:443/gtr/api/projects?q=",
fund, "&f=pro.rcukp&p=", page, "&s=100")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
projects <- response$project
return(projects)
}
# 2 - Function to extract staff organisation
# person_id <- "6E394347-A44B-4868-8EC3-06CA4D034BDA"
extract_staff_org <- function(staff_data, person_id) {
path <- paste0("http://gtr.ukri.org/person/", person_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
person_current_org_name <- ((response$personOverview)$organisation)$name
person_current_org_id <- ((response$personOverview)$organisation)$id
staff_org_data <- rbind(staff_data, data.frame(person_id,
person_current_org_name,
person_current_org_id))
return(staff_org_data)
}
# 3 - Function to extract country from organisation ID
# (checking GRID database as well as UKRI)
# org_id <- "3ED60B49-9C2B-4D71-B644-96CCC7F10194"
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# Look up country from GRID database
grid_org_search <- data.frame(name = ((response$organisationOverview)$organisation)$name) %>%
left_join(grid_institutes, by = "name") %>%
left_join(grid_addresses, by = "grid_id")
# Use GRID country over UKRI GtR one
org_country <- coalesce(grid_org_search$country, org_country_ukri)
return(org_country)
}
# 4 - Master function to extract UKRI project data by ID
extract_ukri_projects_by_id <- function(id) {
path <- paste0("http://gtr.ukri.org/projects?ref=", id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# extract project data and last refresh date
data <- response$projectOverview
last_updated <- (response$lastRefreshDate)$lastRefreshDate %>%
str_replace_all("Data last updated:  ", "") %>%
as.Date(format = "%d %b %Y")
if(length(data) > 0) {
# Unlist first level
data <- data$projectComposition
# Extract project, lead org and co-investigator staff ids
projects <- data$project
lead_org <- data$leadResearchOrganisation
person_roles <- data$personRole
# Extract staff information (if applicable)
if(length(person_roles) > 0) {                        # checks length of list
person_roles <- person_roles %>%
unnest(col = role) %>%
filter(name == "CO_INVESTIGATOR") %>%
select(id)
if(nrow(person_roles) > 0) {                # checks no. of rows in dataframe
# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_data$person_current_org_name) > 0) {
staff_org_names <- staff_org_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = "",
partner_org_country = "")
}
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds,
extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country,
status, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(project_data)
}
# Script to output Excel sheet of active projects in a country #
### 1) Set up ---
# Define countries for reports
country_list <- c(
"Democratic Republic of the Congo",
"Ethiopia", "Kenya", "Sudan",
"South Sudan",
"Somalia", "Tanzania", "Uganda")
# Read in datasets
all_projects <- readRDS("Outputs/all_projects.rds")
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
### 2) Output reports for each country ----
wb <- openxlsx::createWorkbook()
# Set header style (bold)
header_st <- createStyle(textDecoration = "Bold",
fontSize = 8, fontName = "Arial",
halign = "center")
# Set table style
table_st <- createStyle(fontSize = 8, fontName = "Arial",
wrapText = TRUE,
valign = "top")
for(i in 1:length(country_list)) {
print(paste0(i, " - ", country_list[i]))
# Extract project data for selected country
country_project_ids <- all_projects_tidied %>%
filter(Country == country_list[i] |
# NIHR - at the moment need to look for country in title/abstract
(extending_org == "NIHR" & str_detect(paste0(title, " ", abstract), country_list[i]))) %>%
select(id) %>%
unique()
country_project_data <- all_projects %>%
filter(id %in% country_project_ids$id)
# Prepare output report fields
output_report <- country_project_data %>%
mutate(Start = as.integer(format(as.Date(start_date), format = "%Y")),
End = as.integer(format(as.Date(end_date), format = "%Y")),
Funder = case_when(
Funder == "Foreign, Commonwealth and Development Office" ~ "FCDO",
Funder == "Department of Health and Social Care" ~ "DHSC",
Funder == "Department for Business, Energy and Industrial Strategy" ~ "BEIS",
),
lead_org_name = coalesce(lead_org_name, extending_org),
Fund = if_else(str_detect(Fund, "FCDO Research & Innovation|FCDO fully"), "FCDO Research - Programmes", Fund),
Fund = if_else(str_detect(Fund, "FCDO partially"), "FCDO Research - Partnerships", Fund),
link = coalesce(link, "")) %>%
group_by(title, Funder) %>%
slice(1) %>%
ungroup() %>%
unique()
# Join on funder programme names
output_report <- output_report %>%
left_join(select(all_projects_tidied, title, funder_programme) %>% unique(), by = "title") %>%
mutate(`Fund / Programme` = coalesce(funder_programme, Fund))
# Summarise funders on co-funded projects
co_funded_projects <- output_report %>%
select(title, Funder) %>%
unique() %>%
group_by(title) %>%
summarise(n = n(),
comb_funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1) %>%
select(-n)
# Add summarised funders to main report
output_report <- output_report %>%
left_join(co_funded_projects, by = "title") %>%
mutate(Funder = coalesce(comb_funder, Funder)) %>%
group_by(title) %>%
# Keep one row per project title
slice(1) %>%
ungroup() %>%
select(Funder,
`Fund / Programme`,
`Project Title` = title,
Start, End,
Description = abstract,
`Lead Organisation` = lead_org_name,
`Partner Organisations` = partner_org_name,
`Web Link` = link)
# Add country dataset to output list
openxlsx::addWorksheet(wb, sheetName = substr(country_list[i], 1, 30))
openxlsx::writeData(wb, sheet = i, x = output_report,
headerStyle = header_st,
borderStyle = "thin")
# Add font style
addStyle(wb, sheet = i, table_st, rows = 2:400, cols = 1:9, gridExpand = TRUE, stack = TRUE)
# Identify titles and hyperlinks
hyperlinks <- output_report$`Web Link`
names(hyperlinks) <- output_report$`Web Link`
class(hyperlinks) <- "hyperlink"
# Write hyperlinks
writeData(wb, sheet = i, x = hyperlinks, startRow = 2, startCol = 9, colNames = FALSE)
# Set column widths
setColWidths(wb, sheet = i, cols = 1:9, widths = c(10,30,40,6,6,80,30,30,50))
}
# Resave Excel file
saveWorkbook(wb, "Outputs//East Africa ODA programmes - Oct21.xlsx", overwrite = TRUE)
library(DBI)
library(tidyverse)
# Read in final dataset from scripts 4 and 5
all_projects_transactions <- readRDS(file = "Outputs/all_projects_transactions.rds")
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
con_dev <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hed-sql-200",
Database = "ODARIProjects",
Trusted_Connection = "False")
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
dbListTables(con_live)
# Example - reading in SQL script
sql_query <- getSQL("RED programme outputs.sql")
all_projects <- readRDS("Outputs/all_projects.rds")
# 1) Create master project table ----
project_table <- all_projects %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country) %>%
unique()
# check uniqueness
test <- unique(project_table$id)
# find duplicate project ids
duplicates <- project_table %>%
group_by(id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "id")
View(duplicates)
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$id), ]
View(project_table)
library(DBI)
library(tidyverse)
library(DBI)
library(tidyverse)
# Read in final dataset from scripts 4 and 5
all_projects <- readRDS("Outputs/all_projects.rds")
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
con_dev <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hed-sql-200",
Database = "ODARIProjects",
Trusted_Connection = "False")
con_dev <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hed-sql-200",
Database = "ODARIProjects",
Trusted_Connection = "False")
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
# Example - direct query
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Country]")
first_10 <- dbFetch(recordSet, n = -1)
View(first_10)
# 1) Create master project table ----
project_table <- all_projects_transactions %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country) %>%
unique()
dbListTables(con_live)
# Example - direct query
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Project]")
first_10 <- dbFetch(recordSet, n = -1)
# Example - direct query
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Projects]")
# Disconnect from database
dbDisconnect(con_live)
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
# Example - direct query
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Project]")
first_10 <- dbFetch(recordSet, n = -1)
View(recordSet)
dbListTables(con_live)
# Example - direct query
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Project]")
first_10 <- dbFetch(recordSet, n = -1)
# Disconnect from database
dbDisconnect(con_live)
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Country]")
first_10 <- dbFetch(recordSet, n = -1)
dbListTables(con_live)
# 1) Create master project table ----
project_table <- all_projects %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country) %>%
unique()
# check uniqueness
test <- unique(project_table$id)
# find duplicate project ids
duplicates <- project_table %>%
group_by(id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$id), ]
funder_table <- all_projects %>%
# remove all fields that can have multiple entries for a project
select(id, Funder, Fund, iati_id) %>%
unique()
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
country_table <- all_projects_tidied %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2)) %>%
select(project_id = id,
country_type,
country = Country) %>%
unique()
# Overwrite data in country table
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Country]")
# 1) Create master project table ----
project_table <- all_projects %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
rename(project_id = id) %>%
unique()
# Overwrite data in country table
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Project]")
dbAppendTable(con_live, "Project", project_table, row.names = NULL)
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Funder]")
dbAppendTable(con_live, "Funder", funder_table, row.names = NULL)
funder_table <- all_projects %>%
# remove all fields that can have multiple entries for a project
select(project_id = id, funder = Funder,
fund = Fund, funder_iati_id = iati_id) %>%
unique()
dbAppendTable(con_live, "Funder", funder_table, row.names = NULL)
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Country]")
dbAppendTable(con_live, "Country", country_table, row.names = NULL)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Organisation]")
dbAppendTable(con_live, "Organisation", organisation_table, row.names = NULL)
View(country_table)
View(organisation_table)
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name)
View(organisation_table)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id)
View(organisation_table)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id, -lead_org_country, -partner_org_country)
View(organisation_table)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id, -lead_org_country, -partner_org_country) %>%
mutate(organisation_country = coalesce(lead_org_country, partner_org_country))
View(organisation_table)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id, -lead_org_country, -partner_org_country) %>%
mutate(organisation_country = coalesce(lead_org_country, partner_org_country)) %>%
select(-lead_org_country, -partner_org_country)
View(organisation_table)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id, -lead_org_country, -partner_org_country) %>%
mutate(organisation_country = coalesce(lead_org_country, partner_org_country),
organisation_role = str_replace_all(organisation_role, "_name", "")) %>%
select(-lead_org_country, -partner_org_country)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id, -lead_org_country, -partner_org_country) %>%
mutate(organisation_country = coalesce(lead_org_country, partner_org_country),
organisation_role = str_replace_all(organisation_role, "_name", "")) %>%
select(-lead_org_country, -partner_org_country) %>%
unique()
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id, -lead_org_country, -partner_org_country) %>%
mutate(organisation_country = coalesce(lead_org_country, partner_org_country),
organisation_role = str_replace_all(organisation_role, "_name", "")) %>%
select(-lead_org_country, -partner_org_country) %>%
filter(organisation_name != "") %>%
unique()
dbAppendTable(con_live, "Organisation", organisation_table, row.names = NULL)
organisation_table <- all_projects %>%
select(project_id = id,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country) %>%
unique()
organisation_table <- organisation_table %>%
gather(organisation_role, organisation_name, -project_id, -lead_org_country, -partner_org_country) %>%
mutate(organisation_country = coalesce(lead_org_country, partner_org_country),
organisation_role = if_else(str_detect(organisation_role, "lead"), 1,2)) %>%
select(-lead_org_country, -partner_org_country) %>%
filter(organisation_name != "") %>%
unique()
dbAppendTable(con_live, "Organisation", organisation_table, row.names = NULL)
