mutate(fund = coalesce(fund, "FCDO Research & Innovation"),
gov_funder = coalesce(gov_funder, "Foreign, Commonwealth and Development Office"))
# Extract countries mentioned in abstract or title
countries <- countrycode::codelist$country.name.en
countries_string <- paste0(countries, collapse = "|")
countries_in_description <- activity_list %>%
mutate(text = paste0(activity_title, " ", General)) %>%
select(iati_identifier, text) %>%
mutate(countries = str_extract_all(text, countries_string)) %>%
unnest(cols = countries) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(countries = paste(coalesce(countries, ""), collapse = ", "))
activity_list <- activity_list %>%
left_join(countries_in_description, by = "iati_identifier") %>%
mutate(all_countries = country_name) %>%
rename(activity_description = General)
# Remove WHO non-research/innovation activities
activity_list <- activity_list %>%
filter(is.na(reporting_org_ref) |
!(reporting_org_ref == "XM-DAC-928") |
str_detect(activity_title, "research|innovation"))
# Add missing FCDO activity IDs
activity_list <- activity_list %>%
mutate(programme_id = case_when(reporting_org_ref == "XM-DAC-301-2" & str_detect(activity_title, "CLARE") ~ "GB-GOV-1-300126",
reporting_org_ref == "XM-DAC-301-2" & str_detect(activity_title, "CARIAA") ~ "GB-1-203506",
str_detect(iati_identifier, "XI-IATI-AGR") ~ "GB-1-203052",
reporting_org_ref == "XM-DAC-47015" & str_detect(iati_identifier, "Windows1and2") ~ "GB-1-204764",
TRUE ~ programme_id))
# Save to Rdata file
saveRDS(activity_list, file = "Outputs/partner_activity_list.rds")
# Check funds, funders
table(activity_list$fund)
table(activity_list$gov_funder)
table(activity_list$currency)
# Check specific partner
Test <- filter(activity_list, reporting_org_ref == "XM-DAC-301-2")
Test <- filter(partner_activity_comb, str_detect(iati_identifier, "XI-IATI-AGR"))
if (!("googlesheets4" %in% installed.packages())) {
install.packages("googlesheets4")
}
if (!("gargle" %in% installed.packages())) {
install.packages("gargle")
}
if (!("geonames" %in% installed.packages())) {
install.packages("geonames")
}
if (!("RgoogleMaps" %in% installed.packages())) {
install.packages("RgoogleMaps")
}
if (!("rworldmap" %in% installed.packages())) {
install.packages("rworldmap")
}
if (!("ggmap" %in% installed.packages())) {
install.packages("ggmap")
}
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("rvest" %in% installed.packages())) {
install.packages("rvest")
}
if (!("stringi" %in% installed.packages())) {
install.packages("stringi")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("readxl" %in% installed.packages())) {
install.packages("readxl")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
# Load packages -----
library(geonames)
library(RgoogleMaps)
library(rworldmap)
library(ggmap)
library(jsonlite)
library(rvest)
library(stringi)
library(googlesheets4)
library(gargle)
library(httr)
library(tidyverse)
library(writexl)
library(readxl)
ukri_projects_final <- readRDS("Outputs/ukri_projects_final.rds")
# 2) Extract NIHR projects ------------------------------------------------
# Define URL to extract ODA projects
path <- paste0("https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=100&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&refine.funder=NIHR+(ODA)")
# Extract data from the NIHR API
request <- GET(url = path)
request$status_code # 200 = success
# Convert to text and read from JSON
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Extract dataframe
nihr_projects <- response$records
# Remove unneeded columns
nihr_projects <- nihr_projects %>%
select(-1, -2, -3)
# Remove "field." from column names
names(nihr_projects) <- gsub(pattern = "fields.", replacement = "", x = names(nihr_projects))
# Select order of columns
nihr_projects_final <- nihr_projects %>%
mutate(id = project_id,
Funder = "Department of Health and Social Care",
Fund = "Global Health Research - Programmes",
recipient_country = "",
lead_org_country = ctry17nm,
iati_id = "",
subject = programme,
currency = "GBP",
partner_org_name = "",
partner_org_country = "",
extending_org = "NIHR") %>%
select(id,
title = project_title,
abstract = scientific_abstract,
start_date, end_date,
amount = award_amount_from_dh,
currency,
extending_org,
lead_org_name = contracted_organisation,
lead_org_country,
partner_org_name, partner_org_country,
iati_id,
Fund,
Funder,
recipient_country,
subject,
status = project_status)
# Add NIHR link to awards
nihr_projects_final <- nihr_projects_final %>%
mutate(link = paste0("https://fundingawards.nihr.ac.uk/award/", id))
# 3) Extract IATI projects ------------------------------------------------
# Read in list of IATI activities (from funders and select delivery partners)
iati_activity_list <- readRDS(file = "Outputs/gov_list_final.rds")
partner_iati_list <- readRDS(file = "Outputs/partner_activity_list.rds")
# Filter gov department records for minimum granularity
iati_projects <- iati_activity_list %>%
filter(  str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
#reporting_org_ref == "GB-GOV-1" | # RED and ex-FCO research coded activities
str_detect(iati_identifier, "UKSA") |   # UKSA awards (GCRF)
str_detect(iati_identifier, "NEWT-MO") |   # Met Office awards (Newton)
str_detect(iati_identifier, "NEWT-BIS") |  # Other Met Office awards?
str_detect(iati_identifier, "NEWT-BC") |  # British Council
str_detect(iati_identifier, "GCRF-Clm") |  # Academies
str_detect(iati_identifier, "RS-GCRF|NEWT-RS") |  # Royal Society
str_detect(iati_identifier, "RAENG-GCRF|NEWT-RAE") |  # Royal Academy of Engineering
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
filter(flow_type == "ODA") %>%
mutate(fund = if_else(is.na(fund), "Unknown", fund)) %>%
plyr::rbind.fill(partner_iati_list) # Add partner activities
# Keep required fields
iati_projects_final <- iati_projects %>%
mutate(Funder = coalesce(gov_funder, reporting_org),
lead_org_country = "",
partner_org_name = "",
partner_org_country = "",
extending_org = coalesce(extending_org, reporting_org)) %>%
select(id = iati_identifier,
title = activity_title,
abstract = activity_description,
start_date,
end_date,
amount,
currency,
extending_org,
lead_org_name = partner,
lead_org_country = partner_country,
partner_org_name,
partner_org_country,
iati_id = programme_id,
Fund = fund,
Funder,
recipient_country = all_countries,
subject = sector_name,
status = activity_status
)
# Add IATI link to awards
iati_projects_final <- iati_projects_final %>%
mutate(link = paste0("https://d-portal.org/ctrack.html#view=act&aid=", id))
# Clean up
rm(request)
rm(response)
# 4) Extract Wellcome projects ------------------------------------------------
# Read in public data on Wellcome Grants
wellcome_grants <- read_excel("Inputs/wellcome-grants-awarded-2005-2020.xlsx")
# Read in partnerships data provided by Annie (Jan 21) - restrict to suspected ODA
wellcome_partnerships <- read_excel("C:/Users/clegge/OneDrive - Wellcome Cloud/Project MODARI/Phase 2 - Implementation/2) Awards/Wellcome/Active Partnership record - 25 01 2021 (ODA labelled).xlsx") %>%
filter(`ODA funding?` %in% c("Yes", "Maybe"),
`How the partnership is paid` != "Wellcome pays the partner, the partner pays the awardee",
`Partner Organisation(s)` != "Medical Research Council")  # exclude MRC ones - these will be on GtR
# Join the two
wellcome_grants_comb <- wellcome_grants %>%
inner_join(wellcome_partnerships, by = c("Internal ID" = "Reference"))
# Add missing fields and format Funder/Fund field
wellcome_grants_comb <- wellcome_grants_comb %>%
mutate(status = if_else(Sys.Date() <= `Planned Dates:End Date`, "Active", "Closed"),
extending_org = "Wellcome Trust",
currency = "GBP",
partner_org_name = "",
partner_org_country = `Research Location Countries`,
recipient_country = "",
Funder = if_else(str_detect(`Partner Organisation(s)`, "National Institute for Health Research"),
"Department of Health and Social Care", `Partner Organisation(s)`),
Fund = if_else(Funder == "Department of Health and Social Care",
"Global Health Research - Partnerships", "FCDO Research and Evidence Division"))
# Select desired variables
wellcome_grants_comb <- wellcome_grants_comb %>%
select(id = `Internal ID`,
title = Title.x,
abstract = Description,
start_date = `Planned Dates:Start Date`,
end_date = `Planned Dates:End Date`,
amount = `Amount Awarded`,
currency,
extending_org,
lead_org_name = `Recipient Org:Name`,
lead_org_country = `Recipient Org:Country`,
partner_org_name,
partner_org_country,
iati_id = `Partnership Name`,
Fund,
Funder,
recipient_country,
subject = `Master Grant Type Name`,
status
)
# Format date fields for merging
wellcome_grants_final <- wellcome_grants_comb %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
link = "https://wellcome.org/grant-funding/funded-people-and-projects")
# 5) Join 3 sources together ----------------------------------------------
all_projects <- rbind(ukri_projects_final, nihr_projects_final, iati_projects_final, wellcome_grants_final)
# Save as R file (to read back in if needed)
saveRDS(all_projects, file = "Outputs/all_projects.rds")
# all_projects <- readRDS("Outputs/all_projects.rds")
# Change terminology around award status
all_projects <- all_projects %>%
mutate(status = if_else(status %in% c("Contracted", "Implementation"), "Active", status))
# Add ID field to dataset
all_projects$ID <- seq.int(nrow(all_projects))
# 6) Extract countries -----------------------------------
# Extract countries mentioned in abstract or title
countries <- countrycode::codelist$country.name.en
countries_string <- paste0(countries, collapse = "|")
countries_in_description <- all_projects %>%
mutate(text = paste0(title, " ", abstract)) %>%
select(title, text) %>%
mutate(countries_abstract = str_extract_all(text, countries_string)) %>%
unnest(cols = countries_abstract) %>%
unique()
# Correct Niger / Nigeria problem
countries_in_description <- countries_in_description %>%
mutate(countries_abstract = if_else(str_detect(text, "Nigeria") & !str_detect(text, "Niger ") & countries_abstract == "Niger",
"Nigeria", countries_abstract))
# Aggregate list of countries up
countries_in_description <- countries_in_description %>%
group_by(title) %>%
summarise(countries_abstract = paste(countries_abstract[!is.na(countries_abstract)], collapse = ", "))
# Add the country mentioned field onto main dataset
all_projects_final <- all_projects %>%
left_join(countries_in_description, by = "title") %>%
mutate(partner_countries = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
countries_abstract = paste0(coalesce(recipient_country, ""), ", ", coalesce(countries_abstract, "")))
# Distinguish between abstract and partner countries
countries_data <- all_projects_final %>%
select(ID, countries_abstract, partner_countries) %>%
gather(key = "country_type", value = "Country", -ID) %>%
right_join(select(all_projects_final, -countries_abstract, -partner_countries), by = "ID") %>%
mutate(Country = str_replace_all(Country, "NA", "Unknown"),
Country = str_replace_all(Country, ",,", ","))
# Separate out lead, partner countries
all_projects_split_country <- countries_data %>%
select(ID, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of,|Tanzania, United Republic of,", "Tanzania,")) %>%
separate_rows(Country, sep = ",", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|UNITED STATES|United states"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = str_replace(Country, "DRC", "Democratic Republic of the Congo"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country),
Country = str_replace_all(Country, "é", "e")) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(ID)
# Read in DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx")
# Check countries that are unmatched (this information will be lost)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's
# accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
rename(all_countries = Country) %>%
# select(-country_type) %>%
left_join(all_projects_split_country, by = c("ID", "country_type")) %>%
mutate(date_refreshed = Sys.Date())
# 7) Tidy country info (i.e. remove unnecessary duplicate records) ---------------
# Extract project records with unknown or missing country field
missing_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(ID, id, country_type) %>%
unique() %>%
mutate(exclude_flag = 1)
# Identify projects that have both a populated and missing country field
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(ID, id, country_type) %>%
unique() %>%
filter(id %in% missing_country_projects$id)
# Exclude project records with unknown/missing abstract or beneficiary country AND
# a populated other country record
all_projects_tidied <- all_projects_final %>%
left_join(missing_country_projects, by = c("ID", "id", "country_type")) %>%
filter(!(exclude_flag == 1 & country_type == "countries_abstract" & (Country %in% c("Unknown") | is.na(Country))))
# Label unknown/missing countries as "Unknown" to remove NULLs from Tableau map
all_projects_tidied <- all_projects_tidied %>%
mutate(Country = if_else(is.na(Country), "Unknown", Country))
# 8) Check data -----------------------------------
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research"), "FCDO Research & Innovation", Fund),
Funder = if_else(Funder == "Foreign, Commonwealth & Development Office", "Foreign, Commonwealth and Development Office", Funder))
# check list of ODA R&I funds
unique(all_projects_tidied$Fund)
test <- filter(all_projects_tidied, is.na(Fund))
nrow(test)
# check list of ODA R&I funders
unique(all_projects_tidied$Funder)
# Look at data from a particular delivery partner
test <- filter(all_projects_tidied, extending_org == "Bill & Melinda Gates Foundation")
# Look for a particular award (from keyword in title)
test <- filter(all_projects_tidied, str_detect(title, "under-five"))
# Check countries
unique(all_projects_tidied$Country)
test <- filter(all_projects_tidied,
is.na(Country) | str_detect(Country, ","))
test2 <- filter(all_projects_tidied,
Country == "Unknown")
test3 <- filter(all_projects_tidied,
Country == "Niger")
# Unknown country should be for the activity location only
unique(test2$country_type)
# 9) Write data --------------------------------
# Write to RDS
saveRDS(all_projects_tidied, "Outputs/all_projects_tidied.rds")
# all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
# Write data to EC google drive
# Authorise googlesheets4 to view and manage sheets on EC Drive
# (using saved authentication token in folder)
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
install.packages("RSQLite")
library("RSQLite")
## connect to db
con <- dbConnect(drv=RSQLite::SQLite(), dbname="C:/Users/clegge/Downloads/iati.sqlite/iati.sqlite")
## list all tables
tables <- dbListTables(con)
## exclude sqlite_sequence (contains table information)
tables <- tables[tables != "sqlite_sequence"]
test <- dbGetQuery(conn=con,
statement = "SELECT * FROM transaction_breakdown
WHERE _link_activity = '40372'")
View(test)
rm(test)
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier = ", partner_activity_id))
# Extract information on one FCDO activity:
partner_activity_id <- "GB-CHC-287287-DFID-PEDL"
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier = ", partner_activity_id))
activity_detail <- dbGetQuery(conn=con,
statement = "SELECT * FROM activity
LIMIT 5")
View(activity_detail)
activity_detail <- dbGetQuery(conn=con,
statement = "SELECT * FROM activity
WHERE iatiidentifier = 'GB-CHC-287287-DFID-PEDL'")
View(activity_detail)
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier = '", partner_activity_id, "'"))
View(activity_detail)
activity_detail <- dbGetQuery(conn=con,
statement = "SELECT * FROM activity
LIMIT 5")
View(activity_detail)
activity_detail <- dbGetQuery(conn=con,
statement = "SELECT * FROM activity
WHERE iatiidentifier = 'US-EIN-262681792-DPW'")
View(activity_detail)
activity_detail <- dbGetQuery(conn=con,
statement = "SELECT * FROM activity
WHERE iatiidentifier = 'GB-CHC-228248-R0500'")
View(activity_detail)
activity_description <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM description
WHERE iatiidentifier = '", partner_activity_id, "'"))
dbGetQuery(conn=con,statement = "SELECT * FROM description LIMIT 5")
test <- dbGetQuery(conn=con,statement = "SELECT * FROM description LIMIT 5")
View(activity_detail)
View(test)
View(activity_detail)
activity_description <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM description
WHERE _link_activity = 946809"))
View(activity_description)
library("RSQLite")
## connect to db
con <- dbConnect(drv=RSQLite::SQLite(), dbname="C:/Users/clegge/Downloads/iati.sqlite/iati.sqlite")
partner_activity_id <- "GB-CHC-228248-R0500"
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier = '", partner_activity_id, "'"))
activity_link <- activity_detail$`_link_activity`
activity_description <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM description
WHERE _link_activity = ", activity_link))
View(activity_description)
activity_partners <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM participatingorg
WHERE _link_activity = ", activity_link))
activity_partners <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM transaction
WHERE _link_activity = ", activity_link))
activity_transactions <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM transaction
WHERE _link_activity = ", activity_link))
activity_transactions <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM transactions
WHERE _link_activity = ", activity_link))
activity_transactions <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM transaction_breakdown
WHERE _link_activity = ", activity_link))
View(activity_transactions)
activity_transactions_country <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM transaction_recipientcountry
WHERE _link_activity = ", activity_link))
activity_budget <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM budget
WHERE _link_activity = ", activity_link))
View(activity_budget)
activity_disbursement <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM planneddisbursement
WHERE _link_activity = ", activity_link))
activity_country <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM recipientcountry
WHERE _link_activity = ", activity_link))
activity_location <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM location
WHERE _link_activity = ", activity_link))
View(activity_country)
View(activity_partners)
partner_activity_id <- "GB-CHC-222655-PO5247REBUILD"
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier = '", partner_activity_id, "'"))
activity_link <- activity_detail$`_link_activity`
partner_activity_id <- "GB-CHC-222655-PO5247REBUILD"
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier LIKE '%", partner_activity_id, "%'"))
View(activity_detail)
partner_activity_id <- "GB-CHC-287287-DFID-PEDL"
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier LIKE '%", partner_activity_id, "%'"))
activity_description <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM description
WHERE _link_activity = ", activity_link))
activity_partners <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM participatingorg
WHERE _link_activity = ", activity_link))
activity_transactions <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM transaction_breakdown
WHERE _link_activity = ", activity_link))
activity_transactions_country <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM transaction_recipientcountry
WHERE _link_activity = ", activity_link))
activity_detail <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM activity
WHERE iatiidentifier LIKE '%", partner_activity_id, "%'"))
activity_link <- activity_detail$`_link_activity`
activity_description <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM description
WHERE _link_activity = ", activity_link))
activity_partners <- dbGetQuery(conn=con,
statement = paste0("SELECT * FROM participatingorg
WHERE _link_activity = ", activity_link))
View(activity_partners)
