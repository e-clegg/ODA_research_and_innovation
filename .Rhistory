if (!("tidyverse" %in% installed.packages())) {
install.packages("httr")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("readxl")
}
# Load packages -----
library(jsonlite)
#library(stringi)
library(googlesheets4)
library(gargle)
library(httr)
library(tidyverse)
library(readxl)
# Read in data from script 4
all_projects_transactions <- readRDS(file = "Outputs/all_projects_transactions.rds")
# 1) Extract countries -----------------------------------
# Distinguish location and beneficiary countries in main dataset
all_projects_final <- all_projects_transactions %>%
mutate(location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
beneficiary_country = recipient_country)
# Convert location vs. beneficiary country data to long format
countries_data <- all_projects_final %>%
select(id, beneficiary_country, location_country) %>%
gather(key = "country_type", value = "Country", -id) %>%
right_join(select(all_projects_final, -beneficiary_country, -location_country), by = "id")
# Create one row per country
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of|Tanzania, United Republic of", "Tanzania")) %>%
mutate(Country = str_replace_all(Country, ";", ",")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|UNITED STATES|United states"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = str_replace(Country, "DRC", "Democratic Republic of the Congo"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country)) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Create one row per country
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of|Tanzania, United Republic of", "Tanzania"),
Country = str_replace_all(Country, "Congo, Democratic Republic of", "Democratic Republic of the Congo")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",|;|/", convert = FALSE) %>%
mutate(Country = str_trim(Country),
Country = if_else(str_detect(tolower(Country), "uk|united kingdom|england|northern ireland|wales|scotland"), "United Kingdom", Country),
Country = if_else(str_detect(tolower(Country), "usa|united states"), "United States", Country),
Country = if_else(str_detect(tolower(Country), "netherlands"), "Netherlands", Country),
Country = if_else(str_detect(tolower(Country), "philippines"), "Philippines", Country),
Country = if_else(str_detect(tolower(Country), "ivoire"), "Ivory Coast", Country)) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Read in DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx")
# Check countries that are unmatched (this information will be lost)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's
# accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
# remove commas at start
mutate(Country = if_else(substr(Country, 1, 1) == ",", substr(Country, 2, length(Country)-1), Country)) %>%
rename(all_countries = Country) %>%
left_join(all_projects_split_country, by = c("id", "extending_org", "country_type"))
# Add row ID field to dataset
all_projects_final$row_id <- seq.int(nrow(all_projects_final))
# 2) Tidy country info (i.e. remove unnecessary duplicate records) ---------------
# Extract project records with unknown or missing country field
missing_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(row_id, id, country_type) %>%
unique() %>%
mutate(exclude_flag = 1)
# Identify projects that have both a populated and missing country field
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(row_id, id, country_type) %>%
unique() %>%
filter(id %in% missing_country_projects$id)
# Exclude project records with unknown/missing location or beneficiary country AND
# a populated other country record
all_projects_tidied <- all_projects_final %>%
left_join(missing_country_projects, by = c("row_id", "id", "country_type")) %>%
filter(!(exclude_flag == 1 & country_type == "beneficiary_country" & (Country %in% c("Unknown") | is.na(Country))))
# Label unknown/missing countries as "Unknown" to remove NULLs from Tableau map
all_projects_tidied <- all_projects_tidied %>%
mutate(Country = if_else(is.na(Country), "Unknown", Country)) %>%
select(-exclude_flag)
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research"), "FCDO fully funded", Fund),
Funder = if_else(str_detect(Funder, "Foreign, Commonwealth & Development Office|FCDO"), "Foreign, Commonwealth and Development Office", Funder))
all_projects_tidied <- all_projects_tidied %>%
mutate(Funder = if_else(Funder == "National Institutes of Health", "Department of Health and Social Care", Funder),
lead_org_country = if_else(Fund == "Chevening Scholarships", "United Kingdom", lead_org_country))
# Add FCDO programme ID
all_projects_tidied <- all_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else(Funder %in% c("Foreign, Commonwealth and Development Office", "FCDO")
& str_detect(iati_id, "-1-"),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
# 3) Add funder programme names ------------------
# Create vector of FCDO gov funder programme IATI IDs
gov_funder_iati_ids <- all_projects_tidied %>%
select(iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-")) %>%
unique()
# Function to extract programme names from IATI
extract_iati_activity_name <- function(activity_id) {
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=title")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
new_data <- new_data %>%
unnest(col = title.narrative) %>%
select(funder_iati_id = iati_identifier, funder_programme = text)
} else {
new_data <- data.frame()
}
return(new_data)
}
# Create empty dataframe to hold name extract from IATI
gov_funder_programme_names <- data.frame()
# Run function over all IATI ids
for (id in gov_funder_iati_ids$iati_id) {
print(id)
data <- extract_iati_activity_name(id)
gov_funder_programme_names <- rbind(gov_funder_programme_names, data)
}
# Join funder programme name to main dataset
all_projects_tidied <- all_projects_tidied %>%
left_join(gov_funder_programme_names, by = c("iati_id" = "funder_iati_id"))
# 4) Check data -----------------------------------
# TEMPORARY ***
# Remove IDRC DHSC IATI data
all_projects_tidied <- all_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# check list of ODA R&I funds
unique(all_projects_tidied$Fund)
test <- filter(all_projects_tidied, is.na(Fund))
nrow(test)
# check list of ODA R&I funders
unique(all_projects_tidied$Funder)
test <- filter(all_projects_tidied, is.na(Funder))
# Check countries
unique(all_projects_tidied$Country)
test <- filter(all_projects_tidied,
is.na(Country) | str_detect(Country, ","))
test2 <- filter(all_projects_tidied,
Country == "Unknown")
test3 <- filter(all_projects_tidied,
Country == "Niger")
# Unknown country should be for the activity location only
unique(test2$country_type)
# 4) Write data --------------------------------
# Write to RDS
saveRDS(all_projects_tidied, "Outputs/all_projects_tidied.rds")
# all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
# Limit size and number of columns for writing
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2)) %>%
unique() %>%
filter(status %in% c("Active", "Finalisation", "Pipeline/identification"))
# Remove Afghanistan projects
all_projects_tidied <- all_projects_tidied %>%
filter(Country != "Afghanistan")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
all_projects <- rbind(ukri_projects_final, nihr_projects_final,
iati_projects_final, wellcome_grants_final,
collated_spreadsheet_data)
# Set quarter end date for IATI information
quarter_end_date <- as.Date("2021-06-30")
# A) Extraction ----
# Manually specify the IATI activities to extract transactions for
id_list <- c("US-EIN-042103594-PPE3978774",
"US-EIN-042103594-GCCI-3978870",
"GB-CHC-1177110-R2HC",
"GB-CHC-1177110-HIF")
# Function to extract transactions for a specified activity
transactions_extract <- function(iati_id, page) {
path <- paste0("https://iati.cloud/api/transactions/?iati_identifier=", iati_id, "&fields=value,transaction_date,description,currency,receiver_organisation&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
results <- plyr::rbind.fill(transaction_list, new_data)
return(results)
}
# Prepare results data frame and counters
transaction_list <- data.frame()
new_rows <- 0
page <- 1
# Run extraction, stopping when no new transactions are returned
for (id in id_list) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(id, "-", page))
x <- nrow(transaction_list)
transaction_list <- transactions_extract(id, page)
page <- page + 1
y <- nrow(transaction_list)
new_rows = y - x
}
}
# B) Unnest information -----
transactions_unnest <- transaction_list %>%
rename(currency = currency.code) %>%
# 1 - Country
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -country.code, -recipient_countries, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# 2 - Description
unnest(cols = description.narrative,
keep_empty = TRUE) %>%
select(-lang.code, -lang.name) %>%
rename(title = text) %>%
# 3 - Sectors
unnest(cols = sectors,
keep_empty = TRUE) %>%
rename(subject = sector.name) %>%
# 4 - Receiver org
unnest(cols = receiver_organisation.narrative,
keep_empty = TRUE) %>%
mutate(lead_org_name = coalesce(text, receiver_organisation.ref)) %>%
filter(!is.na(lead_org_name)) %>%   # remove transactions without a recipient
filter(!(lead_org_name == "Elrha")) %>%  # remove Elrha income
# select fields to keep
select(iati_identifier, start_date = transaction_date,
title, recipient_country, subject, currency, amount = value, lead_org_name) %>%
# sum amounts over multiple payments
group_by(iati_identifier, title, recipient_country, currency, subject, lead_org_name) %>%
summarise(start_date = min(start_date),
amount = sum(as.numeric(amount))) %>%
unique() %>%
mutate(partner_org_name = "",
partner_org_country = "",
period_start = "",
period_end = "",
lead_org_country = "",
end_date = "",
last_updated = quarter_end_date)
# C) Join information back to master dataset ----
# Read in R file (from previous script)
all_projects <- readRDS("Outputs/all_projects.rds")
# Subset for transaction based activities
all_projects_subset <- all_projects %>%
filter(id %in% id_list) %>%
select(id, abstract, extending_org, iati_id, Fund, Funder, status, link) %>%
unique() %>%
left_join(transactions_unnest, by = c("id" = "iati_identifier"))
all_projects_subset$id_suffix <- seq.int(nrow(all_projects_subset))
all_projects_subset <- all_projects_subset %>%
mutate(id = paste0(id, "-", id_suffix)) %>%
select(-id_suffix)
# Replace original single line activities in master file
all_projects_transactions <- all_projects %>%
filter(!(id %in% id_list)) %>%
rbind(all_projects_subset)
# D) Save information ----
saveRDS(all_projects_transactions, file = "Outputs/all_projects_transactions.rds")
# Restore the object
# all_projects_transactions <- readRDS(file = "Outputs/all_projects_transactions.rds")
# Read in data from script 4
all_projects_transactions <- readRDS(file = "Outputs/all_projects_transactions.rds")
# Distinguish location and beneficiary countries in main dataset
all_projects_final <- all_projects_transactions %>%
mutate(location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
beneficiary_country = recipient_country)
# Convert location vs. beneficiary country data to long format
countries_data <- all_projects_final %>%
select(id, beneficiary_country, location_country) %>%
gather(key = "country_type", value = "Country", -id) %>%
right_join(select(all_projects_final, -beneficiary_country, -location_country), by = "id")
# Create one row per country
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of|Tanzania, United Republic of", "Tanzania")) %>%
mutate(Country = str_replace_all(Country, ";", ",")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|UNITED STATES|United states"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = str_replace(Country, "DRC", "Democratic Republic of the Congo"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country)) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Create one row per country
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of|Tanzania, United Republic of", "Tanzania"),
Country = str_replace_all(Country, "Congo, Democratic Republic of", "Democratic Republic of the Congo")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",|;|/", convert = FALSE) %>%
mutate(Country = str_trim(Country),
Country = if_else(str_detect(tolower(Country), "uk|united kingdom|england|northern ireland|wales|scotland"), "United Kingdom", Country),
Country = if_else(str_detect(tolower(Country), "usa|united states"), "United States", Country),
Country = if_else(str_detect(tolower(Country), "netherlands"), "Netherlands", Country),
Country = if_else(str_detect(tolower(Country), "philippines"), "Philippines", Country),
Country = if_else(str_detect(tolower(Country), "ivoire"), "Ivory Coast", Country)) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Read in DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx")
# Check countries that are unmatched (this information will be lost)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's
# accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
# remove commas at start
mutate(Country = if_else(substr(Country, 1, 1) == ",", substr(Country, 2, length(Country)-1), Country)) %>%
rename(all_countries = Country) %>%
left_join(all_projects_split_country, by = c("id", "extending_org", "country_type"))
# Add row ID field to dataset
all_projects_final$row_id <- seq.int(nrow(all_projects_final))
# Extract project records with unknown or missing country field
missing_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(row_id, id, country_type) %>%
unique() %>%
mutate(exclude_flag = 1)
# Identify projects that have both a populated and missing country field
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(row_id, id, country_type) %>%
unique() %>%
filter(id %in% missing_country_projects$id)
# Exclude project records with unknown/missing location or beneficiary country AND
# a populated other country record
all_projects_tidied <- all_projects_final %>%
left_join(missing_country_projects, by = c("row_id", "id", "country_type")) %>%
filter(!(exclude_flag == 1 & country_type == "beneficiary_country" & (Country %in% c("Unknown") | is.na(Country))))
# Label unknown/missing countries as "Unknown" to remove NULLs from Tableau map
all_projects_tidied <- all_projects_tidied %>%
mutate(Country = if_else(is.na(Country), "Unknown", Country)) %>%
select(-exclude_flag)
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research"), "FCDO fully funded", Fund),
Funder = if_else(str_detect(Funder, "Foreign, Commonwealth & Development Office|FCDO"), "Foreign, Commonwealth and Development Office", Funder))
all_projects_tidied <- all_projects_tidied %>%
mutate(Funder = if_else(Funder == "National Institutes of Health", "Department of Health and Social Care", Funder),
lead_org_country = if_else(Fund == "Chevening Scholarships", "United Kingdom", lead_org_country))
# Add FCDO programme ID
all_projects_tidied <- all_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else(Funder %in% c("Foreign, Commonwealth and Development Office", "FCDO")
& str_detect(iati_id, "-1-"),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
# Create vector of FCDO gov funder programme IATI IDs
gov_funder_iati_ids <- all_projects_tidied %>%
select(iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-")) %>%
unique()
extract_iati_activity_name <- function(activity_id) {
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=title")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
new_data <- new_data %>%
unnest(col = title.narrative) %>%
select(funder_iati_id = iati_identifier, funder_programme = text)
} else {
new_data <- data.frame()
}
return(new_data)
}
# Create empty dataframe to hold name extract from IATI
gov_funder_programme_names <- data.frame()
for (id in gov_funder_iati_ids$iati_id) {
print(id)
data <- extract_iati_activity_name(id)
gov_funder_programme_names <- rbind(gov_funder_programme_names, data)
}
# Join funder programme name to main dataset
all_projects_tidied <- all_projects_tidied %>%
left_join(gov_funder_programme_names, by = c("iati_id" = "funder_iati_id"))
# TEMPORARY ***
# Remove IDRC DHSC IATI data
all_projects_tidied <- all_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# check list of ODA R&I funds
unique(all_projects_tidied$Fund)
test <- filter(all_projects_tidied, is.na(Fund))
nrow(test)
# check list of ODA R&I funders
unique(all_projects_tidied$Funder)
test <- filter(all_projects_tidied, is.na(Funder))
# Check countries
unique(all_projects_tidied$Country)
test <- filter(all_projects_tidied,
is.na(Country) | str_detect(Country, ","))
test2 <- filter(all_projects_tidied,
Country == "Unknown")
test3 <- filter(all_projects_tidied,
Country == "Niger")
# Unknown country should be for the activity location only
unique(test2$country_type)
# Write to RDS
saveRDS(all_projects_tidied, "Outputs/all_projects_tidied.rds")
# Limit size and number of columns for writing
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2)) %>%
unique() %>%
filter(status %in% c("Active", "Finalisation", "Pipeline/identification"))
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2)) %>%
unique()
unique(all_projects_tidied$status)
# Limit size and number of columns for writing
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2)) %>%
unique() %>%
filter(status != "Closed")
unique(all_projects_tidied$status)
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
# Limit size and number of columns for writing
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
status = if_else(is.na(Status), "Unknown",
if_else(Status == "Complete", "Closed", status))) %>%
unique() %>%
filter(status != "Closed")
# Limit size and number of columns for writing
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
status = if_else(is.na(status), "Unknown",
if_else(status == "Complete", "Closed", status))) %>%
unique() %>%
filter(status != "Closed")
unique(all_projects_tidied$status)
# Remove Afghanistan projects
all_projects_tidied <- all_projects_tidied %>%
filter(Country != "Afghanistan")
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
status = if_else(is.na(status), "Unknown",
if_else(status == "Complete", "Closed", status))) %>%
unique()
unique(all_projects_tidied$status)
table(all_projects_tidied$status)
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
# Limit size and number of columns for writing
all_projects_tidied <- all_projects_tidied %>%
# select(-subject, -all_countries, -last_updated) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
status = if_else(is.na(status), "Unknown",
if_else(status == "Complete", "Closed", status))) %>%
unique() %>%
filter(status != "Closed")
# Remove Afghanistan projects
all_projects_tidied <- all_projects_tidied %>%
filter(Country != "Afghanistan")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
