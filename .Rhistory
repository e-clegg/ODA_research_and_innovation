unnest(cols = name_country, keep_empty = TRUE) %>%
# Coalesce country results
mutate(final_country = coalesce(grid_country, name_country))
result <- str_to_title((country_lookup$final_country)[1])
return(result)
}
### IATI ###
# Function to match IATI country code to name
country_code_to_name <- function(country_code) {
# check if input is a valid 2-digit country code
if(is.na(country_code) | nchar(country_code) < 2) { country_name <- NA }
else {
path <- paste0("https://iati.cloud/api/countries/?code=", country_code, "&format=json")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- (fromJSON(response, flatten = TRUE))$results
# Check whether a name has been found
if(length(response) > 0) {
country_name <- response$name
} else {
country_name <- NA
}
}
return(country_name)
}
# Function to extract 5-digit OECD sector codes
sector_extract <- function(page, sector_list) {
path <- paste0("https://iati.cloud/api/sectors/?fields=category,url,name,code&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Condition to check when 5-digit codes stop being returned
if(!("category" %in% names(response$results))) {
sector_list <- rbind(sector_list, response$results)
} else {
sector_list <- sector_list
}
return(sector_list)
}
# Function to extract IATI activity info from activity ID
iati_activity_extract <- function(activity_id) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
return(new_data)
}
# Function to extract IATI activity IDs for a specified org code
org_activity_extract <- function(page, org_code, org_activity_list) {
path <- paste0("https://iati.cloud/api/activities/?format=json&reporting_org_identifier=", org_code, "&fields=iati_identifier,other_identifier,activity_date,reporting_org,sector,location,default_flow_type,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity,tag&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
results <- rbind(org_activity_list, new_data)
return(results)
}
# Function to extract transactions for a specified IATI activity ID
transactions_extract <- function(activity_id, page, output_data) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/transactions/?iati_identifier=", activity_id, "&fields=value,transaction_date,description,currency,receiver_organisation&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
output <- plyr::rbind.fill(output_data, new_data)
} else {
output <- output_data
}
return(output)
}
# Function to extract activity names from an IATI activity ID
extract_iati_activity_name <- function(activity_id) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=title")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
new_data <- new_data %>%
unnest(col = title.narrative) %>%
select(funder_iati_id = iati_identifier, funder_programme = text)
result <- new_data$funder_programme
} else {
result <- NA_character_
}
return(result)
}
### UKRI ###
# 1 - Function to extract project IDs by fund name (GCRF/Newton)
extract_ukri_projects_by_fund <- function(page, fund) {
path <- paste0("https://gtr.ukri.org:443/gtr/api/projects?q=",
fund, "&f=pro.rcukp&p=", page, "&s=100")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
projects <- response$project
return(projects)
}
# 2 - Function to extract staff organisation
extract_staff_org <- function(staff_data, person_id) {
path <- paste0("http://gtr.ukri.org/person/", person_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
person_current_org_name <- ((response$personOverview)$organisation)$name
person_current_org_id <- ((response$personOverview)$organisation)$id
staff_org_data <- rbind(staff_data, data.frame(person_id,
person_current_org_name,
person_current_org_id))
return(staff_org_data)
}
# 3 - Function to extract country from organisation ID
# (checking GRID database as well as UKRI)
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
org_name <- ((response$organisationOverview)$organisation)$name
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# If unknown use other generic lookup function
if(org_country_ukri == "Unknown") {
org_country <- org_country_lookup(org_name)
} else {
org_country <- org_country_ukri
}
return(org_country)
}
# 4 - Master function to extract UKRI project data by ID
extract_ukri_projects_by_id <- function(id) {
path <- paste0("http://gtr.ukri.org/projects?ref=", id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# extract project data and last refresh date
data <- response$projectOverview
last_updated <- (response$lastRefreshDate)$lastRefreshDate %>%
str_replace_all("Data last updated:  ", "") %>%
as.Date(format = "%d %b %Y")
# Create blank org table for output
org_table <- data.frame()
if(length(data) > 0) {
# Unlist first level
data <- data$projectComposition
# Extract project, lead org and co-investigator staff ids
projects <- data$project
lead_org <- data$leadResearchOrganisation
person_roles <- data$personRole
# Extract staff information (if applicable)
if(length(person_roles) > 0) {                        # checks length of list
person_roles <- person_roles %>%
unnest(col = role) %>%
filter(name == "CO_INVESTIGATOR") %>%
select(id)
if(nrow(person_roles) > 0) {                # checks no. of rows in dataframe
# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_country_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_country_data$person_current_org_name) > 0) {
# Keep staff org names and countries to output
org_table <- staff_org_country_data %>%
mutate(project_id = projects[["grantReference"]],
organisation_role = 2) %>%
select(project_id,
organisation_role,
organisation_name = person_current_org_name,
organisation_country = person_current_org_country)
# Collapse org names and locations
staff_org_names <- staff_org_country_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_country_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = NA_character_,
partner_org_country = NA_character_)
}
# Write lead org name and country to file
org_table <- org_table %>%
rbind(select(project_data,
project_id = gtr_id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds,
extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country,
status, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(list(project_data, org_table))
}
country_list <- c("Ukraine")
# Define strings for use in output file name
string <- "Ukraine"
date <- "Feb22"
# Read in datasets
tableau_projects_tidied <- readRDS("Outputs/tableau_projects_tidied.rds")
# Abbrieviate/format organisation names
tableau_projects_tidied <- tableau_projects_tidied %>%
mutate(Funder = case_when(
Funder == "Foreign, Commonwealth and Development Office" ~ "FCDO",
Funder == "Department of Health and Social Care" ~ "DHSC",
Funder == "Department for Business, Energy and Industrial Strategy" ~ "BEIS"
))
# Set header style (bold)
header_st <- createStyle(textDecoration = "Bold",
fontSize = 8, fontName = "Arial",
halign = "center")
# Set table style
table_st <- createStyle(fontSize = 8, fontName = "Arial",
wrapText = TRUE,
valign = "top")
wb <- openxlsx::createWorkbook()
for(i in 1:length(country_list)) {
print(paste0(i, " - ", country_list[i]))
# Extract project data for selected country
country_project_ids <- tableau_projects_tidied %>%
filter(Country == country_list[i]) %>%
mutate(Start = as.numeric(as.character(format(as.Date(start_date), format = "%Y"))),
End = as.numeric(as.character(format(as.Date(end_date), format = "%Y"))),
link = coalesce(link, ""))
output_report <- country_project_ids %>%
mutate(lead_org_name = coalesce(lead_org_name, extending_org)) %>%
select(Funder, Fund, Programme = funder_programme,
Title = title, Start, End, Description = abstract,
`Beneficiary Country` = recipient_country,
`Lead Organisation` = lead_org_name, `Partner Organisations` = partner_org_name,
`Value` = amount,
`Web Link` = link,
Currency = currency) %>%
group_by(Title, Funder) %>%
slice(1) %>%
ungroup() %>%
unique()
# Summarise funders on co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
comb_funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1) %>%
select(-n)
# Add summarised funders to main report
output_report <- output_report %>%
left_join(co_funded_projects, by = "Title") %>%
mutate(Funder = coalesce(comb_funder, Funder)) %>%
group_by(Title) %>%
# Keep one row per project title
slice(1) %>%
select(Funder, Fund, Programme, Title, Start, End, Description, `Beneficiary Country`,
`Lead Organisation`, `Partner Organisations`, Currency, `Value`, `Web Link`)
# Format numerical value column
class(output_report$`Value`) <- "comma"
# Add country dataset to output list
openxlsx::addWorksheet(wb, sheetName = country_list[i])
openxlsx::writeData(wb, sheet = i, x = output_report,
headerStyle = header_st,
borderStyle = "thin")
# Add font style
addStyle(wb, sheet = i, table_st, rows = 2:500, cols = 1:13, gridExpand = TRUE, stack = TRUE)
# Identify titles and hyperlinks
hyperlinks <- output_report$`Web Link`
names(hyperlinks) <- output_report$`Web Link`
class(hyperlinks) <- "hyperlink"
# Write hyperlinks
writeData(wb, sheet = i, x = hyperlinks, startRow = 2, startCol = 13, colNames = FALSE)
# Set column widths
setColWidths(wb, sheet = i, cols = 1:13, widths = c(10,25,30,40,6,6,60,30,30,30,10,10,50))
}
# Save Excel file
saveWorkbook(wb, paste0("Outputs//", string, " active ODA projects - ", date, ".xlsx"), overwrite = TRUE)
# Extract project data for selected country
country_project_ids <- tableau_projects_tidied %>%
filter(Country == country_list[i]) %>%
mutate(Start = as.numeric(as.character(format(as.Date(start_date), format = "%Y"))),
End = as.numeric(as.character(format(as.Date(end_date), format = "%Y"))),
link = coalesce(link, ""))
test <- unique(tableau_projects_tidied$Country)
View(test)
View(countries)
test <- filter(tableau_projects_tidied, str_detect(iati_identifier, "GB-GOV-3-CHEVENING-SCHOLARSHIPS-UA"))
test <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-3-CHEVENING-SCHOLARSHIPS-UA"))
test <- filter(tableau_projects_tidied, str_detect(id, "GCRF-BACSDP-Prg2018-SDP2100014"))
View(test)
View(countries)
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = coalesce(recipient_country, "Unknown"),
location_country = paste0(coalesce(lead_org_country, "Unknown"), ", ", coalesce(partner_org_country, "Unknown"))) %>%
select(project_id = id, location_country, beneficiary_country) %>%
unique()
test1 <- filter(country_table, str_detect(id, "GCRF-BACSDP-Prg2018-SDP2100014"))
test1 <- filter(country_table, str_detect(project_id, "GCRF-BACSDP-Prg2018-SDP2100014"))
View(test1)
# Convert location vs. beneficiary country data to long format
country_table <- country_table %>%
gather(key = "country_type", value = "Country", -project_id) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
Country = str_to_lower(Country))
test2 <- filter(country_table, str_detect(project_id, "GCRF-BACSDP-Prg2018-SDP2100014"))
View(test2)
# Clean country names
country_table_cleaned <- country_table %>%
mutate(Country = str_replace_all(Country, "\\(the\\)", ""),  # remove (the)
Country = gsub("[()]", "", Country),                  # remove all parentheses
Country = str_replace_all(Country, "tanzania, united republic of", "tanzania"),
Country = str_replace_all(Country, "congo the democratic republic of the|drc|democratic republic of congo",
"democratic republic of the congo"),
Country = str_replace_all(Country, "china people's republic of", "china"),
Country = str_replace_all(Country, "democratic people's republic of korea", "democratic people’s republic of korea")) %>%
# standardise separators
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", Country))
test3 <- filter(country_table_cleaned, str_detect(project_id, "GCRF-BACSDP-Prg2018-SDP2100014"))
View(test3)
# Convert dataset to long with one row per country entry
country_table_cleaned <- country_table_cleaned %>%
separate_rows(Country, sep = ",|;", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
unique()
test3 <- filter(country_table_cleaned, str_detect(project_id, "GCRF-BACSDP-Prg2018-SDP2100014"))
View(test3)
# Further country cleaning
country_table_cleaned <- country_table_cleaned %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = case_when(
str_detect(Country, "uk|scotland|wales|united kingdom|england|ireland") & Country != "Ukraine" ~ "united kingdom",
str_detect(Country, "usa|united states") ~ "united states",
Country == "us" ~ "united states",
str_detect(Country, "ivoire") ~ "ivory coast",
str_detect(Country, "viet") ~ "vietnam",
str_detect(Country, "lao") ~ "laos",
str_detect(Country, "bolivia") ~ "bolivia",
str_detect(Country, "syria") ~ "syria",
TRUE ~ Country)) %>%
unique()
test3 <- filter(country_table_cleaned, str_detect(project_id, "GCRF-BACSDP-Prg2018-SDP2100014"))
View(test3)
# Clean country names
country_table_cleaned <- country_table %>%
mutate(Country = str_replace_all(Country, "\\(the\\)", ""),  # remove (the)
Country = gsub("[()]", "", Country),                  # remove all parentheses
Country = str_replace_all(Country, "tanzania, united republic of", "tanzania"),
Country = str_replace_all(Country, "congo the democratic republic of the|drc|democratic republic of congo",
"democratic republic of the congo"),
Country = str_replace_all(Country, "china people's republic of", "china"),
Country = str_replace_all(Country, "democratic people's republic of korea", "democratic people’s republic of korea")) %>%
# standardise separators
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", Country))
# Convert dataset to long with one row per country entry
country_table_cleaned <- country_table_cleaned %>%
separate_rows(Country, sep = ",|;", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
unique()
# Further country cleaning
country_table_cleaned <- country_table_cleaned %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = case_when(
str_detect(Country, "uk|scotland|wales|united kingdom|england|ireland") & Country != "ukraine" ~ "united kingdom",
str_detect(Country, "usa|united states") ~ "united states",
Country == "us" ~ "united states",
str_detect(Country, "ivoire") ~ "ivory coast",
str_detect(Country, "viet") ~ "vietnam",
str_detect(Country, "lao") ~ "laos",
str_detect(Country, "bolivia") ~ "bolivia",
str_detect(Country, "syria") ~ "syria",
TRUE ~ Country)) %>%
unique()
test3 <- filter(country_table_cleaned, str_detect(project_id, "GCRF-BACSDP-Prg2018-SDP2100014"))
View(test3)
# Replace country with "unknown" if not recognised against Tableau's accepted list
country_table_final <- country_table_cleaned %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "unknown")) %>%
mutate(Country = tools::toTitleCase(Country)) %>%
unique()
# Remove unecessary unknowns
country_table_final$row_id <- seq.int(nrow(country_table_final))
# identify records with more than one country for a country_type
identify_multiples <- country_table_final %>%
group_by(project_id, country_type) %>%
summarise(n = n()) %>%
filter(n > 1)
# identify "unknown" records for projects in the dataset above
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown") %>%
left_join(identify_multiples, by = c("project_id", "country_type")) %>%
filter(!is.na(n))
# remove these "unknowns" from the country table
country_table_final <- country_table_final %>%
filter(!(row_id %in% identify_unknowns_to_delete$row_id)) %>%
select(-row_id)
# Save datasets for testing
saveRDS(country_table, file = "Outputs/country_table.rds")
saveRDS(country_table_cleaned, file = "Outputs/country_table_cleaned.rds")
saveRDS(country_table_final, file = "Outputs/country_table_final.rds")
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
# Identify projects with no country info whatsoever
project_country_unknowns <- filter(tableau_projects, Country == "Unknown") %>%
select(id, country_type) %>%
unique() %>%
group_by(id) %>%
summarise(n = n()) %>%
filter(n > 1)
# Delete any other unknown records - these don't need displaying in Tableau
tableau_projects <- tableau_projects %>%
filter(id %in% project_country_unknowns$id | Country != "Unknown")
# Create vector of gov funder programme IATI IDs
# (takes too long to run - 10+ mins)
gov_funder_iati_ids <- tableau_projects %>%
select(Funder, iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-|GB-GOV-10-")) %>% # filter FCDO and DHSC IDs only
# remove any FCDO component numbers
mutate(programme_iati_id = if_else(Funder == "Foreign, Commonwealth and Development Office" &
substr(iati_id, nchar(iati_id)-3, nchar(iati_id)-3) == "-",
substr(iati_id, 1, nchar(iati_id)-4), iati_id)) %>%
# Add programme names on
mutate(funder_programme = map(programme_iati_id, extract_iati_activity_name)) %>%
mutate(funder_programme = unlist(funder_programme)) %>%
select(-Funder, -programme_iati_id) %>%
unique()
# Join funder programme name to main dataset
tableau_projects_tidied <- tableau_projects %>%
left_join(gov_funder_iati_ids, by = "iati_id") %>%
mutate(funder_programme = if_else(extending_org == "Wellcome Trust", subject, funder_programme))
# TEMPORARY ***
# Remove IDRC DHSC IATI data (this has been provided instead by spreadsheet)
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" &
extending_org == "International Development Research Centre" &
is.na(amount))
)
# Restrict to active projects for Tableau
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(status %in% c("Active", "Unknown")) %>%
unique()
# Write to RDS
saveRDS(tableau_projects_tidied, "Outputs/tableau_projects_tidied.rds")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(tableau_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
