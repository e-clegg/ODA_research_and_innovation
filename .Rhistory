mutate(fcdo_programme_id = if_else((Funder == "Foreign, Commonwealth and Development Office"
& str_detect(iati_id, "-1-")),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
# Create vector of FCDO gov funder programme IATI IDs
gov_funder_iati_ids <- tableau_projects_tidied %>%
select(iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-")) %>%
unique()
# Join funder programme name to main dataset
tableau_projects_tidied <- tableau_projects_tidied %>%
left_join(gov_funder_programme_names, by = c("iati_id" = "funder_iati_id")) %>%
mutate(funder_programme = if_else(extending_org == "Wellcome Trust", subject, funder_programme))
# TEMPORARY ***
# Remove IDRC DHSC IATI data (this has been provided by spreadsheet)
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" &
extending_org == "International Development Research Centre" &
is.na(amount))
)
# TEMPORARY
# Remove Afghanistan projects (added Sep 21)
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(Country != "Afghanistan")
# Restrict to active projects for Tableau
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(status %in% c("Active", "Unknown")) %>%
unique()
# Write to RDS
saveRDS(tableau_projects_tidied, "Outputs/tableau_projects_tidied.rds")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(tableau_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
test_id <- "NE/V009591/1"
test_data <- filter(all_projects_tidied, str_detect(id, "NE/V009591/1"))
test_id <- "NE/V009591/1"
test_data <- filter(all_projects_tidied, str_detect(id, test_id)
expect_true(nrow(test_data) > 0)
})
test_id <- "NE/V009591/1"
test_data <- filter(all_projects_tidied, str_detect(id, test_id))
expect_true(nrow(test_data) > 0)
test_that("Project with known ID is present in Tableau dataset", {
test_id <- "NE/V009591/1"
test_data <- filter(all_projects_tidied, str_detect(id, test_id))
expect_true(nrow(test_data) > 0)
})
View(test_data)
country_types <- tableau_projects_tidied$country_type %>%
unique()
country_types <- tableau_projects_tidied$country_type %>%
unique() %>%
sort()
expect_equal(country_types, c(1,2,3))
table(tableau_projects_tidied$country_type)
test <- filter(tableau_projects_tidied, country_type == 3)
View(test)
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
Country %in% c("Unknown") | is.na(Country)) %>%
select(id) %>%
unique() %>%
mutate(exclude = 1)
View(unknown_country_projects)
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
Country %in% c("Unknown") | is.na(Country)) %>%
select(id) %>%
unique() %>%
mutate(exclude = 1)
# Identify projects that have both a populated and missing country field
# Restrict to just the populated fields (to keep)
duplicate_country_projects <- filter(tableau_projects,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(id) %>%
unique() %>%
filter(id %in% unknown_country_projects$id) %>%
mutate(keep = 1)
# Identify project with no country info whatsoever
tableau_projects_tidied <- tableau_projects %>%
left_join(unknown_country_projects, by = "id") %>%
left_join(duplicate_country_projects, by = "id") %>%
filter(keep == 1 |
exclude == 1 & !(id %in% duplicate_country_projects$id) |
is.na(keep) & is.na(exclude)) %>%
select(-keep, -exclude) %>%
mutate(Country = coalesce(Country, "Unknown"))
# Dedup
tableau_projects_tidied <- tableau_projects_tidied %>%
unique()
funders_actual <- tableau_projects_tidied$Funder %>%
unique() %>% sort()
print("example 1: genuine unknown - Defra")
test1 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$Country), "Unknown")
expect_equal(nrow(test1), 2)
print("example 2: known beneficiary, no known location")
test2 <- filter(tableau_projects_tidied, id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$Country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
print("example 3: known location, no known beneficiary")
test3 <- filter(tableau_projects_tidied, id == "101918") %>% arrange(country_type)
expect_equal(test3$Country, c("Unknown", "United Kingdom"))
View(test3)
test4 <- filter(tableau_projects_tidied, id == "ES/P010245/1")
View(test4)
test <- filter(all_projects_tidied, id =="ES/P010245/1")
View(test)
test1 <- filter(country_table_final, id =="ES/P010245/1")
country_table_final <- readRDS("Outputs/country_table_final.rds")
test1 <- filter(country_table_final, id =="ES/P010245/1")
test1 <- filter(country_table_final, project_id =="ES/P010245/1")
View(test1)
# Remove unecessary unknowns
identify_multiples <- country_table_final %>%
group_by(id, country_type) %>%
summarise(n = n()) %>%
filter(n > 1)
# Remove unecessary unknowns
identify_multiples <- country_table_final %>%
group_by(project_id, country_type) %>%
summarise(n = n()) %>%
filter(n > 1)
View(identify_multiples)
identify_unknowns_to_delete <- country_table_final %>%
filter(is.na(Country))
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown")
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown") %>%
left_join(identify_multiples, by = c("project_id", "country_type"))
# identify "unknown" records for projects in the dataset above
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown") %>%
left_join(identify_multiples, by = c("project_id", "country_type")) %>%
filter(!is.na(n))
View(identify_unknowns_to_delete)
print("example 4: known beneficiary and known location")
test4 <- filter(tableau_projects_tidied, id == "AH/R003491/1")
View(test4)
# Remove unecessary unknowns
country_table_final$row_id <- seq.int(nrow(tableau_projects))
# Remove unecessary unknowns
country_table_final$row_id <- seq.int(nrow(country_table_final))
# identify records with more than one country for a country_type
identify_multiples <- country_table_final %>%
group_by(project_id, country_type) %>%
summarise(n = n()) %>%
filter(n > 1)
# identify "unknown" records for projects in the dataset above
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown") %>%
left_join(identify_multiples, by = c("project_id", "country_type")) %>%
filter(!is.na(n))
View(identify_unknowns_to_delete)
# remove these "unknowns" from the country table
country_table_final <- country_table_final %>%
filter(!(row_id %in% identify_unknowns_to_delete$row_id))
# remove these "unknowns" from the country table
country_table_final <- country_table_final %>%
filter(!(row_id %in% identify_unknowns_to_delete$row_id)) %>%
select(-row_id)
print("example 4: known beneficiary and known location")
test4 <- filter(tableau_projects_tidied, id == "ES/P010245/1")
# Save datasets for testing
saveRDS(country_table, file = "Outputs/country_table.rds")
saveRDS(country_table_cleaned, file = "Outputs/country_table_cleaned.rds")
saveRDS(country_table_final, file = "Outputs/country_table_final.rds")
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
test <- filter(all_projects_tidied, id =="ES/P010245/1")
test1 <- filter(country_table_final, project_id =="ES/P010245/1")
View(test1)
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
Country %in% c("Unknown") | is.na(Country)) %>%
select(id) %>%
unique() %>%
mutate(exclude = 1)
unknown_country_projects <- filter(tableau_projects,
is.na(Country)) %>%
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
Country %in% c("Unknown") | is.na(Country)) %>%
select(id) %>%
unique() %>%
mutate(exclude = 1)
unknown_country_projects <- filter(tableau_projects,
is.na(Country))
View(unknown_country_projects)
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
unknown_country_projects <- filter(tableau_projects,
is.na(Country))
View(unknown_country_projects)
print("example 4: known beneficiary and known location")
test4 <- filter(tableau_projects_tidied, id == "NE/V009354/1")
View(test4)
test <- filter(country_table_final, project_id == "NE/V009354/1")
test <- filter(all_projects_tidied, project_id == "NE/V009354/1")
test <- filter(all_projects_tidied, id == "NE/V009354/1")
View(test)
# Read in collated dataset from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
org_names_and_locations <- readRDS("Outputs/org_names_and_locations.rds")
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
# remove special characters
mutate(title = str_replace_all(title, "‘|’", ""),
abstract = str_replace_all(abstract, "‘|’", "")) %>%
rename(project_id = id) %>%
unique()
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
funder_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(project_id = id, funder = Funder,
fund = Fund, funder_iati_id = iati_id) %>%
unique()
organisation_table <- org_names_and_locations
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = coalesce(recipient_country, "Unknown"),
location_country = paste0(coalesce(lead_org_country, "Unknown"), ", ", coalesce(partner_org_country, "Unknown"))) %>%
select(project_id = id, location_country, beneficiary_country) %>%
unique()
# Convert location vs. beneficiary country data to long format
country_table <- country_table %>%
gather(key = "country_type", value = "Country", -project_id) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
Country = str_to_lower(Country))
# Clean country names
country_table_cleaned <- country_table %>%
mutate(Country = str_replace_all(Country, "\\(the\\)", ""),  # remove (the)
Country = gsub("[()]", "", Country),                  # remove all parentheses
Country = str_replace_all(Country, "tanzania, united republic of", "tanzania"),
Country = str_replace_all(Country, "congo the democratic republic of the|drc|democratic republic of congo",
"democratic republic of the congo"),
Country = str_replace_all(Country, "china people's republic of", "china"),
Country = str_replace_all(Country, "democratic people's republic of korea", "democratic people’s republic of korea")) %>%
# standardise separators
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", Country))
# Convert dataset to long with one row per country entry
country_table_cleaned <- country_table_cleaned %>%
separate_rows(Country, sep = ",|;", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
unique()
# Further country cleaning
country_table_cleaned <- country_table_cleaned %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = case_when(
str_detect(Country, "uk|scotland|wales|united kingdom|england|ireland") ~ "united kingdom",
str_detect(Country, "usa|united states") ~ "united states",
Country == "us" ~ "united states",
str_detect(Country, "ivoire") ~ "ivory coast",
str_detect(Country, "viet") ~ "vietnam",
str_detect(Country, "lao") ~ "laos",
TRUE ~ Country)) %>%
unique()
# Replace country with "unknown" if not recognised against Tableau's accepted list
country_table_final <- country_table_cleaned %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "unknown")) %>%
mutate(Country = tools::toTitleCase(Country)) %>%
unique()
# Remove unecessary unknowns
country_table_final$row_id <- seq.int(nrow(country_table_final))
# identify records with more than one country for a country_type
identify_multiples <- country_table_final %>%
group_by(project_id, country_type) %>%
summarise(n = n()) %>%
filter(n > 1)
# identify "unknown" records for projects in the dataset above
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown") %>%
left_join(identify_multiples, by = c("project_id", "country_type")) %>%
filter(!is.na(n))
# remove these "unknowns" from the country table
country_table_final <- country_table_final %>%
filter(!(row_id %in% identify_unknowns_to_delete$row_id)) %>%
select(-row_id)
test <- filter(country_table_final, id == "NE/V009354/1")
test <- filter(country_table_cleaned, id == "NE/V009354/1")
test <- filter(country_table, id == "NE/V009354/1")
test <- filter(all_projects_tidied, id == "NE/V009354/1")
View(test)
test <- filter(all_projects_tidied, id == "NE/V009354/1")
View(test)
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = coalesce(recipient_country, "Unknown"),
location_country = paste0(coalesce(lead_org_country, "Unknown"), ", ", coalesce(partner_org_country, "Unknown")))
test <- filter(country_table, id == "NE/V009354/1")
View(test)
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = coalesce(recipient_country, "Unknown"),
location_country = paste0(coalesce(lead_org_country, "Unknown"), ", ", coalesce(partner_org_country, "Unknown"))) %>%
select(project_id = id, location_country, beneficiary_country)
test <- filter(country_table, id == "NE/V009354/1")
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = coalesce(recipient_country, "Unknown"),
location_country = paste0(coalesce(lead_org_country, "Unknown"), ", ", coalesce(partner_org_country, "Unknown")))
test <- filter(country_table, id == "NE/V009354/1")
View(test)
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = coalesce(recipient_country, "Unknown"),
location_country = paste0(coalesce(lead_org_country, "Unknown"), ", ", coalesce(partner_org_country, "Unknown"))) %>%
select(project_id = id, location_country, beneficiary_country) %>%
unique()
test <- filter(country_table, project_id == "NE/V009354/1")
View(test)
# Convert location vs. beneficiary country data to long format
country_table <- country_table %>%
gather(key = "country_type", value = "Country", -project_id) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
Country = str_to_lower(Country))
# Clean country names
country_table_cleaned <- country_table %>%
mutate(Country = str_replace_all(Country, "\\(the\\)", ""),  # remove (the)
Country = gsub("[()]", "", Country),                  # remove all parentheses
Country = str_replace_all(Country, "tanzania, united republic of", "tanzania"),
Country = str_replace_all(Country, "congo the democratic republic of the|drc|democratic republic of congo",
"democratic republic of the congo"),
Country = str_replace_all(Country, "china people's republic of", "china"),
Country = str_replace_all(Country, "democratic people's republic of korea", "democratic people’s republic of korea")) %>%
# standardise separators
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", Country))
# Convert dataset to long with one row per country entry
country_table_cleaned <- country_table_cleaned %>%
separate_rows(Country, sep = ",|;", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
unique()
# Further country cleaning
country_table_cleaned <- country_table_cleaned %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = case_when(
str_detect(Country, "uk|scotland|wales|united kingdom|england|ireland") ~ "united kingdom",
str_detect(Country, "usa|united states") ~ "united states",
Country == "us" ~ "united states",
str_detect(Country, "ivoire") ~ "ivory coast",
str_detect(Country, "viet") ~ "vietnam",
str_detect(Country, "lao") ~ "laos",
TRUE ~ Country)) %>%
unique()
# Replace country with "unknown" if not recognised against Tableau's accepted list
country_table_final <- country_table_cleaned %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "unknown")) %>%
mutate(Country = tools::toTitleCase(Country)) %>%
unique()
# Remove unecessary unknowns
country_table_final$row_id <- seq.int(nrow(country_table_final))
# identify records with more than one country for a country_type
identify_multiples <- country_table_final %>%
group_by(project_id, country_type) %>%
summarise(n = n()) %>%
filter(n > 1)
# identify "unknown" records for projects in the dataset above
identify_unknowns_to_delete <- country_table_final %>%
filter(Country == "Unknown") %>%
left_join(identify_multiples, by = c("project_id", "country_type")) %>%
filter(!is.na(n))
# remove these "unknowns" from the country table
country_table_final <- country_table_final %>%
filter(!(row_id %in% identify_unknowns_to_delete$row_id)) %>%
select(-row_id)
test <- filter(country_table_final, project_id == "NE/V009354/1")
View(test)
# Save datasets for testing
saveRDS(country_table, file = "Outputs/country_table.rds")
saveRDS(country_table_cleaned, file = "Outputs/country_table_cleaned.rds")
saveRDS(country_table_final, file = "Outputs/country_table_final.rds")
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
unknown_country_projects <- filter(tableau_projects,
is.na(Country))
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects, Country == "Unknown") %>%
select(id) %>%
unique() %>%
mutate(exclude = 1)
# Identify projects that have both a populated and missing country field
# Restrict to just the populated fields (to keep)
duplicate_country_projects <- filter(tableau_projects, Country == "Unknown") %>%
select(id) %>%
unique() %>%
filter(id %in% unknown_country_projects$id) %>%
mutate(keep = 1)
# Identify project with no country info whatsoever
tableau_projects_tidied <- tableau_projects %>%
left_join(unknown_country_projects, by = "id") %>%
left_join(duplicate_country_projects, by = "id") %>%
filter(keep == 1 |
exclude == 1 & !(id %in% duplicate_country_projects$id) |
is.na(keep) & is.na(exclude)) %>%
select(-keep, -exclude) %>%
mutate(Country = coalesce(Country, "Unknown"))
# Dedup
tableau_projects_tidied <- tableau_projects_tidied %>%
unique()
# Add FCDO programme ID to dataset
tableau_projects_tidied <- tableau_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else((Funder == "Foreign, Commonwealth and Development Office"
& str_detect(iati_id, "-1-")),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
# Create vector of FCDO gov funder programme IATI IDs
gov_funder_iati_ids <- tableau_projects_tidied %>%
select(iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-")) %>%
unique()
# Join funder programme name to main dataset
tableau_projects_tidied <- tableau_projects_tidied %>%
left_join(gov_funder_programme_names, by = c("iati_id" = "funder_iati_id")) %>%
mutate(funder_programme = if_else(extending_org == "Wellcome Trust", subject, funder_programme))
# TEMPORARY ***
# Remove IDRC DHSC IATI data (this has been provided by spreadsheet)
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" &
extending_org == "International Development Research Centre" &
is.na(amount))
)
# TEMPORARY
# Remove Afghanistan projects (added Sep 21)
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(Country != "Afghanistan")
# Restrict to active projects for Tableau
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(status %in% c("Active", "Unknown")) %>%
unique()
print("example 1: genuine unknown - Defra")
test1 <- filter(tableau_projects_tidied, str_detect(id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$Country), "Unknown")
expect_equal(nrow(test1), 2)
print("example 2: known beneficiary, no known location")
test2 <- filter(tableau_projects_tidied, id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$Country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
print("example 3: known location, no known beneficiary")
test3 <- filter(tableau_projects_tidied, id == "101918") %>% arrange(country_type)
expect_equal(test3$Country, c("Unknown", "United Kingdom"))
test <- filter(country_table_final, project_id == "101918")
View(test)
test <- filter(project_table, project_id == "101918")
View(test)
test3 <- filter(tableau_projects_tidied, id == "BB/T012552/1") %>% arrange(country_type)
View(test3)
test3 <- filter(tableau_projects_tidied, id == "BB/R019819/1") %>% arrange(country_type)
View(test3)
expect_equal(test3$Country, c("Unknown", "United Kingdom"))
expect_equal(nrow(test3), 2)
print("example 4: known beneficiary and known location")
test4 <- filter(tableau_projects_tidied, id == "ES/P010245/1")
print("example 1: genuine unknown - Defra")
test1 <- filter(country_table_final, str_detect(project_id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$Country), "Unknown")
expect_equal(nrow(test1), 2)
print("example 2: known beneficiary, no known location")
test2 <- filter(country_table_final, project_id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$Country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
print("example 3: known location, no known beneficiary")
test3 <- filter(country_table_final, project_id == "BB/R019819/1") %>% arrange(country_type)
expect_equal(test3$Country, c("Unknown", "United Kingdom"))
expect_equal(nrow(test3), 2)
print("example 4: known beneficiary and known location")
test4 <- filter(country_table_final, project_id == "ES/P010245/1")
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
# Write to RDS
saveRDS(tableau_projects_tidied, "Outputs/tableau_projects_tidied.rds")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(tableau_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
