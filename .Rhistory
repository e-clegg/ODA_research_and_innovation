# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_country_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_country_data$person_current_org_name) > 0) {
# Keep staff org names and countries to output
org_table <- staff_org_country_data %>%
mutate(project_id = projects[["grantReference"]],
organisation_role = 2) %>%
select(project_id,
organisation_role,
organisation_name = person_current_org_name,
organisation_country = person_current_org_country)
# Collapse org names and locations
staff_org_names <- staff_org_country_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_country_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = NA_character_,
partner_org_country = NA_character_)
}
# Write lead org name and country to file
org_table <- org_table %>%
rbind(select(project_data,
project_id = gtr_id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds,
extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country,
status, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(list(project_data, org_table))
}
# Join GCRF/Newton project IDs to other ODA IDs (from spreadsheet)
ukri_projects_ids_full <- ukri_projects_by_fund %>%
rbind(ukri_ooda_projects_ids)
ukri_projects_by_id <- readRDS("Outputs/ukri_projects_by_id.rds")
# Join to fund and funder info from original list
ukri_projects_by_id_with_id <- ukri_projects_by_id %>%
left_join(select(ukri_projects_ids_full,
iati_id = iati_identifier, Fund, Funder, gtr_id), by = "gtr_id")
# See which awards from input list have not been found
missing_awards <- select(ukri_projects_ids_full, gtr_id) %>%
left_join(select(ukri_projects_by_id_with_id, gtr_id, title), by = "gtr_id") %>%
filter(is.na(title)) %>%
unique()
# Convert all factor fields to character
ukri_projects_final <- data.frame(lapply(ukri_projects_by_id_with_id, as.character), stringsAsFactors=FALSE)
# Output final dataset
ukri_projects_final <- ukri_projects_final %>%
rename(start_date = fund.start,
end_date = fund.end,
id = gtr_id,
) %>%
mutate(subject = NA_character_,
amount = as.numeric(amount),
period_start = NA_character_,
period_end = NA_character_,
currency = "GBP",
Fund = if_else(Fund == "GCRF", "Global Challenges Research Fund (GCRF)",
if_else(Fund == "Newton", "Newton Fund", Fund)),
last_updated = as.Date(last_updated)) %>%
select(id,
title,
abstract,
start_date,
end_date,
amount,
period_start,
period_end,
currency,
extending_org,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country,
iati_id,
Fund,
Funder,
subject,
status,
last_updated) %>%
unique()
# Add GtR link to projects
ukri_projects_final <- ukri_projects_final %>%
mutate(link = paste0("https://gtr.ukri.org/projects?ref=", id))
ukri_projects_final <- ukri_projects_final %>%
group_by(across(c(-partner_org_name))) %>%
slice(1) %>%
ungroup()
# Add on beneficiary countries from IATI
ukri_projects_with_countries <- ukri_projects_final %>%
left_join(ukri_iati_projects, by = c("id" = "gtr_id")) %>%
select(-iati_identifier)
# Save as R file (to read back in if needed)
saveRDS(ukri_projects_with_countries, file = "Outputs/ukri_projects_with_countries.rds")
org_names_and_locations_2 <- readRDS(file = "Outputs/org_names_and_locations_2.rds")
org_names_and_locations_1 <- readRDS(file = "Outputs/org_names_and_locations_1.rds")
# Save implementing orgs with country to file
org_names_and_locations_1 <- activity_list_unnest_4 %>%
select(project_id = iati_identifier,
organisation_name = text,
organisation_country = org_country) %>%
mutate(organisation_role = 2)
activity_list_unnest_5 %>%
select(project_id = iati_identifier,
organisation_name = reporting_org,
organisation_country = reporting_org_country) %>%
mutate(organisation_role = 1) %>% # leading
unique()
# 5) Unlist publishing org
activity_list_unnest_5 <- partner_activity_comb %>%
filter(lengths(reporting_org.narrative) != 0) %>%
unnest(cols = reporting_org.narrative,
keep_empty = TRUE) %>%
select(iati_identifier, reporting_org_ref = reporting_org.ref,
reporting_org_type = reporting_org.type.name,
reporting_org = text) %>%
# take top (English) name in cases of different languages
group_by(iati_identifier, reporting_org_ref, reporting_org_type) %>%
slice(1) %>%
unique() %>%
ungroup()
# Lookup country
activity_list_unnest_5 <- activity_list_unnest_5 %>%
mutate(country_code = if_else(!is.na(reporting_org_ref) & substr(reporting_org_ref,3,3) == "-",
substr(reporting_org_ref,1,2), ""),
org_country_iati = map(country_code, country_code_to_name),
org_country_other = map(reporting_org, org_country_lookup)) %>%
mutate(org_country_iati = unlist(org_country_iati),
org_country_other = unlist(org_country_other)) %>%
mutate(reporting_org_country = coalesce(org_country_iati, org_country_other)) %>%
select(-org_country_iati, -org_country_other)
# Add on to org file to save
org_names_and_locations_1 <- org_names_and_locations_1 %>%
rbind(activity_list_unnest_5 %>%
select(project_id = iati_identifier,
organisation_name = reporting_org,
organisation_country = reporting_org_country) %>%
mutate(organisation_role = 1) %>% # leading
unique())
# Save org names and countries to file
saveRDS(org_names_and_locations_1, file = "Outputs/org_names_and_locations_1.rds")
org_names_and_locations_2 <- readRDS(file = "Outputs/org_names_and_locations_2.rds")
# Define URL to extract ODA projects
path <- paste0("https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)")
# Extract data from the NIHR API
request <- GET(url = path)
request$status_code # 200 = success
# Convert to text and read from JSON
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Extract dataframe
nihr_projects <- response$records
# Remove unneeded columns
nihr_projects <- nihr_projects %>%
select(-1, -2)
# Remove "field." from column names
names(nihr_projects) <- gsub(pattern = "fields.", replacement = "", x = names(nihr_projects))
# Select order of columns
nihr_projects_final <- nihr_projects %>%
mutate(id = project_id,
Funder = "Department of Health and Social Care",
Fund = "Global Health Research - Programmes",
recipient_country = NA_character_,
lead_org_country = ctrynm,
iati_id = NA_character_,
subject = programme,
currency = "GBP",
status = if_else(project_status %in% c("Active", "Contracted"), "Active",
if_else(project_status %in% c("Complete"), "Closed",
if_else(project_status %in% c("Discontinued"), "Cancelled", "Unknown"))),
period_start = NA_character_,
period_end = NA_character_,
partner_org_name = NA_character_,
partner_org_country = NA_character_,
extending_org = "NIHR",
last_updated = as.Date(record_timestamp)) %>%
select(id,
title = project_title,
abstract = scientific_abstract,
start_date, end_date,
amount = award_amount_from_dh,
period_start,
period_end,
currency,
extending_org,
lead_org_name = contracted_organisation,
lead_org_country,
partner_org_name, partner_org_country,
iati_id,
Fund,
Funder,
recipient_country,
subject,
status,
last_updated)
# Add NIHR link to awards
nihr_projects_final <- nihr_projects_final %>%
mutate(link = paste0("https://fundingawards.nihr.ac.uk/award/", id))
# Write org names and countries to file
org_names_and_locations_3 <- nihr_projects_final %>%
select(project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1)
# Save as R file (to read back in if needed)
saveRDS(nihr_projects_final, file = "Outputs/nihr_projects_final.rds")
rm(nihr_projects)
rm(request)
rm(response)
# Add missing fields and format Funder/Fund field
wellcome_grants_formatted <- wellcome_grants %>%
mutate(status = if_else(Sys.Date() <= `Planned Dates: End Date`, "Active", "Closed"),
extending_org = "Wellcome Trust",
currency = "GBP",
partner_org_name = `Other Implementing Organisations`,
partner_org_country = `Research Location Countries`,
recipient_country = NA_character_,
period_start = NA_character_,
period_end = NA_character_,
iati_id = NA_character_,
Funder = if_else(str_detect(`CoFunders`, "National Institute for Health Research"),
"Department of Health and Social Care", `CoFunders`),
Fund = if_else(Funder == "Department of Health and Social Care",
"Global Health Research - Partnerships", "FCDO Research - Programmes"),
last_updated = quarter_end_date) %>%
filter(`ODA Funding` > 0)
# Select desired variables
wellcome_grants_formatted <- wellcome_grants_formatted %>%
select(id = `InternalID`,
title = Title,
abstract = Description,
start_date = `Planned Dates: Start Date`,
end_date = `Planned Dates: End Date`,
amount = `ODA Funding`,
period_start,
period_end,
currency,
extending_org,
lead_org_name = `Recipient Org: Name`,
lead_org_country = `Recipient Org: Country`,
partner_org_name,
partner_org_country,
iati_id,
Fund,
Funder,
recipient_country,
subject = `PartnershipName`,
status,
last_updated
)
# Format date fields for merging
wellcome_grants_final <- wellcome_grants_formatted %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
link = "https://wellcome.org/grant-funding/funded-people-and-projects")
# Write lead org names and countries to file
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(wellcome_grants_final,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Write partner org names and countries to file (where simple to do)
wellcome_partners <- wellcome_grants_final %>%
select(id, partner_org_name, partner_org_country) %>%
# Exclude missings, multiple and miscellaneous partners
filter(!is.na(partner_org_name),
!str_detect(partner_org_name, "Misc")) %>%
# Separate rows with multiple partners
separate_rows(partner_org_name, sep = ",", convert = FALSE) %>%
mutate(partner_org_name = str_trim(partner_org_name)) %>%
mutate(new_country = map(partner_org_name, org_country_lookup)) %>%
unnest(cols = new_country) %>%
mutate(partner_org_country = coalesce(new_country, partner_org_country)) %>%
filter(!str_detect(partner_org_country, ",")) %>%
select(-new_country)
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(wellcome_partners,
project_id = id,
organisation_name = partner_org_name,
organisation_country = partner_org_country) %>%
mutate(organisation_role = 2))
rm(wellcome_grants)
rm(wellcome_grants_formatted)
# Detect all Excel files in Data folder
path = "Inputs//IATI returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GBP"),
period_start = NA_character_,
period_end = NA_character_,
subject = NA_character_,
status = coalesce(if_else(end_date >= Sys.Date(), "Active", "Closed"), "Unknown"),
last_updated = quarter_end_date
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`, -`FCDO programme - name`,
-`FCDO programme - IATI ID`, -Link)
# Save as R file (to read back in if needed)
saveRDS(collated_spreadsheet_data, file = "Outputs/collated_spreadsheet_data.rds")
# Write lead org names and countries to file
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(collated_spreadsheet_data,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Write partner org names and countries to file (where simple to do)
spreadsheet_partners <- collated_spreadsheet_data %>%
select(id, partner_org_name, partner_org_country) %>%
# Exclude missings, multiple and miscellaneous partners
filter(!is.na(partner_org_name),
!str_detect(partner_org_name, ",|;"),
!str_detect(partner_org_country, ",|;|N/A"))
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(spreadsheet_partners,
project_id = id,
organisation_name = partner_org_name,
organisation_country = partner_org_country) %>%
mutate(organisation_role = 2))
rm(partner_spreadsheet_data)
rm(data_list)
rm(file_list)
# Reformat to match other datasetS
roda_extract_gcrf_final <- roda_extract_gcrf %>%
rename(id = `RODA identifier`,
abstract = Description,
title = Title,
amount = Amount,
recipient_country = `Recipient country`,
extending_org = `Delivery partner`,
lead_org_name = `Lead Organisation`
) %>%
mutate(Fund = "Global Challenges Research Fund (GCRF)",
Funder = "Department for Business, Energy and Industrial Strategy",
start_date = as.character(as.Date(coalesce(`Actual start date`, `Planned start date`), "%d %B %Y")),
end_date = as.character(as.Date(coalesce(`Actual end date`, `Planned end date`), "%d %B %Y")),
lead_org_country = map(lead_org_name, org_country_lookup),
partner_org_name = NA_character_,
partner_org_country = NA_character_,
iati_id = NA_character_,
currency = "GBP",
status = if_else(Status %in% c("Spend in progress", "Agreement in place", "Delivery", "Finalisation"), "Active",
if_else(Status %in% c("Completed"), "Closed",
if_else(Status %in% c("Cancelled"), "Cancelled", "Unknown"))),
period_start = NA_character_,
period_end = NA_character_,
subject = NA_character_,
last_updated = quarter_end_date,
link = NA_character_
) %>%
unnest(cols = lead_org_country) %>%
# suppress display of active project end dates that have passed
mutate(end_date = if_else(status == "Active" & Sys.Date() <= end_date, end_date, NA_character_)) %>%
# remove unecessary variables
select(-Level, -`Recipient region`, -`Planned start date`, -`Actual start date`,  -`Planned end date`,
-`Actual end date`, -Status)
roda_extract_newton_final <- roda_extract_newton %>%
rename(id = `RODA ID`,
title = Title,
abstract = Description,
amount = Amount,
recipient_country = `Recipient country`,
extending_org = `Delivery partner`,
lead_org_name = `Lead Organisation`,
partner_org_name = `Partner organisations`) %>%
mutate(Fund = "Newton Fund",
Funder = "Department for Business, Energy and Industrial Strategy",
lead_org_country = map(lead_org_name, org_country_lookup),
partner_org_country = NA_character_,
iati_id = NA_character_,
link = NA_character_,
start_date = as.character(as.Date(coalesce(`Actual start date`, `Planned start date`), "%d %B %Y")),
end_date = as.character(as.Date(coalesce(`Actual end date`, `Planned end date`), "%d %B %Y")),
currency = "GBP",
status = if_else(Status %in% c("Spend in progress", "Agreement in place", "Delivery", "Finalisation"), "Active",
if_else(Status %in% c("Completed"), "Closed",
if_else(Status %in% c("Cancelled"), "Cancelled", "Unknown"))),
period_start = NA_character_,
period_end = NA_character_,
subject = NA_character_,
last_updated = quarter_end_date) %>%
unnest(cols = lead_org_country) %>%
# suppress display of end dates that have passed
mutate(end_date = if_else(Sys.Date() <= end_date, end_date, NA_character_)) %>%
select(-Level, -`Recipient region`, -`Planned start date`, -Status,
-`Planned end date`, -`Actual start date`, -`Actual end date`)
# Write lead org names and countries to file
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(roda_extract_gcrf_final,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1)) %>%
rbind(select(roda_extract_newton_final,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
saveRDS(org_names_and_locations_3, file = "Outputs/org_names_and_locations_3.rds")
# Save org names and countries to file
org_names_and_locations <- rbind(org_names_and_locations_1, org_names_and_locations_2,
org_names_and_locations_3) %>%
mutate(organisation_name = str_trim(organisation_name)) %>%
filter(!is.na(organisation_name)) %>%
unique()
saveRDS(org_names_and_locations, file = "Outputs/org_names_and_locations.rds")
organisation_table <- org_names_and_locations
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Organisation]")
dbAppendTable(con_live, "Organisation", organisation_table, row.names = NULL)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Project]")
project_first_10 <- dbFetch(recordSet, n = -1)
View(project_table_extract)
View(recordSet)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
# Disconnect from database
dbDisconnect(con_live)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
funder_first_10 <- dbFetch(recordSet, n = -1)
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
funder_first_10 <- dbFetch(recordSet, n = -1)
View(funder_first_10)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Organisation]")
org_first_10 <- dbFetch(recordSet, n = -1)
View(org_first_10)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Country]")
country_first_10 <- dbFetch(recordSet, n = -1)
View(country_first_10)
recordSet1 <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Project]")
recordSet2 <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
View(recordSet1)
View(recordSet2)
project_first_10 <- dbFetch(recordSet1, n = -1)
funder_first_10 <- dbFetch(recordSet2, n = -1)
