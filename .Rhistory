transaction_list <- data.frame()
# Run extraction, stopping when no new transactions are returned
for (id in no_country_info$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(id, "-", page))
x <- nrow(transaction_list)
transaction_list <- transactions_extract(id, page, transaction_list)
page <- page + 1
y <- nrow(transaction_list)
new_rows = y - x
}
}
transactions_unnest <- transaction_list %>%
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -recipient_countries, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# remove transactions without a country
filter(!is.na(recipient_country)) %>%
# summarise countries
select(iati_identifier, recipient_country) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(recipient_country = paste(coalesce(recipient_country, ""), collapse = ", "))
# Join on transactions country info to rest of dataset
activity_list_unnest_2_comp <- activity_list_unnest_2 %>%
left_join(transactions_unnest, by = "iati_identifier") %>%
mutate(recipient_country = coalesce(country_name, recipient_country)) %>%
select(-country_name)
# 3) Unlist sectors
activity_list_unnest_3 <- partner_activity_comb %>%
unnest(cols = sector,
keep_empty = TRUE) %>%
select(iati_identifier, sector.code, sector.name, percentage) %>%
mutate(percentage = as.numeric(percentage)) %>%
filter(sector.name != "Vocabulary 99 or 98") %>%
group_by(iati_identifier) %>%
unique()
# Summarise all sector descriptions for each activity
activity_list_unnest_3 <- activity_list_unnest_3 %>%
summarise(sector_code = paste(coalesce(sector.code, ""), collapse = ", "),
sector_name = paste(coalesce(sector.name, ""), collapse = ", "))
# 4) Unlist implementing organisations
activity_list_unnest_4 <- partner_activity_comb %>%
unnest(cols = participating_org,
keep_empty = TRUE) %>%
select(iati_identifier, role.name, narrative, ref) %>%
unnest(cols = narrative,
keep_empty = TRUE) %>%
filter(role.name == "Implementing") %>%
filter(!(text %in% c("Centre de recherches pour le dÃ©veloppement international",
"Centro Internacional de Investigaciones para el Desarrollo"))) %>%
#filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
unique() %>%
# Add simple country locations based on IATI references
mutate(partner_country = case_when(
str_detect(ref, "GB") ~ "United Kingdom",
str_detect(ref, "US") ~ "United States",
str_detect(ref, "NL") ~ "Netherlands",
str_detect(ref, "CA-") ~ "Canada",
str_detect(ref, "IN-") ~ "India",
str_detect(ref, "KE-") ~ "Kenya",
str_detect(ref, "ZA-") ~ "South Africa",
))
country_match <- activity_list_unnest_4 %>%
left_join(grid_institutes, by = c("text" = "name")) %>%
left_join(grid_addresses, by = "grid_id") %>%
group_by(iati_identifier, text, ref) %>%
top_n(1) %>%
mutate(partner_country = if_else(text == "International Development Research Centre", "Canada",
if_else(text == "CABI", "United Kingdom", partner_country))) %>%
mutate(partner_country = coalesce(partner_country, country)) %>%
select(iati_identifier, text, ref, partner_country, grid_id) %>%
ungroup()
# Extract countries mentioned in the partner organisation name
countries <- countrycode::codelist$country.name.en
countries_string <- paste0(countries, collapse = "|")
country_match_2 <- activity_list_unnest_4 %>%
mutate(countries = str_extract_all(text, countries_string)) %>%
unnest(cols = countries) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(countries = paste(coalesce(countries, ""), collapse = ", "))
activity_list_unnest_4_countries <- country_match %>%
select(iati_identifier, partner_country) %>%
unique() %>%
filter(!is.na(partner_country)) %>%
group_by(iati_identifier) %>%
summarise(partner_country = paste(partner_country, collapse = ", "))
activity_list_unnest_4_partners <- activity_list_unnest_4 %>%
select(iati_identifier, text, role.name, ref) %>%
unique() %>%
filter(!is.na(text)) %>%
group_by(iati_identifier) %>%
summarise(partner = paste(coalesce(text, ""), collapse = ", "),
partner_role = paste(coalesce(role.name, ""), collapse = ", "),
partner_ref = paste(coalesce(ref, ""), collapse = ", "))
activity_list_unnest_4 <- activity_list_unnest_4_partners %>%
left_join(activity_list_unnest_4_countries, by = "iati_identifier") %>%
left_join(country_match_2, by = "iati_identifier") %>%
mutate(partner_country = coalesce(partner_country, countries)) %>%
select(-countries)
# 4) Unlist extending organisations
activity_list_unnest_5 <- partner_activity_comb %>%
unnest(cols = participating_org,
keep_empty = TRUE) %>%
select(iati_identifier, role.name, narrative) %>%
unnest(cols = narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
filter(role.name %in% c("Extending")) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(extending_org = paste(coalesce(text, ""), collapse = ", "))
# 5) Unlist reporting department
activity_list_unnest_6 <- partner_activity_comb %>%
unnest(cols = reporting_org.narrative,
keep_empty = TRUE) %>%
select(iati_identifier, reporting_org_ref = reporting_org.ref,
reporting_org_type = reporting_org.type.name,
reporting_org = text) %>%
filter(!(reporting_org_ref == "XM-DAC-301-2") | reporting_org == "	International Development Research Centre") %>%
unique()
# 6) Unlist and aggregate committments
activity_list_unnest_7 <- partner_activity_comb %>%
unnest(cols = budget,
keep_empty = TRUE) %>%
#  filter(value.date >= "2015-04-01" & value.date <= "2020-03-31") %>%   # restrict time window for spend
select(iati_identifier,
budget_status = status.name,
amount = value.value,
currency = value.currency.code,
period_start,
period_end) %>%
# take first record for activities with multiple budgets for the same period
group_by(iati_identifier, budget_status, currency, period_start, period_end) %>%
top_n(n = 1) %>%
# remove unpopulated budget status records
filter(!is.na(budget_status)) %>%
ungroup()
# Find activities with multiple budgets for the same period
multiple_budgets <- activity_list_unnest_7 %>%
group_by(iati_identifier, period_start, period_end) %>%
summarise(count = n()) %>%
filter (count > 1)
# Keep only the committed budget in these cases
activity_list_unnest_7_dedup <- activity_list_unnest_7 %>%
filter(!(iati_identifier %in% multiple_budgets$iati_identifier) |
budget_status == "Committed") %>%
group_by(iati_identifier, currency) %>%     # budget_status removed
summarise(period_start = min(period_start),
period_end = max(period_end),
amount = sum(amount))
# 8) Unlist start/end dates
activity_list_unnest_8 <- partner_activity_comb %>%
unnest(cols = activity_date,
keep_empty = TRUE) %>%
select(iati_identifier,
date = iso_date,
date_type = type.name) %>%
# take the first date in cases of two of the same time
group_by(iati_identifier, date_type) %>%
slice(1) %>%
spread(key = date_type, value = date) %>%
mutate(start_date = coalesce(`Actual start`, `Planned start`),
end_date = coalesce(`Actual end`, `Planned End`)) %>%
select(iati_identifier, start_date, end_date)
# Join unnested info to original data
activity_list <- activity_list_base %>%
left_join(activity_list_unnest_1, by = "iati_identifier") %>%
left_join(activity_list_unnest_2_comp, by = "iati_identifier") %>%
left_join(activity_list_unnest_3, by = "iati_identifier") %>%
left_join(activity_list_unnest_4, by = "iati_identifier") %>%
left_join(activity_list_unnest_5, by = "iati_identifier") %>%
left_join(activity_list_unnest_6, by = "iati_identifier") %>%
left_join(activity_list_unnest_7_dedup, by = "iati_identifier") %>%
left_join(activity_list_unnest_8, by = "iati_identifier")
# Assign a reporting org if the reporting partner is implementing
# the activity themselves
activity_list <- activity_list %>%
mutate(reporting_org = coalesce(reporting_org, reporting_org_ref, extending_org, gov_funder))
# Reorder columns and add date of refresh
activity_list <- activity_list %>%
select(reporting_org_ref, reporting_org_type, reporting_org, iati_identifier,
hierarchy, activity_status, flow_type, fcdo_activity_id,
activity_title, General, Objectives, start_date, end_date,
recipient_country, sector_code, sector_name,
partner, partner_role, partner_ref, partner_country, gov_funder,
extending_org, fund,
amount, period_start, period_end, currency) %>%
unique() %>%
mutate(refresh_date = Sys.Date())
# Add Fund label
activity_list <- activity_list %>%
select(-extending_org) %>%
left_join(select(iati_activity_ids, gov_funder, iati_id, funding_iati_id),
by = c("iati_identifier" = "iati_id", "gov_funder")) %>%
mutate(programme_id = coalesce(funding_iati_id, fcdo_activity_id)) %>%
mutate(fund = coalesce(fund, "FCDO fully funded"),
gov_funder = coalesce(gov_funder, "Foreign, Commonwealth and Development Office"))
activity_list <- activity_list %>%
rename(activity_description = General)
# Remove WHO non-research/innovation activities
activity_list <- activity_list %>%
filter(is.na(reporting_org_ref) |
!(reporting_org_ref == "XM-DAC-928") |
str_detect(activity_title, "research|innovation"))
# Add missing FCDO activity IDs
activity_list <- activity_list %>%
mutate(programme_id = case_when(str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CLARE") ~ "GB-GOV-1-300126",
str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CARIAA") ~ "GB-1-203506",
str_detect(iati_identifier, "XI-IATI-AGR") ~ "GB-1-203052",
reporting_org_ref == "XM-DAC-47015" & str_detect(iati_identifier, "Windows1and2") ~ "GB-1-204764",
TRUE ~ programme_id))
# Save to Rdata file
saveRDS(activity_list, file = "Outputs/partner_activity_list.rds")
# Check specific partner
test1 <- filter(activity_list, str_detect(reporting_org, "Elrha"))
View(test1)
View(transactions_unnest)
# Join on transactions country info to rest of dataset
activity_list_unnest_2_comp <- activity_list_unnest_2 %>%
left_join(transactions_unnest, by = "iati_identifier") %>%
mutate(recipient_country = coalesce(recipient_country, country_name)) %>%
select(-country_name)
# Join unnested info to original data
activity_list <- activity_list_base %>%
left_join(activity_list_unnest_1, by = "iati_identifier") %>%
left_join(activity_list_unnest_2_comp, by = "iati_identifier") %>%
left_join(activity_list_unnest_3, by = "iati_identifier") %>%
left_join(activity_list_unnest_4, by = "iati_identifier") %>%
left_join(activity_list_unnest_5, by = "iati_identifier") %>%
left_join(activity_list_unnest_6, by = "iati_identifier") %>%
left_join(activity_list_unnest_7_dedup, by = "iati_identifier") %>%
left_join(activity_list_unnest_8, by = "iati_identifier")
# Assign a reporting org if the reporting partner is implementing
# the activity themselves
activity_list <- activity_list %>%
mutate(reporting_org = coalesce(reporting_org, reporting_org_ref, extending_org, gov_funder))
# Reorder columns and add date of refresh
activity_list <- activity_list %>%
select(reporting_org_ref, reporting_org_type, reporting_org, iati_identifier,
hierarchy, activity_status, flow_type, fcdo_activity_id,
activity_title, General, Objectives, start_date, end_date,
recipient_country, sector_code, sector_name,
partner, partner_role, partner_ref, partner_country, gov_funder,
extending_org, fund,
amount, period_start, period_end, currency) %>%
unique() %>%
mutate(refresh_date = Sys.Date())
# Add Fund label
activity_list <- activity_list %>%
select(-extending_org) %>%
left_join(select(iati_activity_ids, gov_funder, iati_id, funding_iati_id),
by = c("iati_identifier" = "iati_id", "gov_funder")) %>%
mutate(programme_id = coalesce(funding_iati_id, fcdo_activity_id)) %>%
mutate(fund = coalesce(fund, "FCDO fully funded"),
gov_funder = coalesce(gov_funder, "Foreign, Commonwealth and Development Office"))
activity_list <- activity_list %>%
rename(activity_description = General)
# Remove WHO non-research/innovation activities
activity_list <- activity_list %>%
filter(is.na(reporting_org_ref) |
!(reporting_org_ref == "XM-DAC-928") |
str_detect(activity_title, "research|innovation"))
# Add missing FCDO activity IDs
activity_list <- activity_list %>%
mutate(programme_id = case_when(str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CLARE") ~ "GB-GOV-1-300126",
str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CARIAA") ~ "GB-1-203506",
str_detect(iati_identifier, "XI-IATI-AGR") ~ "GB-1-203052",
reporting_org_ref == "XM-DAC-47015" & str_detect(iati_identifier, "Windows1and2") ~ "GB-1-204764",
TRUE ~ programme_id))
# Save to Rdata file
saveRDS(activity_list, file = "Outputs/partner_activity_list.rds")
# Check funds, funders
table(activity_list$fund)
# Join unnested info to original data
activity_list <- activity_list_base %>%
left_join(activity_list_unnest_1, by = "iati_identifier") %>%
left_join(activity_list_unnest_2_comp, by = "iati_identifier") %>%
left_join(activity_list_unnest_3, by = "iati_identifier") %>%
left_join(activity_list_unnest_4, by = "iati_identifier") %>%
left_join(activity_list_unnest_5, by = "iati_identifier") %>%
left_join(activity_list_unnest_6, by = "iati_identifier") %>%
left_join(activity_list_unnest_7_dedup, by = "iati_identifier") %>%
left_join(activity_list_unnest_8, by = "iati_identifier")
# Assign a reporting org if the reporting partner is implementing
# the activity themselves
activity_list <- activity_list %>%
mutate(reporting_org = coalesce(reporting_org, reporting_org_ref, extending_org, gov_funder))
# Reorder columns and add date of refresh
activity_list <- activity_list %>%
select(reporting_org_ref, reporting_org_type, reporting_org, iati_identifier,
hierarchy, activity_status, flow_type, fcdo_activity_id,
activity_title, General, Objectives, start_date, end_date,
recipient_country, sector_code, sector_name,
partner, partner_role, partner_ref, partner_country, gov_funder,
extending_org, fund,
amount, period_start, period_end, currency) %>%
unique() %>%
mutate(refresh_date = Sys.Date())
# Add Fund label
activity_list <- activity_list %>%
select(-extending_org) %>%
left_join(select(iati_activity_ids, gov_funder, iati_id, funding_iati_id),
by = c("iati_identifier" = "iati_id", "gov_funder")) %>%
mutate(programme_id = coalesce(funding_iati_id, fcdo_activity_id)) %>%
mutate(fund = coalesce(fund, "FCDO Research - Programmes"),
gov_funder = coalesce(gov_funder, "Foreign, Commonwealth and Development Office"))
activity_list <- activity_list %>%
rename(activity_description = General)
# Remove WHO non-research/innovation activities
activity_list <- activity_list %>%
filter(is.na(reporting_org_ref) |
!(reporting_org_ref == "XM-DAC-928") |
str_detect(activity_title, "research|innovation"))
# Add missing FCDO activity IDs
activity_list <- activity_list %>%
mutate(programme_id = case_when(str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CLARE") ~ "GB-GOV-1-300126",
str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CARIAA") ~ "GB-1-203506",
str_detect(iati_identifier, "XI-IATI-AGR") ~ "GB-1-203052",
reporting_org_ref == "XM-DAC-47015" & str_detect(iati_identifier, "Windows1and2") ~ "GB-1-204764",
TRUE ~ programme_id))
# Save to Rdata file
saveRDS(activity_list, file = "Outputs/partner_activity_list.rds")
# Check funds, funders
table(activity_list$fund)
activity_list <- activity_list %>%
mutate(fund = if_else(fund == "FCDO fully funded", "FCDO Research - Partnerships", fund))
# Check funds, funders
table(activity_list$fund)
table(activity_list$gov_funder)
table(activity_list$currency)
# Check specific partner
test1 <- filter(activity_list, str_detect(reporting_org, "Elrha"))
View(test1)
# 1 - Function to extract project IDs by fund name (GCRF/Newton)
extract_ukri_projects_by_fund <- function(page, fund) {
path <- paste0("https://gtr.ukri.org:443/gtr/api/projects?q=",
fund, "&f=pro.rcukp&p=", page, "&s=100")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
projects <- response$project
return(projects)
}
extract_staff_org <- function(staff_data, person_id) {
path <- paste0("http://gtr.ukri.org/person/", person_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
person_current_org_name <- ((response$personOverview)$organisation)$name
person_current_org_id <- ((response$personOverview)$organisation)$id
staff_org_data <- rbind(staff_data, data.frame(person_id,
person_current_org_name,
person_current_org_id))
return(staff_org_data)
}
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# Look up country from GRID database
grid_org_search <- data.frame(name = ((response$organisationOverview)$organisation)$name) %>%
left_join(grid_institutes, by = "name") %>%
left_join(grid_addresses, by = "grid_id")
# Use GRID country over UKRI GtR one
org_country <- coalesce(grid_org_search$country, org_country_ukri)
return(org_country)
}
extract_ukri_projects_by_id <- function(id) {
path <- paste0("http://gtr.ukri.org/projects?ref=", id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# extract project data and last refresh date
data <- response$projectOverview
last_updated <- (response$lastRefreshDate)$lastRefreshDate %>%
str_replace_all("Data last updated:  ", "") %>%
as.Date(format = "%d %b %Y")
if(length(data) > 0) {
# Unlist first level
data <- data$projectComposition
# Extract project, lead org and co-investigator staff ids
projects <- data$project
lead_org <- data$leadResearchOrganisation
person_roles <- data$personRole
# Extract staff information (if applicable)
if(length(person_roles) > 0) {                        # checks length of list
person_roles <- person_roles %>%
unnest(col = role) %>%
filter(name == "CO_INVESTIGATOR") %>%
select(id)
if(nrow(person_roles) > 0) {                # checks no. of rows in dataframe
# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_data$person_current_org_name) > 0) {
staff_org_names <- staff_org_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = "",
partner_org_country = "")
}
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds, extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(project_data)
}
ukri_projects_by_fund <- readRDS("Outputs/ukri_projects_by_fund.rds")
ukri_projects_by_fund <- readRDS("Outputs/ukri_projects_by_fund.rds")
# Extract GTR ID from extract
ukri_projects_by_fund_with_id <- ukri_projects_by_fund %>%
unnest(cols = identifiers.identifier) %>%
rename(`GtR ID` = value) %>%
select(-type)
# Format data to join to other GtR ODA projects
ukri_gcrf_newton_ids <- ukri_projects_by_fund_with_id %>%
mutate(`Funder IATI ID` = "", Funder = "Department for Business, Energy and Industrial Strategy") %>%
select(`Funder IATI ID`, Fund, Funder, `Extending Org` = leadFunder, `GtR ID`)
# Read in other ODA UKRI projects
ukri_projects_ids <- read_xlsx("Inputs/UKRI non GCRF-Newton projects.xlsx", sheet=1)
# Join GCRF/Newton project IDs on
ukri_projects_ids <- ukri_projects_ids %>%
rbind(ukri_gcrf_newton_ids)
# Create empty dataset to hold projects
ukri_projects_by_id <- data.frame()
# Read in other ODA UKRI projects
ukri_projects_ids <- read_xlsx("Inputs/UKRI non GCRF-Newton projects.xlsx", sheet=1)
# Join GCRF/Newton project IDs on
ukri_projects_ids <- ukri_projects_ids %>%
rbind(ukri_gcrf_newton_ids)
# Create empty dataset to hold projects
ukri_projects_by_id <- data.frame()
n <- 0 # set counter
for (id in ukri_projects_ids$`GtR ID`) {
print(paste0(n, " - ", id))
data <- extract_ukri_projects_by_id(id)
ukri_projects_by_id <- ukri_projects_by_id %>%
rbind(data)
n <- n+1
}
# Read in other ODA UKRI projects
ukri_projects_ids <- read_xlsx("Inputs/UKRI non GCRF-Newton projects.xlsx", sheet=1)
# Join GCRF/Newton project IDs on
ukri_projects_ids <- ukri_projects_ids %>%
rbind(ukri_gcrf_newton_ids)
# Create empty dataset to hold projects
ukri_projects_by_id <- data.frame()
n <- 0 # set counter
for (id in ukri_projects_ids$`GtR ID`) {
print(paste0(n, " - ", id))
data <- extract_ukri_projects_by_id(id)
ukri_projects_by_id <- ukri_projects_by_id %>%
rbind(data)
n <- n+1
}
saveRDS(ukri_projects_by_id, file = "Outputs/ukri_projects_by_id.rds")
