partner_iati_list <- readRDS(file = "Outputs/partner_activity_list.rds")
# Filter gov department records for minimum granularity
iati_projects <- iati_activity_list %>%
filter(  str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
#reporting_org_ref == "GB-GOV-1" | # RED and ex-FCO research coded activities
str_detect(iati_identifier, "UKSA") |   # UKSA awards (GCRF)
str_detect(iati_identifier, "NEWT-MO") |   # Met Office awards (Newton)
str_detect(iati_identifier, "NEWT-BIS") |  # Other Met Office awards?
str_detect(iati_identifier, "NEWT-BC") |  # British Council
str_detect(iati_identifier, "GCRF-Clm") |  # Academies
str_detect(iati_identifier, "RS-GCRF|NEWT-RS") |  # Royal Society
str_detect(iati_identifier, "RAENG-GCRF|NEWT-RAE") |  # Royal Academy of Engineering
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
filter(flow_type == "ODA") %>%
mutate(fund = if_else(is.na(fund), "Unknown", fund)) %>%
plyr::rbind.fill(partner_iati_list) # Add partner activities
# Keep required fields
iati_projects_final <- iati_projects %>%
mutate(Funder = coalesce(gov_funder, reporting_org),
lead_org_country = "",
partner_org_name = "",
partner_org_country = "",
extending_org = coalesce(extending_org, reporting_org)) %>%
select(id = iati_identifier,
title = activity_title,
abstract = activity_description,
start_date,
end_date,
amount,
currency,
extending_org,
lead_org_name = partner,
lead_org_country = partner_country,
partner_org_name,
partner_org_country,
iati_id = programme_id,
Fund = fund,
Funder,
recipient_country = all_countries,
subject = sector_name,
status = activity_status
)
# Add IATI link to awards
iati_projects_final <- iati_projects_final %>%
mutate(link = paste0("https://d-portal.org/ctrack.html#view=act&aid=", id))
# Clean up
rm(request)
rm(response)
# 4) Extract Wellcome projects ------------------------------------------------
# Read in public data on Wellcome Grants
wellcome_grants <- read_excel("Inputs/wellcome-grants-awarded-2005-2020.xlsx")
# Read in partnerships data provided by Annie (Jan 21) - restrict to suspected ODA
wellcome_partnerships <- read_excel("Inputs/Active Partnership record - 25 01 2021 (ODA labelled).xlsx") %>%
filter(`ODA funding?` %in% c("Yes", "Maybe"),
`How the partnership is paid` != "Wellcome pays the partner, the partner pays the awardee",
`Partner Organisation(s)` != "Medical Research Council")  # exclude MRC ones - these will be on GtR
# Join the two
wellcome_grants_comb <- wellcome_grants %>%
inner_join(wellcome_partnerships, by = c("Internal ID" = "Reference"))
# Add missing fields and format Funder/Fund field
wellcome_grants_comb <- wellcome_grants_comb %>%
mutate(status = if_else(Sys.Date() <= `Planned Dates:End Date`, "Active", "Closed"),
extending_org = "Wellcome Trust",
currency = "GBP",
partner_org_name = "",
partner_org_country = `Research Location Countries`,
recipient_country = "",
Funder = if_else(str_detect(`Partner Organisation(s)`, "National Institute for Health Research"),
"Department of Health and Social Care", `Partner Organisation(s)`),
Fund = if_else(Funder == "Department of Health and Social Care",
"Global Health Research - Partnerships", "FCDO partially funded"))
# Select desired variables
wellcome_grants_comb <- wellcome_grants_comb %>%
select(id = `Internal ID`,
title = Title.x,
abstract = Description,
start_date = `Planned Dates:Start Date`,
end_date = `Planned Dates:End Date`,
amount = `Amount Awarded`,
currency,
extending_org,
lead_org_name = `Recipient Org:Name`,
lead_org_country = `Recipient Org:Country`,
partner_org_name,
partner_org_country,
iati_id = `Partnership Name`,
Fund,
Funder,
recipient_country,
subject = `Master Grant Type Name`,
status
)
# Format date fields for merging
wellcome_grants_final <- wellcome_grants_comb %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
link = "https://wellcome.org/grant-funding/funded-people-and-projects")
# 5) FCDO spreadsheet data
# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (Â£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed")
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`)
# 6) Join 4 sources together ----------------------------------------------
all_projects <- rbind(ukri_projects_final, nihr_projects_final,
iati_projects_final, wellcome_grants_final,
collated_spreadsheet_data)
# Change terminology around award status
all_projects <- all_projects %>%
mutate(status = if_else(status %in% c("Contracted", "Implementation"), "Active", status))
# Add ID field to dataset
all_projects$ID <- seq.int(nrow(all_projects))
# Save as R file (to read back in if needed)
saveRDS(all_projects, file = "Outputs/all_projects.rds")
# all_projects <- readRDS("Outputs/all_projects.rds")
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("httr" %in% installed.packages())) {
install.packages("httr")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(readxl)
library(writexl)
sector_extract <- function(page) {
path <- paste0("https://iatidatastore.iatistandard.org/api/sectors/?fields=category,url,name,code&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Condition to check when 5-digit codes stop being returned
if(!("category" %in% names(response$results))) {
sector_list <- rbind(sector_list_final, response$results)
} else {
sector_list <- sector_list_final
}
return(sector_list)
}
# Prepare results data frame and counters
sector_list_final <- data.frame()
new_rows <- 0
page <- 1
# Run extraction, stopping when no new sector codes returned
while (page == 1 | new_rows > 0) {
x <- nrow(sector_list_final)
sector_list_final <- sector_extract(page)
page <- page + 1
y <- nrow(sector_list_final)
new_rows = y - x
}
# Keep research codes only (11)
sector_list_research <- sector_list_final %>%
filter(str_detect(str_to_lower(name), "research") |
str_detect(str_to_lower(name), "higher education") |
str_detect(str_to_lower(name), "information and communication technology"))
# Set strings for API URL
sector_codes <- paste(sector_list_research$code, collapse=",")
#organisation_codes <- paste(reporter_list_final$publisher_iati_id, collapse=",")
organisation_codes <- c("GB-GOV-1", "GB-GOV-7", "GB-GOV-10", "GB-GOV-13", "GB-GOV-15", "GB-GOV-50", "GB-GOV-52")
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("httr" %in% installed.packages())) {
install.packages("httr")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(readxl)
library(writexl)
# Read in list of RED programmes
red_programmes <- read_excel("Inputs/RED programme IDs.xlsx") %>%
mutate(red_iati_id = if_else(ProjectID < 300000,
paste0("GB-1-", ProjectID), paste0("GB-GOV-1-", ProjectID)))
# Extract components to RED programmes
component_list <- data.frame()
component_extract <- function(activity_id) {
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
programme_list <- data.frame(component_id = red_programmes$red_iati_id)
all_red_activities <- rbind(programme_list, component_list)
# Remove intermediary datasets
rm(red_programmes)
rm(programme_list)
rm(component_list)
rm(components)
rm(id)
transactions_dataset <- data.frame()
for (id in all_red_activities$component_id) {
print(id)
path <- paste0("https://iati.cloud/api/transactions/?provider_activity=", id, "&format=json&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if (length(new_data) > 0) {
new_data <- new_data %>%
mutate(programme_id = id) %>%
unique()
}
transactions_dataset <- rbind(transactions_dataset, new_data)
}
rm(request)
rm(response)
rm(new_data)
red_linked_activites <- transactions_dataset %>%
filter(iati_identifier != programme_id) %>%
select(programme_id,
linked_activity = iati_identifier)
View(red_linked_activites)
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("httr" %in% installed.packages())) {
install.packages("httr")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(readxl)
library(writexl)
###
# A) Create list of RED programmes and components -----
# Read in list of RED programmes
red_programmes <- read_excel("Inputs/RED programme IDs.xlsx") %>%
mutate(red_iati_id = if_else(ProjectID < 300000,
paste0("GB-1-", ProjectID), paste0("GB-GOV-1-", ProjectID)))
# Extract components to RED programmes
component_list <- data.frame()
component_extract <- function(activity_id) {
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
programme_list <- data.frame(component_id = red_programmes$red_iati_id)
# Read in list of RED programmes
red_programmes <- read_excel("Inputs/RED programme IDs.xlsx") %>%
mutate(red_iati_id = if_else(ProjectID < 300000,
paste0("GB-1-", ProjectID), paste0("GB-GOV-1-", ProjectID)))
# Extract components to RED programmes
component_list <- data.frame()
component_extract <- function(activity_id) {
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
programme_list <- data.frame(component_id = red_programmes$red_iati_id)
non_RED_components <- c("203185-106",
"204624-105",
"204624-108",
"204695-103",
"204695-108",
"204695-111",
"205219-102",
"205222-103",
"300397-105",
"300552-107",
"300606-102",
"300936-102",
"301168-105",
"301168-106",
"301168-107")
all_red_activities <- rbind(programme_list,
component_list,
non_RED_components)
View(all_red_activities)
non_RED_components <- c("GB-1-203185-106",
"GB-1-204624-105",
"GB-1-204624-108",
"GB-1-204695-103",
"GB-1-204695-108",
"GB-1-204695-111",
"GB-1-205219-102",
"GB-1-205222-103",
"GB-GOV-1-300397-105",
"GB-GOV-1-300552-107",
"GB-GOV-1-300606-102",
"GB-GOV-1-300936-102",
"GB-GOV-1-301168-105",
"GB-GOV-1-301168-106",
"GB-GOV-1-301168-107")
all_red_activities <- rbind(programme_list,
component_list,
non_RED_components)
View(all_red_activities)
# Remove intermediary datasets
rm(red_programmes)
rm(programme_list)
rm(component_list)
rm(components)
rm(id)
transactions_dataset <- data.frame()
for (id in all_red_activities$component_id) {
print(id)
path <- paste0("https://iati.cloud/api/transactions/?provider_activity=", id, "&format=json&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if (length(new_data) > 0) {
new_data <- new_data %>%
mutate(programme_id = id) %>%
unique()
}
transactions_dataset <- rbind(transactions_dataset, new_data)
}
rm(request)
rm(response)
rm(new_data)
red_linked_activites <- transactions_dataset %>%
filter(iati_identifier != programme_id) %>%
select(programme_id,
linked_activity = iati_identifier)
rm(transactions_dataset)
# Save to Rdata file
saveRDS(red_linked_activites, file = "Outputs/red_linked_activites.rds")
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("httr" %in% installed.packages())) {
install.packages("httr")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(readxl)
library(writexl)
###
# A) Create list of RED programmes and components -----
# Read in list of RED programmes
red_programmes <- read_excel("Inputs/RED programme IDs.xlsx") %>%
mutate(red_iati_id = if_else(ProjectID < 300000,
paste0("GB-1-", ProjectID), paste0("GB-GOV-1-", ProjectID)))
# Extract components to RED programmes
component_list <- data.frame()
component_extract <- function(activity_id) {
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data$related_activity) > 0) {
new_data <- new_data %>%
unnest(related_activity) %>%
select(component_id = ref)
} else {
new_data <- data.frame()
}
return(new_data)
}
for (id in red_programmes$red_iati_id) {
print(id)
components <- component_extract(id)
component_list <- rbind(component_list, components)
}
programme_list <- data.frame(component_id = red_programmes$red_iati_id)
non_RED_components <- c("GB-1-203185-106",
"GB-1-204624-105",
"GB-1-204624-108",
"GB-1-204695-103",
"GB-1-204695-108",
"GB-1-204695-111",
"GB-1-205219-102",
"GB-1-205222-103",
"GB-GOV-1-300397-105",
"GB-GOV-1-300552-107",
"GB-GOV-1-300606-102",
"GB-GOV-1-300936-102",
"GB-GOV-1-301168-105",
"GB-GOV-1-301168-106",
"GB-GOV-1-301168-107")
all_red_activities <- rbind(programme_list,
component_list,
non_RED_components)
# Remove intermediary datasets
rm(red_programmes)
rm(programme_list)
rm(component_list)
rm(components)
rm(id)
###
# B) Extract all linked activities ----
transactions_dataset <- data.frame()
for (id in all_red_activities$component_id) {
print(id)
path <- paste0("https://iati.cloud/api/transactions/?provider_activity=", id, "&format=json&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if (length(new_data) > 0) {
new_data <- new_data %>%
mutate(programme_id = id) %>%
unique()
}
transactions_dataset <- rbind(transactions_dataset, new_data)
}
rm(request)
rm(response)
rm(new_data)
###
# C) Remove FCDO duplicate activities ----
red_linked_activites <- transactions_dataset %>%
filter(iati_identifier != programme_id) %>%
select(programme_id,
linked_activity = iati_identifier)
rm(transactions_dataset)
