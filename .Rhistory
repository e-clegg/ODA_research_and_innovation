mutate(org_country_iati = map(country_code, country_code_to_name),
org_country_other = map(reporting_org, org_country_lookup)) %>%
mutate(org_country_iati = unlist(org_country_iati),
org_country_other = unlist(org_country_other)) %>%
# Take best of both country lookup results
mutate(reporting_org_country = coalesce(org_country_iati, org_country_other)) %>%
select(-org_country_iati, -org_country_other)
# Add on to org file to save
org_names_and_locations_1 <- org_names_and_locations_1 %>%
rbind(activity_list_unnest_5 %>%
select(project_id = iati_identifier,
organisation_name = reporting_org,
organisation_country = reporting_org_country) %>%
mutate(organisation_role = 1) %>% # leading
unique())
# 6) Unlist and aggregate budget
activity_list_unnest_6 <- partner_activity_comb %>%
select(-activity_id) %>%
filter(lengths(budget) != 0) %>%
unnest(cols = budget) %>%
select(iati_identifier,
budget_status = status.name,
amount = value.value,
currency = value.currency.code,
period_start,
period_end)
# Find activities with multiple budgets for same period (i.e. indicative and committed)
multiple_budgets <- activity_list_unnest_6 %>%
select(iati_identifier, budget_status, period_start, period_end) %>%
unique() %>%
group_by(iati_identifier, period_start, period_end) %>%
summarise(count = n()) %>%
filter (count > 1)
# Keep only the committed budget in these cases
activity_list_unnest_6 <- activity_list_unnest_6 %>%
filter(!(iati_identifier %in% multiple_budgets$iati_identifier) |
budget_status == "Committed")
# Sum to get total budget per activity
activity_list_unnest_6 <- activity_list_unnest_6 %>%
group_by(iati_identifier, currency) %>%
summarise(period_start = min(period_start),
period_end = max(period_end),
amount = sum(amount))
# 7) Unlist start/end dates
activity_list_unnest_7 <- partner_activity_comb %>%
unnest(cols = activity_date) %>%
select(iati_identifier,
date = iso_date,
date_type = type.name) %>%
# take the first date in cases of two of the same time
group_by(iati_identifier, date_type) %>%
slice(1) %>%
spread(key = date_type, value = date) %>%
mutate(start_date = coalesce(`Actual start`, `Planned start`),
end_date = coalesce(`Actual end`, `Planned End`)) %>%
select(iati_identifier, start_date, end_date)
# Join unnested info to original data
activity_list <- activity_list_base %>%
left_join(activity_list_unnest_1, by = "iati_identifier") %>%
left_join(activity_list_unnest_2, by = "iati_identifier") %>%
left_join(activity_list_unnest_3, by = "iati_identifier") %>%
left_join(activity_list_unnest_4, by = "iati_identifier") %>%
left_join(activity_list_unnest_5, by = "iati_identifier") %>%
left_join(activity_list_unnest_6, by = "iati_identifier") %>%
left_join(activity_list_unnest_7, by = "iati_identifier")
# Assign a reporting org name if missing
activity_list <- activity_list %>%
mutate(reporting_org = coalesce(reporting_org, reporting_org_ref, gov_funder))
# Reorder columns and add date of refresh
activity_list <- activity_list %>%
select(iati_identifier, reporting_org_ref, reporting_org, reporting_org_country,
hierarchy, activity_status, activity_id,
activity_title, activity_description, start_date, end_date,
recipient_country, sector_name,
partner, partner_country,
gov_funder, fund,
amount, period_start, period_end, currency) %>%
unique() %>%
mutate(refresh_date = Sys.Date())
# Add Fund label
activity_list <- activity_list %>%
left_join(select(partner_iati_activity_ids, gov_funder, iati_id, funding_iati_id),
by = c("iati_identifier" = "iati_id", "gov_funder")) %>%
mutate(programme_id = coalesce(funding_iati_id, activity_id)) %>%
mutate(fund = coalesce(fund, "FCDO Research - Programmes"),
gov_funder = coalesce(gov_funder, "Foreign, Commonwealth and Development Office"))
# Add missing FCDO activity IDs
activity_list <- activity_list %>%
mutate(programme_id = case_when(str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CLARE") ~ "GB-GOV-1-300126",
str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_title, "CARIAA") ~ "GB-1-203506",
str_detect(iati_identifier, "XI-IATI-AGR") ~ "GB-1-203052",
TRUE ~ programme_id))
# Save to Rdata file
saveRDS(activity_list, file = "Outputs/partner_activity_list.rds")
# Save org names and countries to file
saveRDS(org_names_and_locations_1, file = "Outputs/org_names_and_locations_1.rds")
# Clear environment
rm(partner_activity_extract, partnership_activities, partner_activities_via_title, partner_activities_via_funder,
result, new_rows, x, y, page, ri_linked_activites,
activity_list_base, activity_list_unnest_1, activity_list_unnest_2, activity_list_unnest_3, activity_list_unnest_4,
activity_list_unnest_4_partner_countries, activity_list_unnest_4_partner_names, activity_list_unnest_5,
activity_list_unnest_6, activity_list_unnest_7)
gov_funders_expected <- c(
"Cross-government Prosperity Fund",
"Department for Business, Energy and Industrial Strategy",
"Department for Environment, Food, and Rural Affairs",
"Department of Health and Social Care",
"Foreign, Commonwealth and Development Office")
funds_expected <- c("Chevening Scholarships",
"FCDO Research - Programmes",
"Global Challenges Research Fund (GCRF)", "Global Health Research - Partnerships",
"Global Health Research - Programmes", "Global Health Security - GAMRIF",
"Global Health Security - UK Vaccine Network", "International Climate Finance (ICF)",
"Newton Fund", "Other")
## LOOKUPS ##
expect_equal(org_country_lookup("International Development Research Centre"), "Canada")
### B) GOV FUNDER IATI RESEARCH ACTIVITIES
gov_list_final <- readRDS("Outputs/gov_list_final.rds")
ri_iati_activities <- readRDS(file = "Outputs/ri_iati_activities.rds")
test_that("UK government funder names are as expected", {
gov_funders_actual <- gov_list_final %>%
select(reporting_org) %>%
unique() %>%
arrange(reporting_org)
expect_equal(gov_funders_expected, gov_funders_actual$reporting_org)
})
test_that("fund names are as expected", {
gov_funds_actual <- gov_list_final %>%
select(fund) %>%
unique() %>%
arrange(fund)
expect_equal(funds_expected, gov_funds_actual$fund)
})
gov_funds_actual <- gov_list_final %>%
select(fund) %>%
unique() %>%
arrange(fund)
expect_equal(funds_expected, gov_funds_actual$fund)
funds_expected
gov_funds_actual$fund
ri_tag_users <- unique(ri_iati_activities$reporting_org.ref)
View(ri_tag_users)
View(uk_gov_ri_programmes)
# Save list of tagged research & innovation activities
ri_iati_activities <- uk_gov_ri_programmes %>%
filter(code == "RI") %>%
select(iati_identifier, reporting_org.ref) %>%
unique() %>%
mutate(tag = "RI")
saveRDS(ri_iati_activities, file = "Outputs/ri_iati_activities.rds")
ri_tag_users <- unique(ri_iati_activities$)
View(ri_tag_users)
ri_tag_users <- unique(ri_iati_activities$reporting_org.ref)
View(ri_tag_users)
print(ri_tag_users)
test_that("South Asia Research Country Fund data can be extracted", {
id <- "GB-1-205053"
data <- iati_activity_extract(id)
expect_true(length(data) > 0)
})  # not working
test_that("Evidence Fund data can be extracted", {
id <- "GB-GOV-1-300708"
data <- iati_activity_extract(id)
expect_true(length(data) > 0)
})  # working
test_that("LSE Int. Growth Centre data can be extracted", {
id <- "GB-COH-00070527-IGC-P3"
data <- iati_activity_extract(id)
expect_true(length(data) > 0)
})  # not working
test_that("IDS example data can be extracted", {
id <- "GB-COH-877338-GV-GOV-1-300708-124"
data <- iati_activity_extract(id)
expect_true(length(data) > 0)
})  # not working
activities_to_fix <- gov_list_unnest_1 %>%
group_by(iati_identifier, activity_title, type.name) %>%
summarise(no_descriptions = n()) %>%
filter(no_descriptions > 1)
### C) MASTER DATASET ----
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
test_that("Project with known ID is present in master dataset", {
test_id <- "NE/V009591/1"
test_data <- filter(all_projects_tidied, str_detect(id, test_id))
expect_true(nrow(test_data) > 0)
})
test_that("IATI recipient countries in transactions are picked up", {
detact_example <- activity_list %>%
filter(str_detect(iati_identifier, "GB-UKPRN-10007774-DeTACT"))
expect_false(is.na(detact_example$recipient_country))
})
test_that("IDRC has no duplicate projects and its English name in dataset only", {
idrc_example <- all_projects_tidied %>%
filter(str_detect(id, "XM-DAC-301-2")) %>%
select(extending_org) %>%
unique()
expect_equal(idrc_example$extending_org, "International Development Research Centre")
})
test_that("UN Refugee Agency", {
un_ref_example <- all_projects_tidied %>%
filter(str_detect(id, "XM-DAC-41121-2017-GLOBALPROG")) %>%
select(extending_org) %>%
unique()
expect_equal(un_ref_example$extending_org, "The UN Refugee Agency")
})
test_that("check all UK government funders are present in dataset", {
gov_funders_actual <- sort(unique(all_projects_tidied$Funder))
expect_equal(gov_funders_actual, gov_funders_expected)
})
gov_funders_actual
gov_funders_actual <- sort(unique(all_projects_tidied$Funder))
gov_funders_actual
gov_funders_expected
test_that("co-funded MRC project processed correctly", {
mrc_cofunded_example <- filter(all_projects_tidied,
id == "MR/M009211/1")
mrc_common_info <- mrc_example_actual %>%
select(-Funder, -Fund, -iati_id) %>%
unique()
expect_equal(nrow(mrc_cofunded_example), 3)
expect_equal(nrow(mrc_common_info), 1)
})
mrc_cofunded_example <- filter(all_projects_tidied,
id == "MR/M009211/1")
mrc_common_info <- mrc_example_actual %>%
select(-Funder, -Fund, -iati_id) %>%
unique()
View(mrc_cofunded_example)
mrc_cofunded_example <- filter(all_projects_tidied,
id == "MR/M009211/1")
mrc_common_info <- mrc_cofunded_example %>%
select(-Funder, -Fund, -iati_id) %>%
unique()
expect_equal(nrow(mrc_cofunded_example), 3)
expect_equal(nrow(mrc_common_info), 1)
test_that("check each project has a unique ID", {
unique_projects <- all_projects_tidied %>%
select(-Funder, -Fund, -iati_id) %>%
unique()
unique_project_ids <- select(unique_projects, id) %>% unique()
### Investigate duplicates (partner org order)
duplicates_ids <- unique_projects %>%
group_by(id) %>%
summarise(n = n()) %>%
filter(n > 1)
duplicates <- unique_projects %>%
filter(id %in% duplicates_ids$id)
###
expect_equal(nrow(unique_projects), nrow(unique_project_ids))
})
test_that("check Wellcome grants with no ODA spend are excluded", {
wellcome_zero_grants <- all_projects_tidied %>%
filter(extending_org == "Wellcome Trust",
(amount == 0 | is.na(amount)))
expect_equal(nrow(wellcome_zero_grants), 0)
})
test_that("non-research partners have been excluded", {
non_research_org <- all_projects_tidied %>%
filter(extending_org == "Sightsavers")
expect_equal(nrow(non_research_org), 0)
})
test_that("South Asia Research Fund and Evidence Fund are present", {
evidence_funds <- all_projects_tidied %>%
filter(str_detect(id, "205053|300708")) %>%
select(iati_id) %>% unique()
expect_equal(nrow(evidence_funds), 2)
})
# Read in files for testing
project_table <- readRDS("Outputs/project_table.rds")
funder_table <- readRDS("Outputs/funder_table.rds")
org_names_and_locations <- readRDS("Outputs/org_names_and_locations.rds")
country_table <- readRDS(file = "Outputs/country_table.rds")
country_table_cleaned <- readRDS(file = "Outputs/country_table_cleaned.rds")
test_that("check common country formatting issues", {
print("Checking: DRC")
original_1 <- country_table %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
corrected_1 <- country_table_cleaned %>%
filter(str_detect(project_id, "COD-20180"), country_type == 1)
original_2 <- country_table %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
corrected_2 <- country_table_cleaned %>%
filter(str_detect(project_id, "XM-DAC-301-2-107350-001"), country_type == 1)
original_3 <- country_table %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
corrected_3 <- country_table_cleaned %>%
filter(str_detect(project_id, "300211-4"), country_type == 1)
print(paste0("Original text: ", original_1$Country, " / ", original_2$Country, " / ", original_3$Country))
expect_equal(corrected_1$Country, corrected_2$Country, corrected_3$Country,
"democratic republic of the congo")
print("Checking: Tanzania")
original_4 <- country_table %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
corrected_4 <- country_table_cleaned %>%
filter(str_detect(project_id, "BB/S014586/1"), country_type == 1)
print(paste0("Original text: ", original_4$Country))
expect_equal(corrected_4$Country, "tanzania")
print("Checking: China")
original_5 <- country_table %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
corrected_5 <- country_table_cleaned %>%
filter(str_detect(project_id, "NF-BCCNPDEP-202"), country_type == 1)
print(paste0("Original text: ", original_5$Country))
expect_equal(corrected_5$Country, "china")
print("Checking: Korea")
original_6 <- country_table %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GCRF-CICA-R12017-IC170195"), country_type == 1)
print(paste0("Original text: ", original_6$Country))
countries <- paste0(corrected_6$Country, collapse = "|")
expect_true(str_detect(countries, "democratic people’s republic of korea"))
print("Checking: United States")
original_7 <- country_table %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
corrected_7 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-GOV-1-300126-MO-5"), country_type == 2)
original_8 <- country_table %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
corrected_8 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-COH-03122495-EEG-29"), country_type == 2)
original_9 <- country_table %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
corrected_9 <- country_table_cleaned %>%
filter(str_detect(project_id, "us-ein-522044704-NewVaccinesForTB"), country_type == 1)
print(paste0("Original text: ", original_7$Country, " / ", original_8$Country))
expect_equal(corrected_7$Country, corrected_8$Country, "united states")
print(paste0("Original text: ", original_9$Country))
countries <- paste0(corrected_9$Country, collapse = "|")
expect_true(str_detect(countries, "united states"))
print("Checking: (the) removed")
original_6 <- country_table %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
corrected_6 <- country_table_cleaned %>%
filter(str_detect(project_id, "GB-CHC-222655-LIGHT"), country_type == 1)
print(paste0("Original text: ", original_6$Country))
countries <- paste0(corrected_6$Country, collapse = "|")
expect_false(str_detect(countries, "\\(the\\)"))
})
test_that("all separating characters identified", {
# ; separator
test1 <- country_table %>%
filter(str_detect(project_id, "RWA-20054"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "RWA-20054"))
View(test2)
View(test1)
# , separator
test1 <- country_table %>%
filter(str_detect(project_id, "MR/S004769/1"))
test2 <- country_table_cleaned %>%
filter(str_detect(project_id, "MR/S004769/1"))
View(test2)
View(test1)
})
unmatched_countries <- country_table_cleaned %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
print(paste0("No. of unrecognised countries: ", nrow(unmatched_countries)))
View(unmatched_countries)
test_that("only projects with no country information whatsoever are labelled unknown", {
print("example 1: genuine unknown - Defra")
test1 <- filter(country_table_final, str_detect(project_id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$Country), "Unknown")
expect_equal(nrow(test1), 2)
print("example 2: known beneficiary, no known location")
test2 <- filter(country_table_final, project_id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$Country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
print("example 3: known location, no known beneficiary")
test3 <- filter(country_table_final, project_id == "BB/R019819/1") %>% arrange(country_type)
expect_equal(test3$Country, c("Unknown", "United Kingdom"))
expect_equal(nrow(test3), 2)
print("example 4: known beneficiary and known location")
test4 <- filter(country_table_final, project_id == "ES/P010245/1")
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
print("example 5: check Chevening country location")
test5 <- filter(country_table_final, str_detect(project_id, "Chev"), country_type == 2)
expect_equal(unique(test5$Country), "United Kingdom")
})
print("example 1: genuine unknown - Defra")
test1 <- filter(country_table_final, str_detect(project_id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$Country), "Unknown")
expect_equal(nrow(test1), 2)
test_that("only projects with no country information whatsoever are labelled unknown", {
print("example 1: genuine unknown - Defra")
test1 <- filter(country_table_final, str_detect(project_id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$country), "Unknown")
expect_equal(nrow(test1), 2)
print("example 2: known beneficiary, no known location")
test2 <- filter(country_table_final, project_id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
print("example 3: known location, no known beneficiary")
test3 <- filter(country_table_final, project_id == "BB/R019819/1") %>% arrange(country_type)
expect_equal(test3$country, c("Unknown", "United Kingdom"))
expect_equal(nrow(test3), 2)
print("example 4: known beneficiary and known location")
test4 <- filter(country_table_final, project_id == "ES/P010245/1")
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
print("example 5: check Chevening country location")
test5 <- filter(country_table_final, str_detect(project_id, "Chev"), country_type == 2)
expect_equal(unique(test5$country), "United Kingdom")
})
print("example 1: genuine unknown - Defra")
test1 <- filter(country_table_final, str_detect(project_id, "GB-GOV-7-ICF-P0011-RD"))
expect_equal(unique(test1$country), "Unknown")
expect_equal(nrow(test1), 2)
View(test1)
print("example 2: known beneficiary, no known location")
test2 <- filter(country_table_final, project_id == "GCRF-RAECHEPSSA-1819-3-HEPSSA2\\71") %>% arrange(country_type)
expect_equal(test2$country, c("Nigeria", "Unknown"))
expect_equal(nrow(test2), 2)
View(test2)
print("example 3: known location, no known beneficiary")
test3 <- filter(country_table_final, project_id == "BB/R019819/1") %>% arrange(country_type)
expect_equal(test3$country, c("Unknown", "United Kingdom"))
expect_equal(nrow(test3), 2)
View(test3)
print("example 4: known beneficiary and known location")
test4 <- filter(country_table_final, project_id == "ES/P010245/1")
expect_equal(length(unique(test4$country_type)), 2)
expect_equal(nrow(test4), 2)
print("example 5: check Chevening country location")
test5 <- filter(country_table_final, str_detect(project_id, "Chev"), country_type == 2)
expect_equal(unique(test5$country), "United Kingdom")
### E) ACTIVE PROJECT EXTRACT FOR TABLEAU ----
tableau_projects_tidied <- readRDS("Outputs/tableau_projects_tidied.rds")
test_that("fund names are as expected", {
funds_actual <- tableau_projects_tidied$Fund %>%
unique() %>% sort()
expect_equal(funds_actual, funds_expected)
})
funds_actual <- tableau_projects_tidied$Fund %>%
unique() %>% sort()
expect_equal(funds_actual, funds_expected)
funds_actual
funds_expected
funds_expected <- c("Chevening Scholarships",
"FCDO Research - Partnerships", "FCDO Research - Programmes",
"Global Challenges Research Fund (GCRF)", "Global Health Research - Partnerships",
"Global Health Research - Programmes", "Global Health Security - GAMRIF",
"Global Health Security - UK Vaccine Network", "International Climate Finance (ICF)",
"Newton Fund", "Other")
test_that("fund names are as expected", {
funds_actual <- tableau_projects_tidied$Fund %>%
unique() %>% sort()
expect_equal(funds_actual, funds_expected)
})
# Check country_type field
test_that("country_type field has 3 types", {
country_types <- tableau_projects_tidied$country_type %>%
unique() %>%
sort()
expect_equal(country_types, c(1,2,3))
})
# Check country_type field
test_that("country_type field has 2 types", {
country_types <- tableau_projects_tidied$country_type %>%
unique() %>%
sort()
expect_equal(country_types, c(1,2))
})
# Output final list of countries (to sense-check for duplicates)
country_list_final <- tableau_projects_tidied %>%
select(Country) %>%
unique() %>%
arrange(Country)
test_that("funder names are as expected", {
funders_actual <- tableau_projects_tidied$Funder %>%
unique() %>% sort()
expect_equal(funders_actual, gov_funders_expected)
})
funders_actual
funders_actual <- tableau_projects_tidied$Funder %>%
unique() %>% sort()
funders_actual
gov_funders_expected
gov_funders_expected <- c(
"Department for Business, Energy and Industrial Strategy",
"Department for Environment, Food, and Rural Affairs",
"Department of Health and Social Care",
"Foreign, Commonwealth and Development Office")
test_that("funder names are as expected", {
funders_actual <- tableau_projects_tidied$Funder %>%
unique() %>% sort()
expect_equal(funders_actual, gov_funders_expected)
})
test_that("no GBP currency typo", {
currencies_actual <- tableau_projects_tidied %>%
select(currency) %>%
filter(!is.na(currency)) %>%
unique()
expect_false("GDP" %in% currencies_actual$currency)
})
test_that("check active projects are included only", {
status_actual <- unique(all_projects_tidied$status)
status_expected <- c("Active", "Unknown")
expect_equal(status_actual, status_expected)
})
status_actual <- unique(all_projects_tidied$status)
status_expected <- c("Active", "Unknown")
status_actual
status_expected
test_that("check active projects are included only", {
status_actual <- unique(tableau_projects_tidied$status)
status_expected <- c("Active", "Unknown")
expect_equal(status_actual, status_expected)
})
