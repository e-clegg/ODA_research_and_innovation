partner_org_name,
partner_org_country,
iati_id = `Partnership Name`,
Fund,
Funder,
recipient_country,
subject = `Master Grant Type Name`,
status
)
# Format date fields for merging
wellcome_grants_final <- wellcome_grants_comb %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
link = "https://wellcome.org/grant-funding/funded-people-and-projects")
# 5) FCDO spreadsheet data
# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\2 - Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed")
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`, -`FCDO programme - name`,
-`FCDO programme - IATI ID`)
# 6) Join 5 sources together ----------------------------------------------
all_projects <- rbind(ukri_projects_final, nihr_projects_final,
iati_projects_final, wellcome_grants_final,
collated_spreadsheet_data)
# Change terminology around award status
all_projects <- all_projects %>%
mutate(status = if_else(status %in% c("Contracted", "Implementation"), "Active", status)) %>%
unique()
# Save as R file (to read back in if needed)
saveRDS(all_projects, file = "Outputs/all_projects.rds")
# all_projects <- readRDS("Outputs/all_projects.rds")
# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\2 - Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
View(data_list)
# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\2 - Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed")
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`, -`FCDO programme - name`,
-`FCDO programme - IATI ID`)
all_projects <- rbind(ukri_projects_final, nihr_projects_final,
iati_projects_final, wellcome_grants_final,
collated_spreadsheet_data)
# Change terminology around award status
all_projects <- all_projects %>%
mutate(status = if_else(status %in% c("Contracted", "Implementation"), "Active", status)) %>%
unique()
# Save as R file (to read back in if needed)
saveRDS(all_projects, file = "Outputs/all_projects.rds")
# 7) CHECKING ----
test1 <- filter(all_projects, str_detect(extending_org, "Elrha"))
test2 <- filter(all_projects, str_detect(extending_org, "Abdul"))
View(test1)
View(test2)
id_list <- c("US-EIN-042103594-PPE3978774",
"US-EIN-042103594-GCCI-3978870",
"GB-CHC-1177110-R2HC",
"GB-CHC-1177110-HIF")
transactions_extract <- function(iati_id, page) {
path <- paste0("https://iati.cloud/api/transactions/?iati_identifier=", iati_id, "&fields=value,transaction_date,description,currency,receiver_organisation&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
results <- plyr::rbind.fill(transaction_list, new_data)
return(results)
}
# Prepare results data frame and counters
transaction_list <- data.frame()
new_rows <- 0
page <- 1
for (id in id_list) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(id, "-", page))
x <- nrow(transaction_list)
transaction_list <- transactions_extract(id, page)
page <- page + 1
y <- nrow(transaction_list)
new_rows = y - x
}
}
transactions_unnest <- transaction_list %>%
rename(currency = currency.code) %>%
# 1 - Country
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -country.code, -recipient_countries, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# 2 - Description
unnest(cols = description.narrative,
keep_empty = TRUE) %>%
select(-lang.code, -lang.name) %>%
rename(title = text) %>%
# 3 - Sectors
unnest(cols = sectors,
keep_empty = TRUE) %>%
rename(subject = sector.name) %>%
# 4 - Receiver org
unnest(cols = receiver_organisation.narrative,
keep_empty = TRUE) %>%
mutate(lead_org_name = coalesce(text, receiver_organisation.ref)) %>%
filter(!is.na(lead_org_name)) %>%   # remove transactions without a recipient
filter(!(lead_org_name == "Elrha")) %>%  # remove Elrha income
# select fields to keep
select(iati_identifier, start_date = transaction_date,
title, recipient_country, subject, currency, amount = value, lead_org_name) %>%
mutate(partner_org_name = "",
partner_org_country = "",
lead_org_country = "",
end_date = "")
# Read in R file (from previous script)
all_projects <- readRDS("Outputs/all_projects.rds")
# Subset for transaction based activities
all_projects_subset <- all_projects %>%
filter(id %in% id_list) %>%
select(id, abstract, extending_org, iati_id, Fund, Funder, status, link) %>%
left_join(transactions_unnest, by = c("id" = "iati_identifier"))
# Replace original single line activities in master file
all_projects_transactions <- all_projects %>%
filter(!(id %in% id_list)) %>%
rbind(all_projects_subset)
saveRDS(all_projects_transactions, file = "Outputs/all_projects_transactions.rds")
test <- filter(all_projects_transactions, str_detect(extending_org, "Elrha"))
View(test)
if (!("googlesheets4" %in% installed.packages())) {
install.packages("googlesheets4")
}
if (!("gargle" %in% installed.packages())) {
install.packages("gargle")
}
if (!("geonames" %in% installed.packages())) {
install.packages("geonames")
}
if (!("RgoogleMaps" %in% installed.packages())) {
install.packages("RgoogleMaps")
}
if (!("rworldmap" %in% installed.packages())) {
install.packages("rworldmap")
}
if (!("ggmap" %in% installed.packages())) {
install.packages("ggmap")
}
if (!("jsonlite" %in% installed.packages())) {
install.packages("jsonlite")
}
if (!("rvest" %in% installed.packages())) {
install.packages("rvest")
}
if (!("stringi" %in% installed.packages())) {
install.packages("stringi")
}
if (!("tidyverse" %in% installed.packages())) {
install.packages("tidyverse")
}
if (!("readxl" %in% installed.packages())) {
install.packages("readxl")
}
if (!("writexl" %in% installed.packages())) {
install.packages("writexl")
}
# Load packages -----
library(geonames)
library(RgoogleMaps)
library(rworldmap)
library(ggmap)
library(jsonlite)
library(rvest)
library(stringi)
library(googlesheets4)
library(gargle)
library(httr)
library(tidyverse)
library(writexl)
library(readxl)
# Read in data from script 4
all_projects_transactions <- readRDS(file = "Outputs/all_projects_transactions.rds")
# Add the country mentioned field onto main dataset
all_projects_final <- all_projects_transactions %>%
mutate(location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
beneficiary_country = recipient_country)
# Convert location vs. recipient country data to long format
countries_data <- all_projects_final %>%
select(id, beneficiary_country, location_country) %>%
gather(key = "country_type", value = "Country", -id) %>%
right_join(select(all_projects_final, -beneficiary_country, -location_country), by = "id") %>%
mutate(Country = str_replace_all(Country, "NA", "Unknown"),
Country = str_replace_all(Country, ",,", ","))
# Create one row per country
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of,|Tanzania, United Republic of,", "Tanzania,")) %>%
mutate(Country = str_replace_all(Country, ";", ",")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|UNITED STATES|United states"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = str_replace(Country, "DRC", "Democratic Republic of the Congo"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country),
Country = str_replace_all(Country, "é", "e")) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Read in DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx")
# Check countries that are unmatched (this information will be lost)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's
# accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
# remove commas at start
mutate(Country = if_else(substr(Country, 1, 1) == ",", substr(Country, 2, length(Country)-1), Country)) %>%
rename(all_countries = Country) %>%
left_join(all_projects_split_country, by = c("id", "extending_org", "country_type")) %>%
mutate(date_refreshed = Sys.Date())
# Add row ID field to dataset
all_projects_final$row_id <- seq.int(nrow(all_projects_final))
# Extract project records with unknown or missing country field
missing_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(row_id, id, country_type) %>%
unique() %>%
mutate(exclude_flag = 1)
# Identify projects that have both a populated and missing country field
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(row_id, id, country_type) %>%
unique() %>%
filter(id %in% missing_country_projects$id)
# Exclude project records with unknown/missing abstract or beneficiary country AND
# a populated other country record
all_projects_tidied <- all_projects_final %>%
left_join(missing_country_projects, by = c("row_id", "id", "country_type")) %>%
filter(!(exclude_flag == 1 & country_type == "beneficiary_country" & (Country %in% c("Unknown") | is.na(Country))))
# Label unknown/missing countries as "Unknown" to remove NULLs from Tableau map
all_projects_tidied <- all_projects_tidied %>%
mutate(Country = if_else(is.na(Country), "Unknown", Country)) %>%
select(-exclude_flag)
# Add FCDO programme ID
all_projects_tidied <- all_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else(Funder == "Foreign, Commonwealth and Development Office"
& str_detect(iati_id, "-1-"),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research"), "FCDO fully funded", Fund),
Funder = if_else(Funder == "Foreign, Commonwealth & Development Office", "Foreign, Commonwealth and Development Office", Funder))
# check list of ODA R&I funds
unique(all_projects_tidied$Fund)
test <- filter(all_projects_tidied, is.na(Fund))
nrow(test)
# check list of ODA R&I funders
unique(all_projects_tidied$Funder)
# Look at data from a particular delivery partner
test <- filter(all_projects_tidied, extending_org == "Bill & Melinda Gates Foundation")
test <- filter(all_projects_tidied, is.na(Funder))
View(test)
# Detect all Excel files in Data folder
path = "C:\\Users\\e-clegg\\OneDrive - DFID\\PROJECT - MODARI\\2. Awards\\IATI\\External partner data\\2 - Completed returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R (skipping first 28 lines in Excel sheet as this contains no data)
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GDP"),
subject = "",
status = if_else(end_date >= Sys.Date(), "Active", "Closed")
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`, -`FCDO programme - name`,
-`FCDO programme - IATI ID`)
all_projects <- rbind(ukri_projects_final, nihr_projects_final,
iati_projects_final, wellcome_grants_final,
collated_spreadsheet_data)
# Change terminology around award status
all_projects <- all_projects %>%
mutate(status = if_else(status %in% c("Contracted", "Implementation"), "Active", status)) %>%
unique()
# Save as R file (to read back in if needed)
saveRDS(all_projects, file = "Outputs/all_projects.rds")
# Subset for transaction based activities
all_projects_subset <- all_projects %>%
filter(id %in% id_list) %>%
select(id, abstract, extending_org, iati_id, Fund, Funder, status, link) %>%
left_join(transactions_unnest, by = c("id" = "iati_identifier"))
# Replace original single line activities in master file
all_projects_transactions <- all_projects %>%
filter(!(id %in% id_list)) %>%
rbind(all_projects_subset)
saveRDS(all_projects_transactions, file = "Outputs/all_projects_transactions.rds")
# Read in data from script 4
all_projects_transactions <- readRDS(file = "Outputs/all_projects_transactions.rds")
# Add the country mentioned field onto main dataset
all_projects_final <- all_projects_transactions %>%
mutate(location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
beneficiary_country = recipient_country)
# Convert location vs. recipient country data to long format
countries_data <- all_projects_final %>%
select(id, beneficiary_country, location_country) %>%
gather(key = "country_type", value = "Country", -id) %>%
right_join(select(all_projects_final, -beneficiary_country, -location_country), by = "id") %>%
mutate(Country = str_replace_all(Country, "NA", "Unknown"),
Country = str_replace_all(Country, ",,", ","))
# Create one row per country
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of,|Tanzania, United Republic of,", "Tanzania,")) %>%
mutate(Country = str_replace_all(Country, ";", ",")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",", convert = FALSE) %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|UNITED STATES|United states"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = str_replace(Country, "DRC", "Democratic Republic of the Congo"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country),
Country = str_replace_all(Country, "é", "e")) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Read in DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx")
# Check countries that are unmatched (this information will be lost)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's
# accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
# remove commas at start
mutate(Country = if_else(substr(Country, 1, 1) == ",", substr(Country, 2, length(Country)-1), Country)) %>%
rename(all_countries = Country) %>%
left_join(all_projects_split_country, by = c("id", "extending_org", "country_type")) %>%
mutate(date_refreshed = Sys.Date())
# Add row ID field to dataset
all_projects_final$row_id <- seq.int(nrow(all_projects_final))
# Extract project records with unknown or missing country field
missing_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(row_id, id, country_type) %>%
unique() %>%
mutate(exclude_flag = 1)
# Identify projects that have both a populated and missing country field
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(row_id, id, country_type) %>%
unique() %>%
filter(id %in% missing_country_projects$id)
# Exclude project records with unknown/missing abstract or beneficiary country AND
# a populated other country record
all_projects_tidied <- all_projects_final %>%
left_join(missing_country_projects, by = c("row_id", "id", "country_type")) %>%
filter(!(exclude_flag == 1 & country_type == "beneficiary_country" & (Country %in% c("Unknown") | is.na(Country))))
# Label unknown/missing countries as "Unknown" to remove NULLs from Tableau map
all_projects_tidied <- all_projects_tidied %>%
mutate(Country = if_else(is.na(Country), "Unknown", Country)) %>%
select(-exclude_flag)
# Add FCDO programme ID
all_projects_tidied <- all_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else(Funder == "Foreign, Commonwealth and Development Office"
& str_detect(iati_id, "-1-"),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research"), "FCDO fully funded", Fund),
Funder = if_else(Funder == "Foreign, Commonwealth & Development Office", "Foreign, Commonwealth and Development Office", Funder))
# check list of ODA R&I funds
unique(all_projects_tidied$Fund)
test <- filter(all_projects_tidied, is.na(Fund))
nrow(test)
# check list of ODA R&I funders
unique(all_projects_tidied$Funder)
test <- filter(all_projects_tidied, is.na(Funder))
# Look at data from a particular delivery partner
test <- filter(all_projects_tidied, extending_org == "Bill & Melinda Gates Foundation")
# Look for a particular award (from keyword in title)
test <- filter(all_projects_tidied, str_detect(title, "under-five"))
# Check countries
unique(all_projects_tidied$Country)
test <- filter(all_projects_tidied,
is.na(Country) | str_detect(Country, ","))
test2 <- filter(all_projects_tidied,
Country == "Unknown")
test3 <- filter(all_projects_tidied,
Country == "Niger")
# Unknown country should be for the activity location only
unique(test2$country_type)
# TEMPORARY ***
# Remove IDRC DHSC IATI data
all_projects_tidied <- all_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# Write to RDS
saveRDS(all_projects_tidied, "Outputs/all_projects_tidied.rds")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
