extract_staff_org <- function(staff_data, person_id) {
path <- paste0("http://gtr.ukri.org/person/", person_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
person_current_org_name <- ((response$personOverview)$organisation)$name
person_current_org_id <- ((response$personOverview)$organisation)$id
staff_org_data <- rbind(staff_data, data.frame(person_id,
person_current_org_name,
person_current_org_id))
return(staff_org_data)
}
# 3 - Function to extract country from organisation ID
# (checking GRID database as well as UKRI)
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
org_name <- ((response$organisationOverview)$organisation)$name
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# If unknown use other generic lookup function
if(org_country_ukri == "Unknown") {
org_country <- org_country_lookup(org_name)
} else {
org_country <- org_country_ukri
}
return(org_country)
}
# 4 - Master function to extract UKRI project data by ID
extract_ukri_projects_by_id <- function(id) {
path <- paste0("http://gtr.ukri.org/projects?ref=", id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# extract project data and last refresh date
data <- response$projectOverview
last_updated <- (response$lastRefreshDate)$lastRefreshDate %>%
str_replace_all("Data last updated:  ", "") %>%
as.Date(format = "%d %b %Y")
# Create blank org table for output
org_table <- data.frame()
if(length(data) > 0) {
# Unlist first level
data <- data$projectComposition
# Extract project, lead org and co-investigator staff ids
projects <- data$project
lead_org <- data$leadResearchOrganisation
person_roles <- data$personRole
# Extract staff information (if applicable)
if(length(person_roles) > 0) {                        # checks length of list
person_roles <- person_roles %>%
unnest(col = role) %>%
filter(name == "CO_INVESTIGATOR") %>%
select(id)
if(nrow(person_roles) > 0) {                # checks no. of rows in dataframe
# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_country_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_country_data$person_current_org_name) > 0) {
# Keep staff org names and countries to output
org_table <- staff_org_country_data %>%
mutate(project_id = projects[["grantReference"]],
organisation_role = 2) %>%
select(project_id,
organisation_role,
organisation_name = person_current_org_name,
organisation_country = person_current_org_country)
# Collapse org names and locations
staff_org_names <- staff_org_country_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_country_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = NA_character_,
partner_org_country = NA_character_)
}
# Write lead org name and country to file
org_table <- org_table %>%
rbind(select(project_data,
project_id = gtr_id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds,
extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country,
status, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(list(project_data, org_table))
}
# Read in linked partner IATI activity info from script 1
ri_linked_activites <- readRDS(file = "Outputs/ri_linked_activites.rds")
# Manually add on other (non-linked) partner activities from Excel
partner_iati_activity_ids <- unlinked_partner_iati_activity_ids %>%
plyr::rbind.fill(ri_linked_activites)
partner_activity_extract <- readRDS(file = "Outputs/partner_activity_extract.rds")
# Join on funder and fund information
partner_activity_extract <- partner_activity_extract %>%
left_join(partner_iati_activity_ids, by = "iati_identifier") %>%
select(-extending_org)
org_activity_list <- readRDS("Outputs/org_activity_list.rds")
partner_activities_via_title <- org_activity_list %>%
filter(reporting_org.ref == "DAC-1601") %>%  # Gates org ID
unnest(cols = title.narrative) %>%
filter(str_detect(text, "FCDO|DFID")) %>%
mutate(gov_funder = "Foreign, Commonwealth and Development Office",
fund = "FCDO Research - Partnerships") %>%
select(iati_identifier, gov_funder, fund) %>%
unique()
partner_activities_via_funder <- org_activity_list %>%
# unnest title
unnest(cols = title.narrative) %>%
rename(title = text) %>%
# unnest participating orgs
filter(lengths(participating_org) != 0) %>%
unnest(cols = participating_org) %>%
# unnest org names
select(iati_identifier, role.name, narrative, ref, activity_id) %>%
unnest(cols = narrative) %>%
select(-lang.code, -lang.name) %>%
rename(org_name = text) %>%
# restrict to funding organisations and AgResults activities (pooled funding)
filter(role.name %in% c("Funding") |
str_detect(iati_identifier, "XI-IATI-AGR")
) %>%
unique() %>%
# restrict to UK gov funding
filter(ref == "GB-GOV-1" |
str_detect(org_name, "Britain|DFID|FCDO|DHSC|Department of Health and Social Care") |
str_detect(iati_identifier, "DFID") |
str_detect(iati_identifier, "XI-IATI-AGR")      # AgResults partially funded
) %>%
# define fund and funder
mutate(gov_funder = if_else(str_detect(org_name, "Health"), "Department of Health and Social Care",
"Foreign, Commonwealth and Development Office"),
fund = case_when(
# IDRC GAMRIF projects
str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(org_name, "Health") ~ "DHSC - Global Health Security - GAMRIF",
# Other DHSC partnerships
str_detect(org_name, "Health") ~ "DHSC - Global Health Research - Partnerships",
# FCDO funding
TRUE ~ "FCDO Research - Partnerships"
)) %>%
select(iati_identifier, gov_funder, fund) %>%
unique()
# Combine 2A and 2B
partnership_activities <- plyr::rbind.fill(partner_activities_via_title, partner_activities_via_funder)
# Filter original data
partnership_activities <- org_activity_list %>%
inner_join(partnership_activities, by = "iati_identifier")
# Save to Rdata file
saveRDS(partnership_activities, file = "Outputs/partnership_activities.rds")
partner_activity_comb <- plyr::rbind.fill(partner_activity_extract, partnership_activities) %>%
filter(default_flow_type == "ODA" | is.na(default_flow_type))
# Extract base activity information - hierarchy and status
activity_list_base <- partner_activity_comb %>%
select(iati_identifier, hierarchy,
activity_status = activity_status.name,
activity_id,
gov_funder,
fund) %>%
unique()
# 1) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
# title
filter(lengths(title.narrative) != 0) %>%
unnest(cols = title.narrative) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
# description
filter(lengths(description) != 0) %>%
unnest(cols = description) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, activity_title, type.name, narrative) %>%
filter(lengths(narrative) != 0) %>%
unnest(cols = narrative) %>%
filter(lang.name == "English") %>%
unique()
# Summarise records with multiple "General" descriptions
activity_list_unnest_1 <- activity_list_unnest_1 %>%
group_by(iati_identifier, activity_title, type.name) %>%
summarise(text = paste(coalesce(text, ""), collapse = "\n\n")) %>%
spread(key = type.name, value = text) %>%
mutate(activity_description = if_else(!is.na(Objectives), paste0(General, "\n\n", Objectives), General)) %>%
ungroup()
# 2) Unlist recipient countries
activity_list_unnest_2 <- partner_activity_comb %>%
filter(lengths(recipient_country) != 0) %>%
unnest(cols = recipient_country) %>%
select(iati_identifier, country.name) %>%
group_by(iati_identifier) %>%
unique() %>%
summarise(country_name = paste(coalesce(country.name, ""), collapse = ", "))
# 3) Unlist sectors
activity_list_unnest_3 <- partner_activity_comb %>%
filter(lengths(sector) != 0) %>%
unnest(cols = sector) %>%
select(iati_identifier, sector.name) %>%
filter(sector.name != "Vocabulary 99 or 98") %>%
group_by(iati_identifier) %>%
unique() %>%
summarise(sector_name = paste(coalesce(sector.name, ""), collapse = ", ")) %>%
ungroup()
# 4) Unlist implementing organisations
activity_list_unnest_4 <- partner_activity_comb %>%
select(-activity_id) %>%  # newly added?
filter(lengths(participating_org) != 0) %>%
unnest(cols = participating_org) %>%
select(iati_identifier, role.name, narrative, ref) %>%
filter(lengths(narrative) != 0,
role.name == "Implementing") %>%
unnest(cols = narrative) %>%
group_by(iati_identifier, role.name, ref) %>%
slice(1) %>%
ungroup() %>%
select(-lang.code, -lang.name) %>%
unique()
# Identify activities with no implementing partner info
no_partner_info <- activity_list_unnest_4 %>%
select(iati_identifier) %>%
mutate(has_implementing_partner_info = "Yes") %>%
unique() %>%
right_join(partner_activity_comb, by = "iati_identifier") %>%
filter(is.na(has_implementing_partner_info)) %>%
select(iati_identifier) %>%
unique()
# Add country locations based on IATI references or lookup
# (takes ~10 mins to run)
activity_list_unnest_4 <- activity_list_unnest_4 %>%
# Extract 2 digit country code from org references (where populated)
mutate(country_code = if_else((!is.na(ref) & substr(ref,3,3) == "-" & !(substr(ref,1,2) %in% c("XI", "XM"))), substr(ref,1,2), "")) %>%
# Look up country from both country code and organisation name
mutate(org_country_iati = map(country_code, country_code_to_name),
org_country_other = map(text, org_country_lookup)) %>%
mutate(org_country_iati = unlist(org_country_iati),
org_country_other = unlist(org_country_other)) %>%
# Take best of both country lookup results
mutate(org_country = coalesce(org_country_iati, org_country_other)) %>%
select(-org_country_iati, -org_country_other)
# Save implementing orgs with country to file
org_names_and_locations_1 <- activity_list_unnest_4 %>%
select(project_id = iati_identifier,
organisation_name = text,
organisation_country = org_country) %>%
mutate(organisation_role = 2)
# Collapse implementing orgs
activity_list_unnest_4_partner_names <- activity_list_unnest_4 %>%
select(iati_identifier, text) %>%
filter(!is.na(text)) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(partner = paste(coalesce(text, ""), collapse = ", "))
activity_list_unnest_4_partner_countries <- activity_list_unnest_4 %>%
select(iati_identifier, org_country) %>%
filter(!is.na(org_country)) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(partner_country = paste(coalesce(org_country, ""), collapse = ", "))
# Combine in single dataset
activity_list_unnest_4 <- activity_list_unnest_4 %>%
select(iati_identifier) %>%
unique() %>%
left_join(activity_list_unnest_4_partner_names, by = "iati_identifier") %>%
left_join(activity_list_unnest_4_partner_countries, by = "iati_identifier")
# 5) Unlist publishing org
activity_list_unnest_5 <- partner_activity_comb %>%
filter(lengths(reporting_org.narrative) != 0) %>%
unnest(cols = reporting_org.narrative) %>%
select(iati_identifier,
reporting_org_ref = reporting_org.ref,
reporting_org = text) %>%
# take top (English) name in cases of different languages
group_by(iati_identifier, reporting_org_ref) %>%
slice(1) %>%
unique() %>%
ungroup()
# Lookup country (takes ~10 mins to run)
activity_list_unnest_5 <- activity_list_unnest_5 %>%
# Extract 2 digit country code from org references (where populated)
mutate(country_code = if_else((!is.na(reporting_org_ref) & substr(reporting_org_ref,3,3) == "-" & !(substr(reporting_org_ref,1,2) %in% c("XI", "XM"))),
substr(reporting_org_ref,1,2), "")) %>%
# Look up country from both country code and organisation name
mutate(org_country_iati = map(country_code, country_code_to_name),
org_country_other = map(reporting_org, org_country_lookup)) %>%
mutate(org_country_iati = unlist(org_country_iati),
org_country_other = unlist(org_country_other)) %>%
# Take best of both country lookup results
mutate(reporting_org_country = coalesce(org_country_iati, org_country_other)) %>%
select(-org_country_iati, -org_country_other)
# Add on to org file to save
org_names_and_locations_1 <- org_names_and_locations_1 %>%
rbind(activity_list_unnest_5 %>%
select(project_id = iati_identifier,
organisation_name = reporting_org,
organisation_country = reporting_org_country) %>%
mutate(organisation_role = 1) %>% # leading
unique())
# 6) Unlist and aggregate budget
activity_list_unnest_6 <- partner_activity_comb %>%
select(-activity_id) %>%
filter(lengths(budget) != 0) %>%
unnest(cols = budget) %>%
select(iati_identifier,
budget_status = status.name,
amount = value.value,
currency = value.currency.code,
period_start,
period_end)
# Find activities with multiple budgets for same period (i.e. indicative and committed)
multiple_budgets <- activity_list_unnest_6 %>%
select(iati_identifier, budget_status, period_start, period_end) %>%
unique() %>%
group_by(iati_identifier, period_start, period_end) %>%
summarise(count = n()) %>%
filter (count > 1)
# Keep only the committed budget in these cases
activity_list_unnest_6 <- activity_list_unnest_6 %>%
filter(!(iati_identifier %in% multiple_budgets$iati_identifier) |
budget_status == "Committed")
# Sum to get total budget per activity
activity_list_unnest_6 <- activity_list_unnest_6 %>%
group_by(iati_identifier, currency) %>%
summarise(period_start = min(period_start),
period_end = max(period_end),
amount = sum(amount))
# 7) Unlist start/end dates
activity_list_unnest_7 <- partner_activity_comb %>%
unnest(cols = activity_date) %>%
select(iati_identifier,
date = iso_date,
date_type = type.name) %>%
# take the first date in cases of two of the same time
group_by(iati_identifier, date_type) %>%
slice(1) %>%
spread(key = date_type, value = date) %>%
mutate(start_date = coalesce(`Actual start`, `Planned start`),
end_date = coalesce(`Actual end`, `Planned End`)) %>%
select(iati_identifier, start_date, end_date)
# Prepare results data frame and counters
transaction_list <- data.frame()
# Run extraction, stopping when no new transactions are returned
# (takes ~5 mins)
for (id in partner_activity_comb$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(id, "-", page))
x <- nrow(transaction_list)
transaction_list <- transactions_extract(id, page, transaction_list)
page <- page + 1
y <- nrow(transaction_list)
new_rows = y - x
}
}
# Save to Rdata file
saveRDS(transaction_list, file = "Outputs/transaction_list.rds")
# Extract recipient countries (where included in transactions)
transaction_countries <- transaction_list %>%
select(iati_identifier, recipient_countries) %>%
unique() %>%
# unnest countries
filter(lengths(recipient_countries) != 0) %>%
unnest(cols = recipient_countries) %>%
select(-country.url, -country.code) %>%
# rename and remove blanks
rename(recipient_country = country.name) %>%
filter(!is.na(recipient_country)) %>%
unique()
# Summarise countries for joining to main dataset
transaction_countries_summarised <- transaction_countries %>%
group_by(iati_identifier) %>%
summarise(recipient_country = paste(coalesce(recipient_country, ""), collapse = ", "))
# Extract receiver organisations
transaction_receiver_orgs <- transaction_list %>%
select(iati_identifier, receiver_organisation.narrative) %>%
unique() %>%
# unnest organisation names
filter(lengths(receiver_organisation.narrative) != 0) %>%
unnest(cols = receiver_organisation.narrative) %>%
select(-lang.code, -lang.name) %>%
rename(transaction_receiver_name = text) %>%
# Exclude blanks, other text
filter(!is.na(transaction_receiver_name),
!str_detect(str_to_lower(transaction_receiver_name), "reimbursement"),
!str_detect(str_to_lower(transaction_receiver_name), "disbursement")) %>%
unique()
# Add to organisation name and country database
receiver_orgs_to_save <- transaction_receiver_orgs %>%
inner_join(no_partner_info, by = "iati_identifier") %>%
rename(project_id = iati_identifier,
organisation_name = transaction_receiver_name) %>%
# Look up country from both country code and organisation name
mutate(organisation_country = map(organisation_name, org_country_lookup)) %>%
mutate(organisation_country = unlist(organisation_country)) %>%
mutate(organisation_role = 2) # partners
# Add on to org file to save
org_names_and_locations_1 <- org_names_and_locations_1 %>%
rbind(receiver_orgs_to_save)
# Summarise orgs for joining to main dataset
transaction_orgs_summarised <- transaction_receiver_orgs %>%
group_by(iati_identifier) %>%
summarise(transaction_receiver_name = paste(coalesce(transaction_receiver_name, ""), collapse = ", "))
# Join on transactions country and org info to relevant datasets
activity_list_unnest_2 <- partner_activity_comb %>%
select(iati_identifier) %>%
left_join(activity_list_unnest_2, by = "iati_identifier") %>%
left_join(transaction_countries_summarised, by = "iati_identifier") %>%
mutate(recipient_country = coalesce(recipient_country, country_name)) %>%
select(-country_name)
activity_list_unnest_4 <- partner_activity_comb %>%
select(iati_identifier) %>%
left_join(activity_list_unnest_4, by = "iati_identifier") %>%
left_join(transaction_orgs_summarised, by = "iati_identifier") %>%
mutate(partner = coalesce(partner, transaction_receiver_name)) %>%
select(-transaction_receiver_name)
# Join unnested info to original data
activity_list <- activity_list_base %>%
left_join(activity_list_unnest_1, by = "iati_identifier") %>%
left_join(activity_list_unnest_2, by = "iati_identifier") %>%
left_join(activity_list_unnest_3, by = "iati_identifier") %>%
left_join(activity_list_unnest_4, by = "iati_identifier") %>%
left_join(activity_list_unnest_5, by = "iati_identifier") %>%
left_join(activity_list_unnest_6, by = "iati_identifier") %>%
left_join(activity_list_unnest_7, by = "iati_identifier")
# Assign a reporting org name if missing
activity_list <- activity_list %>%
mutate(reporting_org = coalesce(reporting_org, reporting_org_ref, gov_funder))
# Reorder columns and add date of refresh
activity_list <- activity_list %>%
select(iati_identifier, reporting_org_ref, reporting_org, reporting_org_country,
hierarchy, activity_status, activity_id,
activity_title, activity_description, start_date, end_date,
recipient_country, sector_name,
partner, partner_country,
gov_funder, fund,
amount, period_start, period_end, currency) %>%
unique() %>%
mutate(refresh_date = Sys.Date())
activity_list <- activity_list %>%
# Add missing FCDO activity IDs (IDRC and AgResults)
rename(programme_id = activity_id) %>%
mutate(programme_id = case_when(str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_description, "CLARE") ~ "GB-GOV-1-300126",
str_detect(iati_identifier, "XM-DAC-301-2") & str_detect(activity_description, "CARIAA") ~ "GB-1-203506",
str_detect(iati_identifier, "XI-IATI-AGR") ~ "GB-1-203052",
TRUE ~ programme_id),
# Add Fund and Funder label
fund = case_when(
str_detect(programme_id, "GB-GOV-1-|GB-1-") ~ "FCDO Research - Programmes",
str_detect(programme_id, "GB-GOV-10") ~ "DHSC - Global Health Research - Partnerships",
TRUE ~ fund),
gov_funder = case_when(
str_detect(programme_id, "GB-GOV-1-|GB-1-") ~ "Foreign, Commonwealth and Development Office",
str_detect(programme_id, "GB-GOV-10") ~ "Department of Health and Social Care",
TRUE ~ gov_funder))
# Save to Rdata file
saveRDS(activity_list, file = "Outputs/partner_activity_list.rds")
# Save org names and countries to file
saveRDS(org_names_and_locations_1, file = "Outputs/org_names_and_locations_1.rds")
# Clear environment
rm(partner_activity_extract, partnership_activities, partner_activities_via_title, partner_activities_via_funder,
result, new_rows, x, y, page, ri_linked_activites,
activity_list_base, activity_list_unnest_1, activity_list_unnest_2, activity_list_unnest_3, activity_list_unnest_4,
activity_list_unnest_4_partner_countries, activity_list_unnest_4_partner_names, activity_list_unnest_5,
activity_list_unnest_6, activity_list_unnest_7, unlinked_partner_iati_activity_ids)
