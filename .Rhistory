duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
project_table_extract <- project_table %>%
slice(3326:3326) %>%
mutate(len_title = nchar(title),
len_id = nchar(project_id),
len_abstract = nchar(abstract),
len_extending_org = nchar(extending_org),
len_subject = nchar(subject),
len_link = nchar(link))
dbAppendTable(con_live, "Project", test <- slice(project_table, 3326:3326), row.names = NULL)
project_table_extract <- project_table %>%
slice(3326:3326) %>%
mutate(len_title = nchar(title),
len_id = nchar(project_id),
len_abstract = nchar(abstract),
len_extending_org = nchar(extending_org),
len_subject = nchar(subject),
len_link = nchar(link))
write.csv(project_table_extract, "test.csv")
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
# remove special characters
mutate(title = str_replace_all(title, "‘|’", ""),
abstract = str_replace_all(abstract, "‘|’", "")) %>%
rename(project_id = id) %>%
unique()
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
dbAppendTable(con_live, "Project", test <- slice(project_table, 3326:3326), row.names = NULL)
dbAppendTable(con_live, "Project", test <- project_table, row.names = NULL)
dbAppendTable(con_live, "Project", project_table, row.names = NULL)
dbAppendTable(con_live, "Project", head(project_table, 4000), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 4000:5000), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5000:6000), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5000:5500), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5000:5250), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5000:5150), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5000:5100), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5140), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5120), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5110), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5105), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5103), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5102), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5101), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5100), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5101:5101), row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(len_title = nchar(title),
len_id = nchar(project_id),
len_abstract = nchar(abstract),
len_extending_org = nchar(extending_org),
len_subject = nchar(subject),
len_link = nchar(link))
write.csv(project_table_extract, "test.csv")
project_table_extract <- project_table %>%
slice(5101:5102) %>%
mutate(len_title = nchar(title),
len_id = nchar(project_id),
len_abstract = nchar(abstract),
len_extending_org = nchar(extending_org),
len_subject = nchar(subject),
len_link = nchar(link))
write.csv(project_table_extract, "test.csv")
dbAppendTable(con_live, "Project", slice(project_table, 5102:5102), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5103:5103), row.names = NULL)
dbAppendTable(con_live, "Project", slice(project_table, 5100:5100), row.names = NULL)
project_table_extract <- project_table %>%
slice(5100:5104) %>%
mutate(len_title = nchar(title),
len_id = nchar(project_id),
len_abstract = nchar(abstract),
len_extending_org = nchar(extending_org),
len_subject = nchar(subject),
len_link = nchar(link))
write.csv(project_table_extract, "test.csv")
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(abstract = "")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(project_id = "")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "")
View(project_table_extract)
View(project_table_extract)
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "",
project_id = "1")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
View(project_table_extract)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "",
project_id = "1",
amount = 100)
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "",
project_id = "1",
currency = "GBP")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "",
project_id = "1",
currency = "GBP",
extending_org = "British")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "",
project_id = "1",
currency = "GBP",
extending_org = "British",
start_date = "2020-01-01")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "",
project_id = "1",
currency = "GBP",
extending_org = "British",
start_date = "2020-01-01",
end_date = "2020-01-01")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(title = "",
abstract = "",
project_id = "1",
currency = "GBP",
extending_org = "British",
start_date = "2020-01-01",
end_date = NA)
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(end_date = "2020-01-01")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
project_table_extract <- project_table %>%
slice(5101:5101) %>%
mutate(end_date = "")
dbAppendTable(con_live, "Project", project_table_extract, row.names = NULL)
View(project_table)
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
# remove special characters
mutate(title = str_replace_all(title, "‘|’", ""),
abstract = str_replace_all(abstract, "‘|’", "")) %>%
# format null date fields correctly
mutate(end_date = if_else(end_date == "", NA, end_date)) %>%
rename(project_id = id) %>%
unique()
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
# remove special characters
mutate(title = str_replace_all(title, "‘|’", ""),
abstract = str_replace_all(abstract, "‘|’", "")) %>%
# format null date fields correctly
mutate(end_date = if_else(end_date == "", NULL, end_date)) %>%
rename(project_id = id) %>%
unique()
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
# remove special characters
mutate(title = str_replace_all(title, "‘|’", ""),
abstract = str_replace_all(abstract, "‘|’", "")) %>%
# format null date fields correctly
mutate(end_date = if_else(end_date == "", NA_character_, end_date)) %>%
rename(project_id = id) %>%
unique()
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
dbAppendTable(con_live, "Project", slice(project_table, 5101:5101), row.names = NULL)
# Read in org names and countries from previous script
org_names_and_locations_1 <- readRDS(file = "Outputs/org_names_and_locations_1.rds")
ukri_projects_final <- readRDS("Outputs/ukri_projects_final.rds")
org_names_and_locations_2 <- readRDS(file = "Outputs/org_names_and_locations_2.rds")
View(ukri_projects_final)
# Define URL to extract ODA projects
path <- paste0("https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)")
# Extract data from the NIHR API
request <- GET(url = path)
request$status_code # 200 = success
# Convert to text and read from JSON
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Extract dataframe
nihr_projects <- response$records
# Remove unneeded columns
nihr_projects <- nihr_projects %>%
select(-1, -2)
# Remove "field." from column names
names(nihr_projects) <- gsub(pattern = "fields.", replacement = "", x = names(nihr_projects))
# Select order of columns
nihr_projects_final <- nihr_projects %>%
mutate(id = project_id,
Funder = "Department of Health and Social Care",
Fund = "Global Health Research - Programmes",
recipient_country = "",
lead_org_country = ctrynm,
iati_id = "",
subject = programme,
currency = "GBP",
status = if_else(project_status %in% c("Active", "Contracted"), "Active",
if_else(project_status %in% c("Complete"), "Closed",
if_else(project_status %in% c("Discontinued"), "Cancelled", "Unknown"))),
period_start = "",
period_end = "",
partner_org_name = "",
partner_org_country = "",
extending_org = "NIHR",
last_updated = as.Date(record_timestamp)) %>%
select(id,
title = project_title,
abstract = scientific_abstract,
start_date, end_date,
amount = award_amount_from_dh,
period_start,
period_end,
currency,
extending_org,
lead_org_name = contracted_organisation,
lead_org_country,
partner_org_name, partner_org_country,
iati_id,
Fund,
Funder,
recipient_country,
subject,
status,
last_updated)
# Add NIHR link to awards
nihr_projects_final <- nihr_projects_final %>%
mutate(link = paste0("https://fundingawards.nihr.ac.uk/award/", id))
nihr_projects_final <- readRDS("Outputs/nihr_projects_final.rds")
View(nihr_projects_final)
# Read in list of IATI activities (from funders and select delivery partners)
iati_activity_list <- readRDS(file = "Outputs/gov_list_final.rds") %>%
rename(recipient_country = all_countries)
partner_iati_list <- readRDS(file = "Outputs/partner_activity_list.rds")
# Filter gov department records for minimum granularity
iati_projects <- iati_activity_list %>%
filter(  str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
str_detect(iati_identifier, "1-205053") |   # South Asia Country Research Fund (FCDO)
str_detect(iati_identifier, "1-300708") |   # Evidence Fund (FCDO)
#   str_detect(iati_identifier, "UKSA") |   # UKSA awards (GCRF)
#   str_detect(iati_identifier, "NEWT-MO") |   # Met Office awards (Newton)
#   str_detect(iati_identifier, "NEWT-BIS") |  # Other Met Office awards?
#   str_detect(iati_identifier, "NEWT-BC") |  # British Council
#   str_detect(iati_identifier, "GCRF-Clm") |  # Academies
#   str_detect(iati_identifier, "RS-GCRF|NEWT-RS") |  # Royal Society
#   str_detect(iati_identifier, "RAENG-GCRF|NEWT-RAE") |  # Royal Academy of Engineering
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
filter(flow_type == "ODA") %>%
mutate(fund = if_else(is.na(fund), "Unknown", fund)) %>%
plyr::rbind.fill(partner_iati_list) # Add partner activities
# Add UKRI beneficiary countries
ukri_iati_projects <- iati_activity_list %>%
filter(extending_org == "UK Research & Innovation") %>%
mutate(gtr_id = str_replace(iati_identifier, "GB-GOV-13-FUND--GCRF-", "")) %>%
mutate(gtr_id = str_replace(gtr_id, "GB-GOV-13-FUND--Newton-", "")) %>%
mutate(gtr_id = str_replace_all(gtr_id, "_", "/")) %>%
select(gtr_id, iati_country = recipient_country) %>%
filter(!is.na(iati_country)) %>%
unique()
ukri_projects_with_countries <- ukri_projects_final %>%
left_join(ukri_iati_projects, by = c("id" = "gtr_id")) %>%
mutate(recipient_country = coalesce(iati_country, recipient_country)) %>%
select(-iati_country)
# Keep required fields
iati_projects_final <- iati_projects %>%
mutate(Funder = coalesce(gov_funder, reporting_org),
partner_org_name = partner,
partner_org_country = partner_country,
lead_org_name = coalesce(extending_org, reporting_org),
lead_org_country = reporting_org_country,
extending_org = coalesce(extending_org, reporting_org),
status = if_else(!is.na(end_date),
if_else(Sys.Date() <= end_date, "Active", "Closed"), "Unknown"),
last_updated = quarter_end_date) %>%
select(id = iati_identifier,
title = activity_title,
abstract = activity_description,
start_date,
end_date,
amount,
period_start,
period_end,
currency,
extending_org,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country,
iati_id = programme_id,
Fund = fund,
Funder,
recipient_country,
subject = sector_name,
status,
last_updated
)
View(iati_projects_final)
# Add missing fields and format Funder/Fund field
wellcome_grants_formatted <- wellcome_grants %>%
mutate(status = if_else(Sys.Date() <= `Planned Dates: End Date`, "Active", "Closed"),
extending_org = "Wellcome Trust",
currency = "GBP",
partner_org_name = `Other Implementing Organisations`,
partner_org_country = `Research Location Countries`,
recipient_country = "",
period_start = "",
period_end = "",
iati_id = "",
Funder = if_else(str_detect(`CoFunders`, "National Institute for Health Research"),
"Department of Health and Social Care", `CoFunders`),
Fund = if_else(Funder == "Department of Health and Social Care",
"Global Health Research - Partnerships", "FCDO Research - Programmes"),
last_updated = quarter_end_date) %>%
filter(`ODA Funding` > 0)
# Select desired variables
wellcome_grants_formatted <- wellcome_grants_formatted %>%
select(id = `InternalID`,
title = Title,
abstract = Description,
start_date = `Planned Dates: Start Date`,
end_date = `Planned Dates: End Date`,
amount = `ODA Funding`,
period_start,
period_end,
currency,
extending_org,
lead_org_name = `Recipient Org: Name`,
lead_org_country = `Recipient Org: Country`,
partner_org_name,
partner_org_country,
iati_id,
Fund,
Funder,
recipient_country,
subject = `PartnershipName`,
status,
last_updated
)
# Format date fields for merging
wellcome_grants_final <- wellcome_grants_formatted %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
link = "https://wellcome.org/grant-funding/funded-people-and-projects")
View(wellcome_grants_final)
test <- filter(project_table, end_date == "")
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
# remove special characters
mutate(title = str_replace_all(title, "‘|’", ""),
abstract = str_replace_all(abstract, "‘|’", "")) %>%
rename(project_id = id) %>%
unique()
test <- filter(project_table, end_date == "")
View(test)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Project]")
project_first_10 <- dbFetch(recordSet, n = -1)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
# remove special characters
mutate(title = str_replace_all(title, "‘|’", ""),
abstract = str_replace_all(abstract, "‘|’", "")) %>%
mutate(end_date = if_else(end_date == "", NA_character_, end_date)) %>%
rename(project_id = id) %>%
unique()
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
dbAppendTable(con_live, "Project", project_table, row.names = NULL)
dbAppendTable(con_live, "Project", head(project_table, 5500), row.names = NULL)
dbAppendTable(con_live, "Project", head(project_table, 6000), row.names = NULL)
