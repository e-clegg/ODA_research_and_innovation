extending_org = "Wellcome Trust",
currency = "GBP",
partner_org_name = `Other Implementing Organisations`,
partner_org_country = `Research Location Countries`,
recipient_country = "",
period_start = "",
period_end = "",
iati_id = "",
Funder = if_else(str_detect(`CoFunders`, "National Institute for Health Research"),
"Department of Health and Social Care", `CoFunders`),
Fund = if_else(Funder == "Department of Health and Social Care",
"Global Health Research - Partnerships", "FCDO Research - Programmes"),
last_updated = quarter_end_date) %>%
filter(`ODA Funding` > 0)
# Select desired variables
wellcome_grants_formatted <- wellcome_grants_formatted %>%
select(id = `InternalID`,
title = Title,
abstract = Description,
start_date = `Planned Dates: Start Date`,
end_date = `Planned Dates: End Date`,
amount = `ODA Funding`,
period_start,
period_end,
currency,
extending_org,
lead_org_name = `Recipient Org: Name`,
lead_org_country = `Recipient Org: Country`,
partner_org_name,
partner_org_country,
iati_id,
Fund,
Funder,
recipient_country,
subject = `PartnershipName`,
status,
last_updated
)
# Format date fields for merging
wellcome_grants_final <- wellcome_grants_formatted %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
link = "https://wellcome.org/grant-funding/funded-people-and-projects")
# Write lead org names and countries to file
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(wellcome_grants_final,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Write partner org names and countries to file (where simple to do)
wellcome_partners <- wellcome_grants_final %>%
select(id, partner_org_name, partner_org_country) %>%
# Exclude missings, multiple and miscellaneous partners
filter(!is.na(partner_org_name),
!str_detect(partner_org_name, "Misc")) %>%
# Separate rows with multiple partners
separate_rows(partner_org_name, sep = ",", convert = FALSE) %>%
mutate(partner_org_name = str_trim(partner_org_name)) %>%
mutate(new_country = map(partner_org_name, org_country_lookup)) %>%
unnest(cols = new_country) %>%
mutate(partner_org_country = coalesce(new_country, partner_org_country)) %>%
filter(!str_detect(partner_org_country, ",")) %>%
select(-new_country)
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(wellcome_partners,
project_id = id,
organisation_name = partner_org_name,
organisation_country = partner_org_country) %>%
mutate(organisation_role = 2))
rm(wellcome_grants)
rm(wellcome_grants_formatted)
# Detect all Excel files in Data folder
path = "Inputs//IATI returns"
file_list <- list.files(path = path, pattern='*.xlsx', full.names = TRUE)
# Read all files into R
data_list <- lapply(file_list,
read_excel,
sheet = 2)
# Bind the rows, adding an ID field for the Excel file number
partner_spreadsheet_data <- bind_rows(data_list, .id = "file_number")
# Reformat to match other dataset
collated_spreadsheet_data <- partner_spreadsheet_data %>%
rename(id = `Extending organisation - award ID`,
title = `Award title`,
abstract = `Award description`,
start_date = `Start date`,
end_date = `End date`,
amount = `Award amount (Â£)`,
recipient_country = `Beneficiary country`,
extending_org = `Extending organisation - name`,
lead_org_name = `Lead organisation - name`,
lead_org_country = `Lead organisation - country`,
partner_org_name = `Implementing partner(s) - name`,
partner_org_country = `Implementing partner(s) - country`,
iati_id = `Funder programme - IATI ID`,
link = `Data source`
) %>%
mutate(start_date = as.character(start_date),
end_date = as.character(end_date),
currency = coalesce(Currency, "GBP"),
period_start = "",
period_end = "",
subject = "",
status = coalesce(if_else(end_date >= Sys.Date(), "Active", "Closed"), "Unknown"),
last_updated = quarter_end_date
) %>%
select(-`No.`, -`Funder programme - name`, -Notes, -file_number, -Currency,
-`Aims/Objectives`, -`Investigator(s) - name`, -`FCDO programme - name`,
-`FCDO programme - IATI ID`, -Link)
# Save as R file (to read back in if needed)
saveRDS(collated_spreadsheet_data, file = "Outputs/collated_spreadsheet_data.rds")
# Write lead org names and countries to file
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(collated_spreadsheet_data,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Write partner org names and countries to file (where simple to do)
spreadsheet_partners <- collated_spreadsheet_data %>%
select(id, partner_org_name, partner_org_country) %>%
# Exclude missings, multiple and miscellaneous partners
filter(!is.na(partner_org_name),
!str_detect(partner_org_name, ",|;"),
!str_detect(partner_org_country, ",|;|N/A"))
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(spreadsheet_partners,
project_id = id,
organisation_name = partner_org_name,
organisation_country = partner_org_country) %>%
mutate(organisation_role = 2))
rm(partner_spreadsheet_data)
rm(data_list)
rm(file_list)
# Reformat to match other datasetS
roda_extract_gcrf_final <- roda_extract_gcrf %>%
rename(id = `RODA identifier`,
abstract = Description,
title = Title,
amount = Amount,
recipient_country = `Recipient country`,
extending_org = `Delivery partner`,
lead_org_name = `Lead Organisation`
) %>%
mutate(Fund = "Global Challenges Research Fund (GCRF)",
Funder = "Department for Business, Energy and Industrial Strategy",
start_date = as.character(as.Date(coalesce(`Actual start date`, `Planned start date`), "%d %B %Y")),
end_date = as.character(as.Date(coalesce(`Actual end date`, `Planned end date`), "%d %B %Y")),
lead_org_country = map(lead_org_name, org_country_lookup),
partner_org_name = "",
partner_org_country = "",
iati_id = "",
currency = "GBP",
status = if_else(Status %in% c("Spend in progress", "Agreement in place", "Delivery", "Finalisation"), "Active",
if_else(Status %in% c("Completed"), "Closed",
if_else(Status %in% c("Cancelled"), "Cancelled", "Unknown"))),
period_start = "",
period_end = "",
subject = "",
last_updated = quarter_end_date,
link = ""
) %>%
unnest(cols = lead_org_country) %>%
# suppress display of active project end dates that have passed
mutate(end_date = if_else(status == "Active" & Sys.Date() <= end_date, end_date, "")) %>%
# remove unecessary variables
select(-Level, -`Recipient region`, -`Planned start date`, -`Actual start date`,  -`Planned end date`,
-`Actual end date`, -Status)
roda_extract_newton_final <- roda_extract_newton %>%
rename(id = `RODA ID`,
title = Title,
abstract = Description,
amount = Amount,
recipient_country = `Recipient country`,
extending_org = `Delivery partner`,
lead_org_name = `Lead Organisation`,
partner_org_name = `Partner organisations`) %>%
mutate(Fund = "Newton Fund",
Funder = "Department for Business, Energy and Industrial Strategy",
lead_org_country = map(lead_org_name, org_country_lookup),
partner_org_country = "",
iati_id = "",
link = "",
start_date = as.character(as.Date(coalesce(`Actual start date`, `Planned start date`), "%d %B %Y")),
end_date = as.character(as.Date(coalesce(`Actual end date`, `Planned end date`), "%d %B %Y")),
currency = "GBP",
status = if_else(Status %in% c("Spend in progress", "Agreement in place", "Delivery", "Finalisation"), "Active",
if_else(Status %in% c("Completed"), "Closed",
if_else(Status %in% c("Cancelled"), "Cancelled", "Unknown"))),
period_start = "",
period_end = "",
subject = "",
last_updated = quarter_end_date) %>%
unnest(cols = lead_org_country) %>%
# suppress display of end dates that have passed
mutate(end_date = if_else(Sys.Date() <= end_date, end_date, "")) %>%
select(-Level, -`Recipient region`, -`Planned start date`, -Status,
-`Planned end date`, -`Actual start date`, -`Actual end date`)
# Write lead org names and countries to file
org_names_and_locations_3 <- org_names_and_locations_3 %>%
rbind(select(roda_extract_gcrf_final,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1)) %>%
rbind(select(roda_extract_newton_final,
project_id = id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
rm(roda_extract_gcrf)
rm(roda_extract_newton)
all_projects <- rbind(ukri_projects_with_countries,
nihr_projects_final,
iati_projects_final,
wellcome_grants_final,
collated_spreadsheet_data,
roda_extract_gcrf_final, roda_extract_newton_final) %>%
unique() %>%
ungroup()
# Manually edit country info for Chevening Scholarships
all_projects_tidied <- all_projects %>%
mutate(lead_org_country = if_else(Fund == "Chevening Scholarships", "United Kingdom", lead_org_country),
start_date = if_else(Fund == "Chevening Scholarships", "", start_date))
# Remove non-research partners
# (linked partner data from non-RED managed programmes)
all_projects_tidied <- all_projects_tidied %>%
filter(!(extending_org %in% c("Sightsavers",
"Coffey International Development Limited, a Tetra Tech Company")))
# Correct missing IDS name (ARPA activity)
all_projects_tidied <- all_projects_tidied %>%
mutate(extending_org = if_else(extending_org == "GB-COH-877338",
"Institute of Development Studies", extending_org))
# Remove WHO non-research/innovation activities
all_projects_tidied <- all_projects_tidied %>%
filter(!(extending_org == "World Health Organization") |
str_detect(title, "research|innovation"))
# Add FCDO DevTracker links in absence of other public source
all_projects_tidied <- all_projects_tidied %>%
mutate(link = if_else((str_detect(iati_id, "GB-GOV-1-") | str_detect(iati_id, "GB-1-")) & is.na(link),
paste0("https://devtracker.fcdo.gov.uk/projects/", iati_id, "/summary"), link))
saveRDS(all_projects_tidied, file = "Outputs/all_projects_tidied.rds")
# Save org names and countries to file
org_names_and_locations <- rbind(org_names_and_locations_1, org_names_and_locations_2, org_names_and_locations_3) %>%
mutate(organisation_name = str_trim(organisation_name)) %>%
filter(!is.na(organisation_name)) %>%
unique()
saveRDS(org_names_and_locations, file = "Outputs/org_names_and_locations.rds")
# Read in collated dataset from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
org_names_and_locations <- readRDS("Outputs/org_names_and_locations.rds")
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
rename(project_id = id) %>%
unique()
# check uniqueness
test <- unique(project_table$project_id)
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Project]")
dbAppendTable(con_live, "Project", project_table, row.names = NULL)
dbAppendTable(con_live, "Project", head(project_table, 3400), row.names = NULL)
dbAppendTable(con_live, "Project", head(project_table, 3200), row.names = NULL)
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Project]")
dbAppendTable(con_live, "Project", head(project_table, 3300), row.names = NULL)
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Project]")
project_table_extract <- project_table %>%
slice(3200:3300) %>%
mutate(len_title = nchar(title),
len_id = nchar(project_id),
len_abstract = nchar(abstract),
len_extending_org = nchar(extending_org),
len_subject = nchar(subject),
len_link = nchar(link))
max(project_table_extract$len_subject, na.rm = TRUE)
max(project_table_extract$len_title, na.rm = TRUE)
max(project_table_extract$len_link, na.rm = TRUE)
max(project_table_extract$len_extending_org, na.rm = TRUE)
View(project_table_extract)
max(project_table_extract$len_id, na.rm = TRUE)
max(project_table_extract$len_abstract, na.rm = TRUE)
max(project_table_extract$len_subject, na.rm = TRUE)
max(project_table_extract$len_title, na.rm = TRUE)
max(project_table_extract$len_link, na.rm = TRUE)
max(project_table_extract$len_extending_org, na.rm = TRUE)
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
abstract = str_replace_all(abstract, "$", "USD") %>%
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
rename(project_id = id) %>%
unique()
# Read in collated dataset from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
org_names_and_locations <- readRDS("Outputs/org_names_and_locations.rds")
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
# limit character fields to 255 chars
mutate(title = if_else(nchar(title) > 255, substr(title, 1, 255), title),
abstract = if_else(nchar(abstract) > 5000, substr(abstract, 1, 5000), abstract),
abstract = str_replace_all(abstract, "$", "USD"),
subject = if_else(nchar(subject) > 255, substr(subject, 1, 255), subject),
link = if_else(nchar(link) > 255, "", link)) %>%
rename(project_id = id) %>%
unique()
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Project]")
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
funder_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(project_id = id, funder = Funder,
fund = Fund, funder_iati_id = iati_id) %>%
unique()
organisation_table <- org_names_and_locations
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = recipient_country,
location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, ""))) %>%
select(project_id = id, location_country, beneficiary_country) %>%
unique()
# Convert location vs. beneficiary country data to long format
country_table <- country_table %>%
gather(key = "country_type", value = "country", -project_id) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
country = str_to_lower(country))
# Clean country names
country_table_cleaned <- country_table %>%
mutate(country = str_replace_all(country, "\\(the\\)", ""),  # remove (the)
country = gsub("[()]", "", country),                  # remove all parentheses
country = str_replace_all(country, "tanzania, united republic of", "tanzania"),
country = str_replace_all(country, "congo the democratic republic of the|drc|democratic republic of congo",
"democratic republic of the congo"),
country = str_replace_all(country, "china people's republic of", "china"),
country = str_replace_all(country, "democratic people's republic of korea", "democratic peopleâs republic of korea")) %>%
# standardise separators
mutate(country = gsub("\\s*\\([^\\)]+\\)","", country))
# Convert dataset to long with one row per country entry
country_table_cleaned <- country_table_cleaned %>%
separate_rows(country, sep = ",|;", convert = FALSE) %>%
mutate(country = str_trim(country)) %>%
unique() %>%
filter(country != "")
# Further country cleaning
country_table_cleaned <- country_table_cleaned %>%
mutate(country = str_trim(country)) %>%
mutate(country = case_when(
str_detect(country, "uk|scotland|wales|united kingdom|england|ireland") ~ "united kingdom",
str_detect(country, "usa|united states") ~ "united states",
country == "us" ~ "united states",
str_detect(country, "ivoire") ~ "ivory coast",
str_detect(country, "viet") ~ "vietnam",
str_detect(country, "lao") ~ "laos",
TRUE ~ country)) %>%
unique()
# Replace country with "unknown" if not recognised against Tableau's accepted list
country_table_final <- country_table_cleaned %>%
mutate(country = if_else(country %in% dac_lookup$country_name, country, "unknown")) %>%
mutate(country = tools::toTitleCase(country)) %>%
unique()
# Save datasets for testing
saveRDS(country_table, file = "Outputs/country_table.rds")
saveRDS(country_table_cleaned, file = "Outputs/country_table_cleaned.rds")
saveRDS(country_table_final, file = "Outputs/country_table_final.rds")
# Read in project and country datasets from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
country_table_final <- readRDS("Outputs/country_table_final.rds")
tableau_projects <- all_projects_tidied %>%
left_join(country_table_final, by = c("id" = "project_id"))
# Add row ID field to dataset
tableau_projects$row_id <- seq.int(nrow(tableau_projects))
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(tableau_projects,
country %in% c("Unknown") | is.na(country)) %>%
select(row_id, id) %>%
unique() %>%
mutate(exclude = 1)
# Identify projects that have both a populated and missing country field
# Restrict to just the populated fields (to keep)
duplicate_country_projects <- filter(tableau_projects,
!(country %in% c("Unknown") | is.na(country))) %>%
select(row_id, id) %>%
unique() %>%
filter(id %in% unknown_country_projects$id) %>%
mutate(keep = 1)
# Exclude project records for "Unknown" country when the project has other country info
tableau_projects_tidied <- tableau_projects %>%
left_join(unknown_country_projects, by = c("row_id", "id")) %>%
left_join(duplicate_country_projects, by = c("row_id", "id")) %>%
filter(keep == 1 |
exclude == 1 & !(id %in% duplicate_country_projects$id) |
is.na(keep) & is.na(exclude)) %>%
select(-keep, -exclude) %>%
mutate(country = coalesce(country, "Unknown"))
rm(tableau_projects)
rm(unknown_country_projects)
rm(duplicate_country_projects)
# Add FCDO programme ID to dataset
tableau_projects_tidied <- tableau_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else((Funder == "Foreign, Commonwealth and Development Office"
& str_detect(iati_id, "-1-")),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
# Create vector of FCDO gov funder programme IATI IDs
gov_funder_iati_ids <- tableau_projects_tidied %>%
select(iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-")) %>%
unique()
# Create empty dataframe to hold name extract from IATI
gov_funder_programme_names <- data.frame()
# Run function over all IATI ids
for (id in gov_funder_iati_ids$iati_id) {
print(id)
data <- extract_iati_activity_name(id)
gov_funder_programme_names <- rbind(gov_funder_programme_names, data)
}
# Create empty dataframe to hold name extract from IATI
gov_funder_programme_names <- data.frame()
# Run function over all IATI ids
for (id in gov_funder_iati_ids$iati_id) {
print(id)
data <- extract_iati_activity_name(id)
gov_funder_programme_names <- rbind(gov_funder_programme_names, data)
}
# Join funder programme name to main dataset
tableau_projects_tidied <- tableau_projects_tidied %>%
left_join(gov_funder_programme_names, by = c("iati_id" = "funder_iati_id")) %>%
mutate(funder_programme = if_else(extending_org == "Wellcome Trust", subject, funder_programme))
# TEMPORARY ***
# Remove IDRC DHSC IATI data (this has been provided by spreadsheet)
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# TEMPORARY
# Remove Afghanistan projects (added Sep 21)
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(country != "Afghanistan")
# Restrict to active projects for Tableau
tableau_projects_tidied <- tableau_projects_tidied %>%
filter(status %in% c("Active", "Unknown")) %>%
unique()
# Write to RDS
saveRDS(tableau_projects_tidied, "Outputs/tableau_projects_tidied.rds")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(tableau_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
# Read in collated dataset from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
org_names_and_locations <- readRDS("Outputs/org_names_and_locations.rds")
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Project]")
