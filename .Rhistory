# Add summarised funders to main report
output_report <- output_report %>%
left_join(co_funded_projects, by = "Title") %>%
mutate(Funder = coalesce(comb_funder, Funder)) %>%
group_by(Title) %>%
# Keep one row per project title
slice(1) %>%
select(Funder, Fund, Programme, Title, Start, End, Description, `Beneficiary Country`,
`Lead Organisation`, `Partner Organisations`, `Value (£)`, `Web Link`, currency)
# Format numerical value column
class(output_report$`Value (£)`) <- "comma"
# Add country dataset to output list
openxlsx::addWorksheet(wb, sheetName = country_list[i])
openxlsx::writeData(wb, sheet = i, x = output_report,
headerStyle = header_st,
borderStyle = "thin")
# Add font style
addStyle(wb, sheet = i, table_st, rows = 2:200, cols = 1:12, gridExpand = TRUE, stack = TRUE)
# Identify titles and hyperlinks
hyperlinks <- output_report$`Web Link`
names(hyperlinks) <- output_report$`Web Link`
class(hyperlinks) <- "hyperlink"
# Write hyperlinks
writeData(wb, sheet = i, x = hyperlinks, startRow = 2, startCol = 12, colNames = FALSE)
# Set column widths
setColWidths(wb, sheet = i, cols = 1:12, widths = c(10,25,30,40,6,6,60,30,30,30,10,50))
}
# Resave Excel file
saveWorkbook(wb, "Outputs//Brunei ODA programmes - Nov21.xlsx", overwrite = TRUE)
install.packages("testthat")
### Set end of quarter data for update ----
quarter_end_date <- as.Date("2021-09-30")
### Check and install packages ----
packages <- data.frame(installed.packages())
if (!("jsonlite" %in% packages$Package)) {
install.packages("jsonlite")
}
if (!("httr" %in% packages$Package)) {
install.packages("httr")
}
if (!("tidyverse" %in% packages$Package)) {
install.packages("tidyverse")
}
if (!("dplyr" %in% packages$Package)) {
install.packages("dplyr")
}
if (!("readxl" %in% packages$Package)) {
install.packages("readxl")
}
if (!("writexl" %in% packages$Package)) {
install.packages("writexl")
}
if (!("googlesheets4" %in% packages$Package)) {
install.packages("googlesheets4")
}
if (!("gargle" %in% packages$Package)) {
install.packages("gargle")
}
if (!("openxlsx" %in% packages$Package)) {
install.packages("openxlsx")
} # for adding hyperlinks and formatting to output Excel reports
if (!("DBI" %in% packages$Package)) {
install.packages("DBI")
} # for read/writing to Excel database
if (!("odbc" %in% packages$Package)) {
install.packages("odbc")
}
if (!("countrycode" %in% packages$Package)) {
install.packages("countrycode")
}
if (!("testthat" %in% packages$Package)) {
install.packages("testthat")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(dplyr)
library(readxl)
library(writexl)
library(googlesheets4)
library(gargle)
library(openxlsx)
library(DBI)
library(odbc)
library(countrycode)
library(testthat)
### Read in reference data ----
# 1) GRID research institution lookup
grid_institutes <- read.csv("Inputs/GRID tables/institutes.csv") %>%
select(grid_id, name) %>%
mutate(name = str_to_lower(name)) %>%
unique()  %>%
# Remove common organisation names
filter(!(name %in% c("ministry of health", "ministry of public health")))
grid_addresses <- read.csv("Inputs/GRID tables/addresses.csv") %>%
select(grid_id, country, country_code) %>%
unique()
grid_aliases <- read.csv("Inputs/GRID tables/aliases.csv")
# Country names
countries <- countrycode::codelist$country.name.en
countries_string <- paste0(str_to_lower(countries), collapse = "|")
# 2) DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx") %>%
mutate(country_name = str_to_lower(country_name))
### Input data ----
# FCDO partner IATI activities (to add manually as not linked)
iati_activity_ids <- read_xlsx("Inputs/IATI partner activities.xlsx", sheet=1)
# UKRI non GCRF/Newton project IDs
ukri_projects_ids <- read_xlsx("Inputs/UKRI non GCRF-Newton projects.xlsx", sheet=1)
# Wellcome ODA grant data
wellcome_grants <- read_excel("Inputs/wellcome grants.xlsx")
# BEIS RODA GCRF/Newton extracts
roda_extract_gcrf <- read_excel("Inputs/BEIS_GCRF_MODARI_Q2_2021-2022.xlsx", sheet = 1)
roda_extract_newton <- read_excel("Inputs/BEIS_NF_MODARI_Q2_2021-2022.xlsx", sheet = 1)
### Functions -----
### Country lookup of organisation ###
org_country_lookup <- function(org_name) {
# Look up country from GRID database
country_lookup <- data.frame(name = str_to_lower(org_name)) %>%
# Join on GRID database
left_join(grid_institutes, by = "name") %>%
left_join(grid_addresses, by = "grid_id") %>%
select(name, grid_country = country) %>%
# Extract any countries in name
mutate(name_country = str_extract_all(name, countries_string)) %>%
unnest(cols = name_country, keep_empty = TRUE) %>%
# Coalesce country results
mutate(final_country = coalesce(grid_country, name_country))
result <- str_to_title((country_lookup$final_country)[1])
return(result)
}
### IATI ###
# Function to extract 5-digit OECD sector codes
sector_extract <- function(page, sector_list) {
path <- paste0("https://iati.cloud/api/sectors/?fields=category,url,name,code&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Condition to check when 5-digit codes stop being returned
if(!("category" %in% names(response$results))) {
sector_list <- rbind(sector_list, response$results)
} else {
sector_list <- sector_list
}
return(sector_list)
}
# Function to extract IATI activity info from activity ID
iati_activity_extract <- function(activity_id) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
return(new_data)
}
# Function to extract IATI activity IDs for a specified org code
org_activity_extract <- function(page, org_code, org_activity_list) {
path <- paste0("https://iati.cloud/api/activities/?format=json&reporting_org_identifier=", org_code, "&fields=iati_identifier,other_identifier,activity_date,reporting_org,sector,location,default_flow_type,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity,tag&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
results <- rbind(org_activity_list, new_data)
return(results)
}
# Function to extract transactions for a specified IATI activity ID
transactions_extract <- function(activity_id, page, output_data) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/transactions/?iati_identifier=", activity_id, "&fields=value,transaction_date,description,currency,receiver_organisation&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
output <- plyr::rbind.fill(output_data, new_data)
} else {
output <- output_data
}
return(output)
}
# Function to extract programme names from IATI
extract_iati_activity_name <- function(activity_id) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=title")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
new_data <- new_data %>%
unnest(col = title.narrative) %>%
select(funder_iati_id = iati_identifier, funder_programme = text)
} else {
new_data <- data.frame()
}
return(new_data)
}
### UKRI ###
# 1 - Function to extract project IDs by fund name (GCRF/Newton)
extract_ukri_projects_by_fund <- function(page, fund) {
path <- paste0("https://gtr.ukri.org:443/gtr/api/projects?q=",
fund, "&f=pro.rcukp&p=", page, "&s=100")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
projects <- response$project
return(projects)
}
# 2 - Function to extract staff organisation
extract_staff_org <- function(staff_data, person_id) {
path <- paste0("http://gtr.ukri.org/person/", person_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
person_current_org_name <- ((response$personOverview)$organisation)$name
person_current_org_id <- ((response$personOverview)$organisation)$id
staff_org_data <- rbind(staff_data, data.frame(person_id,
person_current_org_name,
person_current_org_id))
return(staff_org_data)
}
# 3 - Function to extract country from organisation ID
# (checking GRID database as well as UKRI)
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
org_name <- ((response$organisationOverview)$organisation)$name
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# If unknown use other generic lookup function
if(org_country_ukri == "Unknown") {
org_country <- org_country_lookup(org_name)
} else {
org_country <- org_country_ukri
}
return(org_country)
}
# 4 - Master function to extract UKRI project data by ID
extract_ukri_projects_by_id <- function(id) {
path <- paste0("http://gtr.ukri.org/projects?ref=", id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# extract project data and last refresh date
data <- response$projectOverview
last_updated <- (response$lastRefreshDate)$lastRefreshDate %>%
str_replace_all("Data last updated:  ", "") %>%
as.Date(format = "%d %b %Y")
# Create blank org table for output
org_table <- data.frame()
if(length(data) > 0) {
# Unlist first level
data <- data$projectComposition
# Extract project, lead org and co-investigator staff ids
projects <- data$project
lead_org <- data$leadResearchOrganisation
person_roles <- data$personRole
# Extract staff information (if applicable)
if(length(person_roles) > 0) {                        # checks length of list
person_roles <- person_roles %>%
unnest(col = role) %>%
filter(name == "CO_INVESTIGATOR") %>%
select(id)
if(nrow(person_roles) > 0) {                # checks no. of rows in dataframe
# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_country_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_country_data$person_current_org_name) > 0) {
# Keep staff org names and countries to output
org_table <- staff_org_country_data %>%
mutate(project_id = projects[["grantReference"]],
organisation_role = 2) %>%
select(project_id,
organisation_role,
organisation_name = person_current_org_name,
organisation_country = person_current_org_country)
# Collapse org names and locations
staff_org_names <- staff_org_country_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_country_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = "",
partner_org_country = "")
}
# Write lead org name and country to file
org_table <- org_table %>%
rbind(select(project_data,
project_id = gtr_id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds,
extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country,
status, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(list(project_data, org_table))
}
# Read in collated dataset from previous script
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
org_names_and_locations <- readRDS("Outputs/org_names_and_locations.rds")
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Project]")
project_first_10 <- dbFetch(recordSet, n = -1)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
# Disconnect from database
dbDisconnect(con_live)
con_live <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server   = "hel-sql-120",
Database = "ODARIProjects",
Trusted_Connection = "True")
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
funder_first_10 <- dbFetch(recordSet, n = -1)
View(funder_first_10)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Funder]")
funder_first_10 <- dbFetch(recordSet, n = -1)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Organisation]")
org_first_10 <- dbFetch(recordSet, n = -1)
View(org_first_10)
recordSet <- dbSendQuery(con_live, "SELECT TOP 10 * FROM [Country]")
country_first_10 <- dbFetch(recordSet, n = -1)
View(country_first_10)
# 1) Create master project table ----
project_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(-Funder, -Fund, -iati_id,
-recipient_country,
-lead_org_name, -lead_org_country,
-partner_org_name, -partner_org_country,
-period_start, -period_end,
-last_updated) %>%
rename(project_id = id) %>%
unique()
# check uniqueness
test <- unique(project_table$id)
# check uniqueness
test <- unique(project_table$project_id)
# find duplicate project ids
duplicates <- project_table %>%
group_by(project_id) %>%
summarise(n = n()) %>%
filter(n > 1) %>%
inner_join(project_table, by = "project_id")
# remove duplicate rows (rough)
project_table <- project_table[!duplicated(project_table$project_id), ]
funder_table <- all_projects %>%
# remove all fields that can have multiple entries for a project
select(project_id = id, funder = Funder,
fund = Fund, funder_iati_id = iati_id) %>%
unique()
funder_table <- all_projects_tidied %>%
# remove all fields that can have multiple entries for a project
select(project_id = id, funder = Funder,
fund = Fund, funder_iati_id = iati_id) %>%
unique()
organisation_table <- org_names_and_locations
# Distinguish location and beneficiary countries in main dataset
country_table <- all_projects_tidied %>%
mutate(beneficiary_country = recipient_country,
location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, ""))) %>%
select(project_id = id, location_country, beneficiary_country) %>%
unique()
# Convert location vs. beneficiary country data to long format
country_table <- country_table %>%
gather(key = "country_type", value = "country", -project_id) %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2),
country = str_to_lower(country))
# Clean country names
country_table_cleaned <- country_table %>%
mutate(country = str_replace_all(country, "\\(the\\)", ""),  # remove (the)
country = gsub("[()]", "", country),                  # remove all parentheses
country = str_replace_all(country, "tanzania, united republic of", "tanzania"),
country = str_replace_all(country, "congo the democratic republic of the|drc|democratic republic of congo",
"democratic republic of the congo"),
country = str_replace_all(country, "china people's republic of", "china"),
country = str_replace_all(country, "democratic people's republic of korea", "democratic people’s republic of korea")) %>%
# standardise separators
mutate(country = gsub("\\s*\\([^\\)]+\\)","", country))
# Convert dataset to long with one row per country entry
country_table_cleaned <- country_table_cleaned %>%
separate_rows(country, sep = ",|;", convert = FALSE) %>%
mutate(country = str_trim(country)) %>%
unique() %>%
filter(country != "")
# Further country cleaning
country_table_cleaned <- country_table_cleaned %>%
mutate(country = str_trim(country)) %>%
mutate(country = case_when(
str_detect(country, "uk|scotland|wales|united kingdom|england|ireland") ~ "united kingdom",
str_detect(country, "usa|united states") ~ "united states",
country == "us" ~ "united states",
str_detect(country, "ivoire") ~ "ivory coast",
str_detect(country, "viet") ~ "vietnam",
str_detect(country, "lao") ~ "laos",
TRUE ~ country)) %>%
unique()
# Replace country with "unknown" if not recognised against Tableau's accepted list
country_table_final <- country_table_cleaned %>%
mutate(country = if_else(country %in% dac_lookup$country_name, country, "unknown")) %>%
mutate(country = tools::toTitleCase(country)) %>%
unique()
# Save datasets for testing
saveRDS(country_table, file = "Outputs/country_table.rds")
saveRDS(country_table_cleaned, file = "Outputs/country_table_cleaned.rds")
saveRDS(country_table_final, file = "Outputs/country_table_final.rds")
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Funder]")
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Organisation]")
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Country]")
dbAppendTable(con_live, "Funder", funder_table, row.names = NULL)
dbAppendTable(con_live, "Organisation", organisation_table, row.names = NULL)
dbAppendTable(con_live, "Country", country_table_final, row.names = NULL)
recordSet <- dbSendQuery(con_live, "SELECT COUNT(*) FROM [Country]")
country_first_10 <- dbFetch(recordSet, n = -1)
View(country_first_10)
recordSet <- dbSendQuery(con_live, "SELECT COUNT(*) FROM [Organisation]")
country_first_10 <- dbFetch(recordSet, n = -1)
View(country_first_10)
recordSet <- dbSendQuery(con_live, "SELECT COUNT(*) FROM [Funder]")
country_first_10 <- dbFetch(recordSet, n = -1)
View(country_first_10)
dbSendQuery(con_live, "DELETE FROM [ODARIProjects].[dbo].[Project]")
dbAppendTable(con_live, "Project", project_table, row.names = NULL)
recordSet <- dbSendQuery(con_live, "SELECT COUNT(*) FROM [Project]")
country_first_10 <- dbFetch(recordSet, n = -1)
View(country_first_10)
country <- c("Cambodia")
country_orgs <- org_names_and_locations %>%
filter(organisation_country %in% country,
project_id %in% all_projects_tidied$id)
country_orgs_summarised <- country_orgs %>%
group_by(organisation_name) %>%
summarise(no_projects = n()) %>%
arrange(-no_projects)
View(country_orgs_summarised)
country <- c("Indonesia")
country_orgs <- org_names_and_locations %>%
filter(organisation_country %in% country,
project_id %in% all_projects_tidied$id)
country_orgs_summarised <- country_orgs %>%
group_by(organisation_name) %>%
summarise(no_projects = n()) %>%
arrange(-no_projects)
View(country_orgs_summarised)
