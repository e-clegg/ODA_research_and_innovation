return(projects)
}
# 2 - Function to extract staff organisation
# person_id <- "6E394347-A44B-4868-8EC3-06CA4D034BDA"
extract_staff_org <- function(staff_data, person_id) {
path <- paste0("http://gtr.ukri.org/person/", person_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
person_current_org_name <- ((response$personOverview)$organisation)$name
person_current_org_id <- ((response$personOverview)$organisation)$id
staff_org_data <- rbind(staff_data, data.frame(person_id,
person_current_org_name,
person_current_org_id))
return(staff_org_data)
}
# 3 - Function to extract country from organisation ID
# (checking GRID database as well as UKRI)
# org_id <- "3ED60B49-9C2B-4D71-B644-96CCC7F10194"
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# Look up country from GRID database
grid_org_search <- data.frame(name = ((response$organisationOverview)$organisation)$name) %>%
left_join(grid_institutes, by = "name") %>%
left_join(grid_addresses, by = "grid_id")
# Use GRID country over UKRI GtR one
org_country <- coalesce(grid_org_search$country, org_country_ukri)
return(org_country)
}
# 4 - Master function to extract UKRI project data by ID
extract_ukri_projects_by_id <- function(id) {
path <- paste0("http://gtr.ukri.org/projects?ref=", id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# extract project data and last refresh date
data <- response$projectOverview
last_updated <- (response$lastRefreshDate)$lastRefreshDate %>%
str_replace_all("Data last updated:  ", "") %>%
as.Date(format = "%d %b %Y")
if(length(data) > 0) {
# Unlist first level
data <- data$projectComposition
# Extract project, lead org and co-investigator staff ids
projects <- data$project
lead_org <- data$leadResearchOrganisation
person_roles <- data$personRole
# Extract staff information (if applicable)
if(length(person_roles) > 0) {                        # checks length of list
person_roles <- person_roles %>%
unnest(col = role) %>%
filter(name == "CO_INVESTIGATOR") %>%
select(id)
if(nrow(person_roles) > 0) {                # checks no. of rows in dataframe
# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_data$person_current_org_name) > 0) {
staff_org_names <- staff_org_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = "",
partner_org_country = "")
}
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds,
extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country,
status, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(project_data)
}
# Read in linked partner IATI activity info from script 1
red_linked_activites <- readRDS(file = "Outputs/red_linked_activites.rds") %>%
rename(iati_id = linked_activity,
funding_iati_id = programme_id)
# Manually add on other (non-linked) partner activities from Excel
iati_activity_ids <- iati_activity_ids %>%
plyr::rbind.fill(red_linked_activites)
partner_activity_extract <- readRDS(file = "Outputs/partner_activity_extract.rds")
partner_activities <- readRDS(file = "Outputs/partner_activities.rds")
partner_activity_comb <- plyr::rbind.fill(partner_activity_extract, partner_activities) %>%
rename(fcdo_activity_id = activity_id)
rm(partner_activity_extract)
rm(partner_activities)
rm(partner_activities_via_title)
rm(partner_activities_via_funder)
rm(result)
rm(red_linked_activites)
# Extract base activity information - hierarchy and status
activity_list_base <- partner_activity_comb %>%
select(iati_identifier, hierarchy,
activity_status = activity_status.name,
flow_type = default_flow_type,
fcdo_activity_id,
gov_funder,
fund) %>%
left_join(select(iati_activity_ids, iati_id, gov_funder), by = c("iati_identifier" = "iati_id")) %>%
mutate(gov_funder = coalesce(gov_funder.x, gov_funder.y)) %>%
select(-gov_funder.x, -gov_funder.y) %>%
unique()
# a) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, activity_title, type.name, narrative) %>%
unnest(cols = narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
unique()
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, activity_title, type.name, narrative)
View(activity_list_unnest_1)
View(activity_list_unnest_1[[4]][[1]])
# a) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, activity_title, type.name, narrative) %>%
unnest(cols = narrative)
rlang::last_error()
# a) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, narrative) %>%
unnest(cols = narrative)
# a) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(narrative) %>%
unnest(cols = narrative)
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(narrative)
View(activity_list_unnest_1)
View(activity_list_unnest_1[[1]][[1]])
# a) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(narrative) %>%
unnest()
# 2) Unlist recipient countries
activity_list_unnest_2 <- partner_activity_comb %>%
unnest(cols = recipient_country,
keep_empty = TRUE) %>%
select(iati_identifier, country.name) %>%
group_by(iati_identifier) %>%
unique() %>%
summarise(country_name = paste(coalesce(country.name, ""), collapse = ", "))
# 2) Unlist recipient countries
activity_list_unnest_2 <- partner_activity_comb %>%
unnest(cols = recipient_country,
keep_empty = TRUE)
View(activity_list_unnest_1[[1]][[1]])
?lengths
# a) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, activity_title, type.name, narrative) %>%
filter(lengths(narrative) != 0)
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, activity_title, type.name, narrative)
# a) Unlist activity title and description
activity_list_unnest_1 <- partner_activity_comb %>%
unnest(cols = title.narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
rename(activity_title = text) %>%
unnest(cols = description,
keep_empty = TRUE) %>%
mutate(type.name = coalesce(type.name, "General")) %>%
select(iati_identifier, activity_title, type.name, narrative) %>%
filter(lengths(narrative) != 0) %>%
unnest(cols = narrative,
keep_empty = TRUE) %>%
filter(lang.name == "English") %>%
unique()
activities_to_fix <- activity_list_unnest_1 %>%
group_by(iati_identifier, activity_title, type.name) %>%
summarise(no_descriptions = n()) %>%
filter(no_descriptions > 1)
activity_list_unnest_1 <- activity_list_unnest_1 %>%
group_by(iati_identifier, activity_title, type.name) %>%
summarise(text = paste(coalesce(text, ""), collapse = "; ")) %>%
spread(key = type.name, value = text)
# 2) Unlist recipient countries
activity_list_unnest_2 <- partner_activity_comb %>%
filter(lengths(recipient_country) != 0) %>%
unnest(cols = recipient_country,
keep_empty = TRUE) %>%
select(iati_identifier, country.name) %>%
group_by(iati_identifier) %>%
unique() %>%
summarise(country_name = paste(coalesce(country.name, ""), collapse = ", "))
# Identify activities without recipient countries at activity level
no_country_info <- activity_list_unnest_2 %>%
filter(country_name == "")
# Prepare results data frame and counters
transaction_list <- data.frame()
# Run extraction, stopping when no new transactions are returned
for (id in no_country_info$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(id, "-", page))
x <- nrow(transaction_list)
transaction_list <- transactions_extract(id, page, transaction_list)
page <- page + 1
y <- nrow(transaction_list)
new_rows = y - x
}
}
transactions_unnest <- transaction_list %>%
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -recipient_countries, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# remove transactions without a country
filter(!is.na(recipient_country)) %>%
# summarise countries
select(iati_identifier, recipient_country) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(recipient_country = paste(coalesce(recipient_country, ""), collapse = ", "))
# Prepare results data frame and counters
transaction_list <- data.frame()
# Run extraction, stopping when no new transactions are returned
for (id in no_country_info$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(id, "-", page))
x <- nrow(transaction_list)
transaction_list <- transactions_extract(id, page, transaction_list)
page <- page + 1
y <- nrow(transaction_list)
new_rows = y - x
}
}
# 2) Unlist recipient countries
activity_list_unnest_2 <- partner_activity_comb %>%
filter(lengths(recipient_country) != 0) %>%
unnest(cols = recipient_country,
keep_empty = TRUE) %>%
select(iati_identifier, country.name) %>%
group_by(iati_identifier) %>%
unique() %>%
summarise(country_name = paste(coalesce(country.name, ""), collapse = ", "))
# Identify activities without recipient countries at activity level
no_country_info <- activity_list_unnest_2 %>%
filter(country_name == "")
# Identify activities without recipient countries at activity level
no_country_info <- partner_activity_comb %>%
filter(lengths(recipient_country) == 0)
# Prepare results data frame and counters
transaction_list <- data.frame()
# Run extraction, stopping when no new transactions are returned
for (id in no_country_info$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(id, "-", page))
x <- nrow(transaction_list)
transaction_list <- transactions_extract(id, page, transaction_list)
page <- page + 1
y <- nrow(transaction_list)
new_rows = y - x
}
}
transactions_unnest <- transaction_list %>%
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -recipient_countries, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# remove transactions without a country
filter(!is.na(recipient_country)) %>%
# summarise countries
select(iati_identifier, recipient_country) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(recipient_country = paste(coalesce(recipient_country, ""), collapse = ", "))
transactions_unnest <- transaction_list %>%
filter(lengths(recipient_countries) != 0) %>%
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -recipient_countries, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# remove transactions without a country
filter(!is.na(recipient_country)) %>%
# summarise countries
select(iati_identifier, recipient_country) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(recipient_country = paste(coalesce(recipient_country, ""), collapse = ", "))
transactions_unnest <- transaction_list %>%
filter(lengths(recipient_countries) != 0)
transactions_unnest <- transaction_list %>%
filter(lengths(recipient_countries) != 0) %>%
unnest(cols = recipient_countries,
keep_empty = TRUE)
transactions_unnest <- transaction_list %>%
filter(lengths(recipient_countries) != 0) %>%
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -recipient_countries, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# remove transactions without a country
filter(!is.na(recipient_country)) %>%
# summarise countries
select(iati_identifier, recipient_country) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(recipient_country = paste(coalesce(recipient_country, ""), collapse = ", "))
transactions_unnest <- transaction_list %>%
filter(lengths(recipient_countries) != 0) %>%
unnest(cols = recipient_countries,
keep_empty = TRUE)
View(transactions_unnest)
transactions_unnest <- transaction_list %>%
filter(lengths(recipient_countries) != 0) %>%
unnest(cols = recipient_countries,
keep_empty = TRUE) %>%
select(-country.url, -recipient_regions) %>%
rename(recipient_country = country.name) %>%
# remove transactions without a country
filter(!is.na(recipient_country)) %>%
# summarise countries
select(iati_identifier, recipient_country) %>%
unique() %>%
group_by(iati_identifier) %>%
summarise(recipient_country = paste(coalesce(recipient_country, ""), collapse = ", "))
# Join on transactions country info to rest of dataset
activity_list_unnest_2_comp <- activity_list_unnest_2 %>%
left_join(transactions_unnest, by = "iati_identifier") %>%
mutate(recipient_country = coalesce(recipient_country, country_name)) %>%
select(-country_name)
# 3) Unlist sectors
activity_list_unnest_3 <- partner_activity_comb %>%
unnest(cols = sector,
keep_empty = TRUE) %>%
select(iati_identifier, sector.code, sector.name, percentage) %>%
mutate(percentage = as.numeric(percentage)) %>%
filter(sector.name != "Vocabulary 99 or 98") %>%
group_by(iati_identifier) %>%
unique()
# 3) Unlist sectors
activity_list_unnest_3 <- partner_activity_comb %>%
filter(lengths(sector) != 0) %>%
unnest(cols = sector,
keep_empty = TRUE) %>%
select(iati_identifier, sector.code, sector.name, percentage) %>%
mutate(percentage = as.numeric(percentage)) %>%
filter(sector.name != "Vocabulary 99 or 98") %>%
group_by(iati_identifier) %>%
unique()
# Summarise all sector descriptions for each activity
activity_list_unnest_3 <- activity_list_unnest_3 %>%
summarise(sector_code = paste(coalesce(sector.code, ""), collapse = ", "),
sector_name = paste(coalesce(sector.name, ""), collapse = ", "))
# 4) Unlist implementing organisations
activity_list_unnest_4 <- partner_activity_comb %>%
filter(lengths(participating_org) != 0) %>%
unnest(cols = participating_org,
keep_empty = TRUE) %>%
select(iati_identifier, role.name, narrative, ref) %>%
unnest(cols = narrative,
keep_empty = TRUE) %>%
filter(role.name == "Implementing") %>%
# filter(!(text %in% c("Centre de recherches pour le développement international",
#                      "Centro Internacional de Investigaciones para el Desarrollo"))) %>%
filter(lang.name == "English") %>%
select(-lang.code, -lang.name) %>%
unique() %>%
# Add simple country locations based on IATI references
mutate(partner_country = case_when(
str_detect(ref, "GB") ~ "United Kingdom",
str_detect(ref, "US") ~ "United States",
str_detect(ref, "NL") ~ "Netherlands",
str_detect(ref, "CA-") ~ "Canada",
str_detect(ref, "IN-") ~ "India",
str_detect(ref, "KE-") ~ "Kenya",
str_detect(ref, "ZA-") ~ "South Africa",
))
# Look up country of organisation
country_match <- activity_list_unnest_4 %>%
mutate(org_country = org_country_lookup(text))
View(country_match)
# Look up country of organisation
country_match <- activity_list_unnest_4 %>%
mutate(org_country = map(text, org_country_lookup))
View(country_match)
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
