all_projects <- readRDS("Outputs/all_projects.rds")
all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
# Extract project data for each country
country_project_ids <- all_projects_tidied %>%
filter(Country == country_list[1]) %>%
select(id) %>%
unique()
country_project_data <- all_projects %>%
filter(id %in% country_project_ids$id)
output_report <- country_project_data %>%
mutate(Start = format(as.Date(start_date), format = "%Y"),
End = format(as.Date(end_date), format = "%Y")) %>%
select(Funder, Fund, Title = title, Start, End, Description = abstract,
`Lead Organisation` = lead_org_name, `Partner Organisations` = partner_org_name) %>%
unique()
all_outputs <- list(Kenya = output_report,
Uganda = output_report)
write_xlsx(all_outputs, path = "Outputs//Active ODA programmes - Oct21.xlsx")
test4 <- filter(all_projects, str_detect(title, "CRASH-3"))
View(test4)
test4 <- filter(all_projects, str_detect(id, "MR/M009211/1"))
# Tidy co-funded projects
co_funded_projects <- output_report %>%
group_by(Funder, id) %>%
summarise(n = n()) %>%
filter(n > 1)
# Tidy co-funded projects
co_funded_projects <- output_report %>%
group_by(Funder, Title) %>%
summarise(n = n()) %>%
filter(n > 1)
View(co_funded_projects)
# Tidy co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n()) %>%
filter(n > 1)
# Tidy co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
Funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1)
View(co_funded_projects)
# Tidy co-funded projects
co_funded_projects <- output_report %>%
group_by(Title, Funder) %>%
slice_head(1) %>%
ungroup() %>%
group_by(Title) %>%
summarise(n = n(),
Funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1)
co_funded_projects <- output_report %>%
group_by(Title, Funder) %>%
slice_head(1)
# Tidy co-funded projects
co_funded_projects <- output_report %>%
group_by(Title, Funder) %>%
slice(1) %>%
ungroup() %>%
group_by(Title) %>%
summarise(n = n(),
Funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1)
View(co_funded_projects)
output_report <- country_project_data %>%
mutate(Start = format(as.Date(start_date), format = "%Y"),
End = format(as.Date(end_date), format = "%Y")) %>%
select(Funder, Fund, Title = title, Start, End, Description = abstract,
`Lead Organisation` = lead_org_name, `Partner Organisations` = partner_org_name) %>%
group_by(Title, Funder) %>%
slice(1) %>%
unique()
output_report <- country_project_data %>%
mutate(Start = format(as.Date(start_date), format = "%Y"),
End = format(as.Date(end_date), format = "%Y")) %>%
select(Funder, Fund, Title = title, Start, End, Description = abstract,
`Lead Organisation` = lead_org_name, `Partner Organisations` = partner_org_name) %>%
group_by(Title, Funder) %>%
slice(1) %>%
ungroup() %>%
unique()
# Tidy co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
Funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1)
# Prepare output report fields
output_report <- country_project_data %>%
mutate(Start = format(as.Date(start_date), format = "%Y"),
End = format(as.Date(end_date), format = "%Y"),
Funder = case_when(
Funder == "Foreign, Commonwealth and Development Office" ~ "FCDO",
Funder == "Department of Health and Social Care" ~ "DHSC",
Funder == "Department for Business, Energy and Industrial Strategy" ~ "BEIS"
)) %>%
select(Funder, Fund, Title = title, Start, End, Description = abstract,
`Lead Organisation` = lead_org_name, `Partner Organisations` = partner_org_name) %>%
group_by(Title, Funder) %>%
slice(1) %>%
ungroup() %>%
unique()
# Summarise funders on co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
Funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1)
# Summarise funders on co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
new_funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1)
# Summarise funders on co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
comb_funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1)
# Summarise funders on co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
comb_funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1) %>%
select(-n)
output_report <- output_report %>%
left_join(co_funded_projects, by = "Title") %>%
mutate(Funder = coalesce(comb_funder, Funder)) %>%
group_by(Title) %>%
slice(1)
# Prepare output report fields
output_report <- country_project_data %>%
mutate(Start = format(as.Date(start_date), format = "%Y"),
End = format(as.Date(end_date), format = "%Y"),
Funder = case_when(
Funder == "Foreign, Commonwealth and Development Office" ~ "FCDO",
Funder == "Department of Health and Social Care" ~ "DHSC",
Funder == "Department for Business, Energy and Industrial Strategy" ~ "BEIS"
)) %>%
select(Funder, Fund, Title = title, Start, End, Description = abstract,
`Lead Organisation` = lead_org_name, `Partner Organisations` = partner_org_name) %>%
group_by(Title, Funder) %>%
slice(1) %>%
ungroup() %>%
unique()
# Summarise funders on co-funded projects
co_funded_projects <- output_report %>%
group_by(Title) %>%
summarise(n = n(),
comb_funder = paste(coalesce(Funder, ""), collapse = ", ")) %>%
filter(n > 1) %>%
select(-n)
View(co_funded_projects)
output_report <- output_report %>%
left_join(co_funded_projects, by = "Title") %>%
mutate(Funder = coalesce(comb_funder, Funder)) %>%
group_by(Title) %>%
slice(1)
View(output_report)
# Read in list of IATI activities (from funders and select delivery partners)
iati_activity_list <- readRDS(file = "Outputs/gov_list_final.rds") %>%
rename(recipient_country = all_countries)
partner_iati_list <- readRDS(file = "Outputs/partner_activity_list.rds")
# Filter gov department records for minimum granularity
iati_projects <- iati_activity_list %>%
filter(  str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
str_detect(iati_identifier, "1-205053") |   # South Asia Country Research Fund (FCDO)
str_detect(iati_identifier, "1-300708") |   # Evidence Fund (FCDO)
#   str_detect(iati_identifier, "UKSA") |   # UKSA awards (GCRF)
#   str_detect(iati_identifier, "NEWT-MO") |   # Met Office awards (Newton)
#   str_detect(iati_identifier, "NEWT-BIS") |  # Other Met Office awards?
#   str_detect(iati_identifier, "NEWT-BC") |  # British Council
#   str_detect(iati_identifier, "GCRF-Clm") |  # Academies
#   str_detect(iati_identifier, "RS-GCRF|NEWT-RS") |  # Royal Society
#   str_detect(iati_identifier, "RAENG-GCRF|NEWT-RAE") |  # Royal Academy of Engineering
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
filter(flow_type == "ODA") %>%
mutate(fund = if_else(is.na(fund), "Unknown", fund)) %>%
plyr::rbind.fill(partner_iati_list) # Add partner activities
# Keep required fields
iati_projects_final <- iati_projects %>%
mutate(Funder = coalesce(gov_funder, reporting_org),
partner_org_name = partner,
partner_org_country = partner_country,
lead_org_name = coalesce(extending_org, reporting_org),
lead_org_country = "",
extending_org = coalesce(extending_org, reporting_org),
status = if_else(!is.na(end_date),
if_else(Sys.Date() <= end_date, "Active", "Closed"), "Unknown"),
last_updated = quarter_end_date) %>%
select(id = iati_identifier,
title = activity_title,
abstract = activity_description,
start_date,
end_date,
amount,
period_start,
period_end,
currency,
extending_org,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country,
iati_id = programme_id,
Fund = fund,
Funder,
recipient_country,
subject = sector_name,
status,
last_updated
)
# Add IATI link to awards
iati_projects_final <- iati_projects_final %>%
mutate(link = paste0("https://d-portal.org/ctrack.html#view=act&aid=", id))
all_projects <- rbind(ukri_projects_final, nihr_projects_final,
iati_projects_final, wellcome_grants_final,
collated_spreadsheet_data,
roda_extract_gcrf_final, roda_extract_newton_final) %>%
unique()
# Save as R file (to read back in if needed)
saveRDS(all_projects, file = "Outputs/all_projects.rds")
all_projects <- readRDS("Outputs/all_projects.rds")
# 1) Extract countries -----------------------------------
# Distinguish location and beneficiary countries in main dataset
all_projects_final <- all_projects %>%
mutate(location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
beneficiary_country = recipient_country)
# Convert location vs. beneficiary country data to long format
countries_data <- all_projects_final %>%
select(id, beneficiary_country, location_country) %>%
gather(key = "country_type", value = "Country", -id) %>%
right_join(select(all_projects_final, -beneficiary_country, -location_country), by = "id")
# Convert dataset to long with one row per country entry
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of|Tanzania, United Republic of", "Tanzania"),
Country = if_else(Country %in% c("Congo (the Democratic Republic of the)", "DRC"),
"Democratic Republic of the Congo", Country)) %>%
mutate(Country = str_replace_all(Country, ";", ",")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",", convert = FALSE)
# Clean country field
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|Usa|UNITED STATES|United states|United States Of America"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country),
Country = if_else(str_detect(Country, "Viet Nam"), "Vietnam", Country)) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Check countries that are unmatched (this information will be overwritten)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
# remove commas at start
mutate(Country = if_else(substr(Country, 1, 1) == ",", substr(Country, 2, length(Country)-1), Country)) %>%
rename(all_countries = Country) %>%
left_join(all_projects_split_country, by = c("id", "extending_org", "country_type"))
# Add row ID field to dataset
all_projects_final$row_id <- seq.int(nrow(all_projects_final))
rm(all_projects)
rm(all_projects_split_country)
# 2) Tidy country info (i.e. remove unnecessary "unknown"s) ---------------
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(row_id, id) %>%
unique() %>%
mutate(exclude = 1)
# Identify projects that have both a populated and missing country field
# Restrict to just the populated fields (to keep)
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(row_id, id) %>%
unique() %>%
filter(id %in% unknown_country_projects$id) %>%
mutate(keep = 1)
# Exclude project records for "Unknown" country when the project has other country info
all_projects_tidied <- all_projects_final %>%
left_join(unknown_country_projects, by = c("row_id", "id")) %>%
left_join(duplicate_country_projects, by = c("row_id", "id")) %>%
filter(keep == 1 |
exclude == 1 & !(id %in% duplicate_country_projects$id) |
is.na(keep) & is.na(exclude)) %>%
select(-keep, -exclude) %>%
mutate(Country = coalesce(Country, "Unknown"))
rm(all_projects_final)
rm(unknown_country_projects)
rm(duplicate_country_projects)
# 3) Add funder programme names ------------------
# Tidy fund and funder labelling
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research & Innovation|FCDO fully"), "FCDO Research - Programmes", Fund),
Fund = if_else(str_detect(Fund, "FCDO partially"), "FCDO Research - Partnerships", Fund))
# Add FCDO programme ID to dataset
all_projects_tidied <- all_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else(Funder %in% c("Foreign, Commonwealth and Development Office", "FCDO")
& str_detect(iati_id, "-1-"),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
# Add FCDO programme name to dataset
# Create vector of FCDO gov funder programme IATI IDs
gov_funder_iati_ids <- all_projects_tidied %>%
select(iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-")) %>%
unique()
# Create empty dataframe to hold name extract from IATI
gov_funder_programme_names <- data.frame()
# Run function over all IATI ids
for (id in gov_funder_iati_ids$iati_id) {
print(id)
data <- extract_iati_activity_name(id)
gov_funder_programme_names <- rbind(gov_funder_programme_names, data)
}
# Join funder programme name to main dataset
all_projects_tidied <- all_projects_tidied %>%
left_join(gov_funder_programme_names, by = c("iati_id" = "funder_iati_id"))
# 4) Apply manual exclusions/rule ----------------------------
# TEMPORARY ***
# Remove IDRC DHSC IATI data (this has been provided by spreadsheet)
all_projects_tidied <- all_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# Remove Afghanistan projects (added Sep 21)
all_projects_tidied <- all_projects_tidied %>%
filter(Country != "Afghanistan")
# Manually edit country info for Chevening Scholarships
all_projects_tidied <- all_projects_tidied %>%
mutate(lead_org_country = if_else(Fund == "Chevening Scholarships", "United Kingdom", lead_org_country),
Country = if_else(Fund == "Chevening Scholarships" & country_type == 2, "United Kingdom", Country))
# Remove non-research partners
# (linked partner data from non-RED managed programmes)
all_projects_tidied <- all_projects_tidied %>%
filter(!(extending_org %in% c("Sightsavers",
"Coffey International Development Limited, a Tetra Tech Company")))
# Correct missing IDS name (ARPA activity)
all_projects_tidied <- all_projects_tidied %>%
mutate(extending_org = if_else(extending_org == "GB-COH-877338",
"Institute of Development Studies", extending_org))
# 5) Check data ---------------------
# check list of ODA R&I funds
table(all_projects_tidied$Fund)
# check list of ODA R&I funders
table(all_projects_tidied$Funder)
# 6) Write data --------------------------------
# Restrict to active projects for Tableau
all_projects_tidied <- all_projects_tidied %>%
mutate(country_type = if_else(country_type == "beneficiary_country", 1, 2)) %>%
filter(status %in% c("Active", "Unknown")) %>%
unique()
# Write to RDS
saveRDS(all_projects_tidied, "Outputs/all_projects_tidied.rds")
# all_projects_tidied <- readRDS("Outputs/all_projects_tidied.rds")
# Write data to EC google drive
# Authorise googlesheets4 to view and manage sheets on EC Drive
# (using saved authentication token in folder)
ODA_RI_url <- "https://docs.google.com/spreadsheets/d/1ByVBWb3LNSoqAUzKlddd537DleQ-y9MINwY_SuuZEbY/edit#gid=2024786204"
results <- as_sheets_id(ODA_RI_url)
results_sheet <- sheet_write(all_projects_tidied,
ss = results,
sheet = "ODA_RI_projects")
# Exclude project records for "Unknown" country when the project has other country info
all_projects_tidied <- all_projects_final %>%
left_join(unknown_country_projects, by = c("row_id", "id")) %>%
left_join(duplicate_country_projects, by = c("row_id", "id")) %>%
filter(keep == 1 |
exclude == 1 & !(id %in% duplicate_country_projects$id) |
is.na(keep) & is.na(exclude)) %>%
select(-keep, -exclude) %>%
mutate(Country = coalesce(Country, "Unknown"))
# Read in data from script 3
all_projects <- readRDS("Outputs/all_projects.rds")
# Distinguish location and beneficiary countries in main dataset
all_projects_final <- all_projects %>%
mutate(location_country = paste0(coalesce(lead_org_country, ""), ", ", coalesce(partner_org_country, "")),
beneficiary_country = recipient_country)
# Convert location vs. beneficiary country data to long format
countries_data <- all_projects_final %>%
select(id, beneficiary_country, location_country) %>%
gather(key = "country_type", value = "Country", -id) %>%
right_join(select(all_projects_final, -beneficiary_country, -location_country), by = "id")
# Convert dataset to long with one row per country entry
all_projects_split_country <- countries_data %>%
select(id, extending_org, country_type, Country) %>%
mutate(Country = str_replace_all(Country, "Tanzania, United Republic Of|Tanzania, United Republic of", "Tanzania"),
Country = if_else(Country %in% c("Congo (the Democratic Republic of the)", "DRC"),
"Democratic Republic of the Congo", Country)) %>%
mutate(Country = str_replace_all(Country, ";", ",")) %>%
mutate(Country = gsub("\\s*\\([^\\)]+\\)","", as.character(Country))) %>%
separate_rows(Country, sep = ",", convert = FALSE)
# Clean country field
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = str_trim(Country)) %>%
mutate(Country = str_replace_all(Country, c("UK|Scotland|Wales|United kingdom|England|Northern Ireland|UNITED KINGDOM"), "United Kingdom"),
Country = str_replace_all(Country, c("USA|Usa|UNITED STATES|United states|United States Of America"), "United States"),
Country = str_replace(Country, "N/A", "Unknown"),
Country = str_replace(Country, "The Netherlands", "Netherlands"),
Country = str_replace(Country, "The Philippines", "Philippines"),
Country = if_else(str_detect(Country, "Ivoire"), "Ivory Coast", Country),
Country = str_replace(Country, "Republic of Congo", "Congo Republic"),
Country = if_else(str_detect(Country, "Hong Kong"), "Hong Kong", Country),
Country = if_else(str_detect(Country, "Viet Nam"), "Vietnam", Country)) %>%
unique() %>%
filter(!(Country %in% c("", "NA", "Unknown")) & !is.na(Country)) %>%
arrange(id)
# Check countries that are unmatched (this information will be overwritten)
unmatched_countries <- all_projects_split_country %>%
filter(!(Country %in% dac_lookup$country_name)) %>%
select(Country) %>%
unique()
# Replace country with "Unknown" if not recognised against Tableau's accepted list
all_projects_split_country <- all_projects_split_country %>%
mutate(Country = if_else(Country %in% dac_lookup$country_name, Country, "Unknown")) %>%
unique()
# Join countries to project data
all_projects_final <- countries_data %>%
# remove commas at start
mutate(Country = if_else(substr(Country, 1, 1) == ",", substr(Country, 2, length(Country)-1), Country)) %>%
rename(all_countries = Country) %>%
left_join(all_projects_split_country, by = c("id", "extending_org", "country_type"))
# Add row ID field to dataset
all_projects_final$row_id <- seq.int(nrow(all_projects_final))
rm(all_projects)
rm(all_projects_split_country)
# Extract project records with unknown or missing country field
unknown_country_projects <- filter(all_projects_final,
Country %in% c("Unknown") | is.na(Country)) %>%
select(row_id, id) %>%
unique() %>%
mutate(exclude = 1)
# Identify projects that have both a populated and missing country field
# Restrict to just the populated fields (to keep)
duplicate_country_projects <- filter(all_projects_final,
!(Country %in% c("Unknown") | is.na(Country))) %>%
select(row_id, id) %>%
unique() %>%
filter(id %in% unknown_country_projects$id) %>%
mutate(keep = 1)
# Exclude project records for "Unknown" country when the project has other country info
all_projects_tidied <- all_projects_final %>%
left_join(unknown_country_projects, by = c("row_id", "id")) %>%
left_join(duplicate_country_projects, by = c("row_id", "id")) %>%
filter(keep == 1 |
exclude == 1 & !(id %in% duplicate_country_projects$id) |
is.na(keep) & is.na(exclude)) %>%
select(-keep, -exclude) %>%
mutate(Country = coalesce(Country, "Unknown"))
rm(all_projects_final)
rm(unknown_country_projects)
rm(duplicate_country_projects)
# Tidy fund and funder labelling
all_projects_tidied <- all_projects_tidied %>%
mutate(Fund = if_else(str_detect(Fund, "FCDO Research & Innovation|FCDO fully"), "FCDO Research - Programmes", Fund),
Fund = if_else(str_detect(Fund, "FCDO partially"), "FCDO Research - Partnerships", Fund))
# Add FCDO programme ID to dataset
all_projects_tidied <- all_projects_tidied %>%
# remove any text before "-1-" in the FCDO IATI ID
mutate(fcdo_programme_id = if_else(Funder %in% c("Foreign, Commonwealth and Development Office", "FCDO")
& str_detect(iati_id, "-1-"),
sub(".*-1-", "", iati_id), "")) %>%
# remove any FCDO component numbers
mutate(fcdo_programme_id = sub("-.*", "", fcdo_programme_id))
# Create vector of FCDO gov funder programme IATI IDs
gov_funder_iati_ids <- all_projects_tidied %>%
select(iati_id) %>%
filter(str_detect(iati_id, "GB-1-|GB-GOV-1-")) %>%
unique()
# Join funder programme name to main dataset
all_projects_tidied <- all_projects_tidied %>%
left_join(gov_funder_programme_names, by = c("iati_id" = "funder_iati_id"))
# TEMPORARY ***
# Remove IDRC DHSC IATI data (this has been provided by spreadsheet)
all_projects_tidied <- all_projects_tidied %>%
filter(!(Funder == "Department of Health and Social Care" & extending_org == "International Development Research Centre"))
# Remove Afghanistan projects (added Sep 21)
all_projects_tidied <- all_projects_tidied %>%
filter(Country != "Afghanistan")
# Manually edit country info for Chevening Scholarships
all_projects_tidied <- all_projects_tidied %>%
mutate(lead_org_country = if_else(Fund == "Chevening Scholarships", "United Kingdom", lead_org_country),
Country = if_else(Fund == "Chevening Scholarships" & country_type == 2, "United Kingdom", Country))
# Remove non-research partners
# (linked partner data from non-RED managed programmes)
all_projects_tidied <- all_projects_tidied %>%
filter(!(extending_org %in% c("Sightsavers",
"Coffey International Development Limited, a Tetra Tech Company")))
# Correct missing IDS name (ARPA activity)
all_projects_tidied <- all_projects_tidied %>%
mutate(extending_org = if_else(extending_org == "GB-COH-877338",
"Institute of Development Studies", extending_org))
test <- filter(all_projects_tidied, str_detect(title, "UMURINZI"))
View(wellcome_grants_final)
