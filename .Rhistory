countries_string <- paste0(str_to_lower(countries), collapse = "|")
# 2) DAC country lookup and Tableau accepted country list
dac_lookup <- read_xlsx("Inputs/Country lookup - Tableau and DAC Income Group.xlsx") %>%
mutate(country_name = str_to_lower(country_name))
### Input data ----
# FCDO partner IATI activities (to add manually as not linked)
unlinked_partner_iati_activity_ids <- read_xlsx("Inputs/IATI partner activities.xlsx", sheet=1)
# UKRI non GCRF/Newton project IDs
ukri_ooda_projects_ids <- read_xlsx("Inputs/UKRI non GCRF-Newton projects.xlsx", sheet=1) %>%
mutate(recipient_country = NA_character_)
# Wellcome ODA grant data
wellcome_grants <- read_excel("Inputs/wellcome grants.xlsx")
# BEIS RODA GCRF/Newton extracts
roda_extract_gcrf <- read_excel("Inputs/BEIS_GCRF_MODARI_Q2_2021-2022.xlsx", sheet = 1)
roda_extract_newton <- read_excel("Inputs/BEIS_NF_MODARI_Q2_2021-2022.xlsx", sheet = 1)
### Functions -----
### Country lookup of organisation ###
org_country_lookup <- function(org_name) {
# Look up country from GRID database
country_lookup <- data.frame(name = str_to_lower(org_name)) %>%
# Join on GRID database
left_join(grid_institutes, by = "name") %>%
left_join(grid_addresses, by = "grid_id") %>%
select(name, grid_country = country) %>%
# Extract any countries in name
mutate(name_country = str_extract_all(name, countries_string)) %>%
unnest(cols = name_country, keep_empty = TRUE) %>%
# Coalesce country results
mutate(final_country = coalesce(grid_country, name_country))
result <- str_to_title((country_lookup$final_country)[1])
return(result)
}
### IATI ###
# Function to match IATI country code to name
country_code_to_name <- function(country_code) {
# check if input is a valid 2-digit country code
if(is.na(country_code) | nchar(country_code) < 2) { country_name <- NA }
else {
path <- paste0("https://iati.cloud/api/countries/?code=", country_code, "&format=json")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- (fromJSON(response, flatten = TRUE))$results
# Check whether a name has been found
if(length(response) > 0) {
country_name <- response$name
} else {
country_name <- NA
}
}
return(country_name)
}
# Function to extract 5-digit OECD sector codes
sector_extract <- function(page, sector_list) {
path <- paste0("https://iati.cloud/api/sectors/?fields=category,url,name,code&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Condition to check when 5-digit codes stop being returned
if(!("category" %in% names(response$results))) {
sector_list <- rbind(sector_list, response$results)
} else {
sector_list <- sector_list
}
return(sector_list)
}
# Function to extract IATI activity info from activity ID
iati_activity_extract <- function(activity_id) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity&page_size=20")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
return(new_data)
}
# Function to extract IATI activity IDs for a specified org code
org_activity_extract <- function(page, org_code, org_activity_list) {
path <- paste0("https://iati.cloud/api/activities/?format=json&reporting_org_identifier=", org_code, "&fields=iati_identifier,other_identifier,activity_date,reporting_org,sector,location,default_flow_type,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity,tag&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
results <- rbind(org_activity_list, new_data)
return(results)
}
# Function to extract transactions for a specified IATI activity ID
transactions_extract <- function(activity_id, page, output_data) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/transactions/?iati_identifier=", activity_id, "&fields=value,transaction_date,description,currency,receiver_organisation&format=json&page_size=20&page=", page)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
output <- plyr::rbind.fill(output_data, new_data)
} else {
output <- output_data
}
return(output)
}
# Function to extract programme names from IATI
extract_iati_activity_name <- function(activity_id) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0("https://iati.cloud/api/activities/?iati_identifier=", activity_id, "&format=json&fields=title")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$results
if(length(new_data) > 0) {
new_data <- new_data %>%
unnest(col = title.narrative) %>%
select(funder_iati_id = iati_identifier, funder_programme = text)
} else {
new_data <- data.frame()
}
return(new_data)
}
### UKRI ###
# 1 - Function to extract project IDs by fund name (GCRF/Newton)
extract_ukri_projects_by_fund <- function(page, fund) {
path <- paste0("https://gtr.ukri.org:443/gtr/api/projects?q=",
fund, "&f=pro.rcukp&p=", page, "&s=100")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
projects <- response$project
return(projects)
}
# 2 - Function to extract staff organisation
extract_staff_org <- function(staff_data, person_id) {
path <- paste0("http://gtr.ukri.org/person/", person_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
person_current_org_name <- ((response$personOverview)$organisation)$name
person_current_org_id <- ((response$personOverview)$organisation)$id
staff_org_data <- rbind(staff_data, data.frame(person_id,
person_current_org_name,
person_current_org_id))
return(staff_org_data)
}
# 3 - Function to extract country from organisation ID
# (checking GRID database as well as UKRI)
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
org_name <- ((response$organisationOverview)$organisation)$name
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# If unknown use other generic lookup function
if(org_country_ukri == "Unknown") {
org_country <- org_country_lookup(org_name)
} else {
org_country <- org_country_ukri
}
return(org_country)
}
# 4 - Master function to extract UKRI project data by ID
extract_ukri_projects_by_id <- function(id) {
path <- paste0("http://gtr.ukri.org/projects?ref=", id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# extract project data and last refresh date
data <- response$projectOverview
last_updated <- (response$lastRefreshDate)$lastRefreshDate %>%
str_replace_all("Data last updated:  ", "") %>%
as.Date(format = "%d %b %Y")
# Create blank org table for output
org_table <- data.frame()
if(length(data) > 0) {
# Unlist first level
data <- data$projectComposition
# Extract project, lead org and co-investigator staff ids
projects <- data$project
lead_org <- data$leadResearchOrganisation
person_roles <- data$personRole
# Extract staff information (if applicable)
if(length(person_roles) > 0) {                        # checks length of list
person_roles <- person_roles %>%
unnest(col = role) %>%
filter(name == "CO_INVESTIGATOR") %>%
select(id)
if(nrow(person_roles) > 0) {                # checks no. of rows in dataframe
# Extract current organisation of staff
staff_org_data <- data.frame()
for (person_id in person_roles$id) {
staff_org_data <- extract_staff_org(staff_org_data, person_id)
}
# Join on country of organisation
staff_org_country_data <- staff_org_data %>%
mutate(person_current_org_country = map(person_current_org_id, extract_org_country)) %>%
unnest(col = person_current_org_country)
# Collapse staff partner orgs and countries into single records
if(length(staff_org_country_data$person_current_org_name) > 0) {
# Keep staff org names and countries to output
org_table <- staff_org_country_data %>%
mutate(project_id = projects[["grantReference"]],
organisation_role = 2) %>%
select(project_id,
organisation_role,
organisation_name = person_current_org_name,
organisation_country = person_current_org_country)
# Collapse org names and locations
staff_org_names <- staff_org_country_data %>%
select(person_current_org_name) %>%
unique() %>%
summarise(partner_name = paste(person_current_org_name, collapse = ", "))
staff_org_countries <- staff_org_country_data %>%
select(person_current_org_country) %>%
filter(person_current_org_country != "Unknown") %>%
unique() %>%
summarise(partner_country = paste(person_current_org_country, collapse = ", "))
org_roles_summarised <- cbind(staff_org_names, staff_org_countries)
}
}
}
# Start constructing project data frame
project_data <- data.frame(
title = projects[["title"]],
status = projects[["status"]],
gtr_id = projects[["grantReference"]],
fund = projects[["fund"]],
abstract = projects[["abstractText"]],
lead_org_name = lead_org[["name"]],
last_updated = as.Date(last_updated))
# Add country of lead org
project_data <- project_data %>%
mutate(lead_org_country = map(lead_org[["id"]], extract_org_country)) %>%
unnest(col = lead_org_country)
# Attach partner org info
if(exists("org_roles_summarised")) {
project_data <- project_data %>%
mutate(partner_org_name = org_roles_summarised$partner_name,
partner_org_country = org_roles_summarised$partner_country)
} else {
project_data <- project_data %>%
mutate(partner_org_name = NA_character_,
partner_org_country = NA_character_)
}
# Write lead org name and country to file
org_table <- org_table %>%
rbind(select(project_data,
project_id = gtr_id,
organisation_name = lead_org_name,
organisation_country = lead_org_country) %>%
mutate(organisation_role = 1))
# Keep desired fields
project_data <- project_data %>%
select(gtr_id, title, abstract, fund.start, fund.end, amount = fund.valuePounds,
extending_org = fund.funder.name,
lead_org_name, lead_org_country, partner_org_name, partner_org_country,
status, last_updated)
} else {
# If no data available to extract, return empty dataframe
project_data <- data.frame()
}
return(list(project_data, org_table))
}
# Read in org names and countries from previous script
org_names_and_locations_1 <- readRDS(file = "Outputs/org_names_and_locations_1.rds")
# Read in list of IATI activities (from UK gov funders and select delivery partners)
iati_activity_list <- readRDS(file = "Outputs/gov_list_final.rds")
partner_iati_list <- readRDS(file = "Outputs/partner_activity_list.rds")
# Filter gov department records for project-level activities
iati_projects <- iati_activity_list %>%
filter(str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
str_detect(iati_identifier, "1-205053") |   # South Asia Country Research Fund (FCDO)
str_detect(iati_identifier, "1-300708") |   # Evidence Fund (FCDO)
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
filter(flow_type == "ODA") %>%
mutate(fund = if_else(is.na(fund), "Unknown", fund)) %>%
plyr::rbind.fill(partner_iati_list) # Add partner activities
iati_projects <- iati_activity_list %>%
filter(str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
str_detect(iati_identifier, "1-205053") |   # South Asia Country Research Fund (FCDO)
str_detect(iati_identifier, "1-300708") |   # Evidence Fund (FCDO)
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
filter(flow_type == "ODA")
# Filter gov department records for project-level activities
iati_projects <- iati_activity_list %>%
filter(str_detect(iati_identifier, "GB-GOV-3") |   # ex-FCO activities
str_detect(iati_identifier, "1-205053") |   # South Asia Country Research Fund (FCDO)
str_detect(iati_identifier, "1-300708") |   # Evidence Fund (FCDO)
str_detect(iati_identifier, "GB-GOV-7")     # Defra activities
) %>%
mutate(fund = if_else(is.na(fund), "Unknown", fund)) %>%
plyr::rbind.fill(partner_iati_list) # Add partner activities
# Identify UKRI projects (by "RI" IATI tag)
ukri_iati_projects <- iati_activity_list %>%
filter(extending_org == "UK Research & Innovation") %>%
mutate(gtr_id = str_replace(iati_identifier, "GB-GOV-13-FUND--GCRF-", "")) %>%
mutate(gtr_id = str_replace(gtr_id, "GB-GOV-13-FUND--Newton-", "")) %>%
mutate(gtr_id = str_replace_all(gtr_id, "_", "/")) %>%
select(gtr_id, iati_identifier, recipient_country) %>%
unique()
# Keep required fields
iati_projects_final <- iati_projects %>%
mutate(Funder = coalesce(gov_funder, reporting_org),
partner_org_name = partner,
partner_org_country = partner_country,
lead_org_name = coalesce(extending_org, reporting_org),
lead_org_country = reporting_org_country,
extending_org = coalesce(extending_org, reporting_org),
status = if_else(!is.na(end_date),
if_else(Sys.Date() <= end_date, "Active", "Closed"), "Unknown"),
last_updated = quarter_end_date) %>%
select(id = iati_identifier,
title = activity_title,
abstract = activity_description,
start_date,
end_date,
amount,
period_start,
period_end,
currency,
extending_org,
lead_org_name,
lead_org_country,
partner_org_name,
partner_org_country,
iati_id = programme_id,
Fund = fund,
Funder,
recipient_country,
subject = sector_name,
status,
last_updated
)
# Add IATI link to awards
iati_projects_final <- iati_projects_final %>%
mutate(link = paste0("https://d-portal.org/ctrack.html#view=act&aid=", id))
# Clean up
rm(iati_activity_list)
rm(partner_iati_list)
rm(iati_projects)
# Label GCRF and Newton projects from IATI UKRI data
ukri_projects_by_fund <- ukri_iati_projects %>%
mutate(Fund = case_when(
str_detect(iati_identifier, "GCRF") ~ "Global Challenges Research Fund (GCRF)",
str_detect(iati_identifier, "Newton") ~ "Newton Fund",
TRUE ~ "Other"
),
Funder = "Department for Business, Energy and Industrial Strategy")
# Join GCRF/Newton project IDs to other ODA IDs (from spreadsheet)
ukri_projects_ids_full <- ukri_projects_by_fund %>%
rbind(ukri_ooda_projects_ids)
ukri_projects_by_id <- readRDS("Outputs/ukri_projects_by_id.rds")
ukri_projects_with_countries <- readRDS("Outputs/ukri_projects_with_countries.rds")
org_names_and_locations_2 <- readRDS(file = "Outputs/org_names_and_locations_2.rds")
# Define URL to extract ODA projects
path <- paste0("https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)")
# Extract data from the NIHR API
request <- GET(url = path)
request$status_code # 200 = success
# Convert to text and read from JSON
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Extract dataframe
nihr_projects <- response$records
# Remove unneeded columns
nihr_projects <- nihr_projects %>%
select(-1, -2)
# Remove "field." from column names
names(nihr_projects) <- gsub(pattern = "fields.", replacement = "", x = names(nihr_projects))
# Define URL to extract ODA projects
path_projects <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)"
path_partners <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=nihr-open-data-global-health-downstream-partner-data&q=&facet=institutionname&facet=institutioncity&facet=institutioncountry"
request$status_code # 200 = success
# Define URL to extract ODA projects
path_projects <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)"
path_partners <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=nihr-open-data-global-health-downstream-partner-data&q=&facet=institutionname&facet=institutioncity&facet=institutioncountry"
# Extract data from the NIHR API
request1 <- GET(url = path_projects)
request2 <- GET(url = path_partners)
# Convert to text and read from JSON
response1 <- content(request1, as = "text", encoding = "UTF-8")
response1 <- fromJSON(response1, flatten = TRUE)
response2 <- content(request2, as = "text", encoding = "UTF-8")
response2 <- fromJSON(response2, flatten = TRUE)
View(response2)
# Extract dataframe
nihr_projects <- response1$records
nihr_partners <- response2$records
View(nihr_partners)
# Define URL to extract ODA projects
path_projects <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)"
path_partners <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=nihr-open-data-global-health-downstream-partner-data&q=&rows=60000&facet=institutionname&facet=institutioncity&facet=institutioncountry"
# Extract data from the NIHR API
request1 <- GET(url = path_projects)
request2 <- GET(url = path_partners)
# Convert to text and read from JSON
response1 <- content(request1, as = "text", encoding = "UTF-8")
response1 <- fromJSON(response1, flatten = TRUE)
response2 <- content(request2, as = "text", encoding = "UTF-8")
response2 <- fromJSON(response2, flatten = TRUE)
# Extract dataframe
nihr_projects <- response1$records
nihr_partners <- response2$records
# Define URL to extract ODA projects
path_projects <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)"
path_partners <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=nihr-open-data-global-health-downstream-partner-data&q=&rows=6000&facet=institutionname&facet=institutioncity&facet=institutioncountry"
# Extract data from the NIHR API
request1 <- GET(url = path_projects)
request2 <- GET(url = path_partners)
# Convert to text and read from JSON
response1 <- content(request1, as = "text", encoding = "UTF-8")
response1 <- fromJSON(response1, flatten = TRUE)
response2 <- content(request2, as = "text", encoding = "UTF-8")
response2 <- fromJSON(response2, flatten = TRUE)
# Extract dataframe
nihr_projects <- response1$records
nihr_partners <- response2$records
View(nihr_partners)
View(nihr_partners)
View(nihr_projects)
path_partners <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=nihr-open-data-global-health-downstream-partner-data&q=&rows=6000&facet=institutionname&facet=institutioncity&facet=institutioncountry&facet=project_id"
# Extract data from the NIHR API
request1 <- GET(url = path_projects)
request2 <- GET(url = path_partners)
# Convert to text and read from JSON
response1 <- content(request1, as = "text", encoding = "UTF-8")
response1 <- fromJSON(response1, flatten = TRUE)
response2 <- content(request2, as = "text", encoding = "UTF-8")
response2 <- fromJSON(response2, flatten = TRUE)
# Extract dataframe
nihr_projects <- response1$records
nihr_partners <- response2$records
View(nihr_partners)
path_partners <- "https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=nihr-open-data-global-health-downstream-partner-data&q=&rows=6000&facet=institutionname&facet=institutioncity&facet=institutioncountry&facet=projectref"
# Extract data from the NIHR API
request1 <- GET(url = path_projects)
request2 <- GET(url = path_partners)
# Convert to text and read from JSON
response1 <- content(request1, as = "text", encoding = "UTF-8")
response1 <- fromJSON(response1, flatten = TRUE)
response2 <- content(request2, as = "text", encoding = "UTF-8")
response2 <- fromJSON(response2, flatten = TRUE)
# Extract dataframe
nihr_projects <- response1$records
nihr_partners <- response2$records
View(nihr_partners)
View(nihr_partners)
View(nihr_projects)
i <- 1
nihr_data <- list()
i <- 1
nihr_data <- list()
# Define URL to extract ODA projects
paths <- c("https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=infonihr-open-dataset&q=&rows=6000&facet=funder&facet=project_status&facet=programme&facet=programme_type&facet=programme_stream&facet=start_date&facet=acronym&facet=ctry17nm&facet=rgn17nm&facet=lad19nm&facet=pconnm&refine.funder=NIHR+(ODA)"
,"https://nihr.opendatasoft.com/api/records/1.0/search/?dataset=nihr-open-data-global-health-downstream-partner-data&q=&rows=6000&facet=institutionname&facet=institutioncity&facet=institutioncountry&facet=projectref")
for (path in paths) {
request <- GET(url = path)
# Convert to text and read from JSON
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
# Extract dataframe
data <- response$records
# Remove "field." from column names
names(data) <- gsub(pattern = "fields.", replacement = "", x = names(data))
# Save output to list
nihr_data[[i]] <- data
i <- i+1
}
nihr_projects <- nihr_data[[1]]
nihr_partners <- nihr_data[[2]]
View(nihr_partners)
nihr_partners <- nihr_data[[2]] %>%
select(projectref, institutionname, institutioncountry)
nihr_partners <- nihr_data[[2]] %>%
select(projectref, institutionname, institutioncountry) %>%
unique()
# Join datasets
nihr_projects <- nihr_projects %>%
left_join(nihr_partners, by = c("project_id" = "projectref"))
View(nihr_projects)
nihr_partners <- nihr_data[[2]] %>%
select(projectref, institutionname, institutioncountry) %>%
unique() %>%
group_by(projectref) %>%
summarise(institutionname = paste(coalesce(institutionname, ""), collapse = ", "),
institutioncountry = paste(coalesce(institutioncountry, ""), collapse = ", "))
View(nihr_partners)
nihr_projects <- nihr_data[[1]]
# Join datasets
nihr_projects <- nihr_projects %>%
left_join(nihr_partners, by = c("project_id" = "projectref"))
View(nihr_projects)
